
//------------------------------------------------------------------------------
// <auto-generated>
// 		这个文件是从模板自动生成的
//      手工修改该文件，将会引起未知异常
//      如果代码重新生成，将会覆盖您修改的内容
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Configuration;
using System.Xml.Linq;
using Jinher.JAP.MVC.Model;
using Jinher.JAP.Metadata;
using System.Collections.Generic;
using Jinher.AMP.BTP.Deploy;

namespace Jinher.AMP.BTP.UI.Models
{
    
    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AllPayment",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AllPaymentDTO))]
    public partial class AllPayment: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AllPayment ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PaymentName",DTOPropertyName="PaymentName",IsRequired=true, IsSerializable = true)]
        public string PaymentName
        {
            get
            {
                return _PaymentName;
            }
            set
            {
    
                if (_PaymentName != value)
                {
                          
                _PaymentName = value; 
               
           		}
    		}
     	}
    
     	private string _PaymentName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AllPaymentDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AllPaymentDTO dto = srcDTO as AllPaymentDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.PaymentName = dto.PaymentName;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AllPaymentDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AllPaymentDTO();
                base.ToBEData(ref todto);
    			AllPaymentDTO dto = todto as AllPaymentDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.PaymentName = this.PaymentName;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商贸app扩展表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppExtension",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppExtensionDTO))]
    public partial class AppExtension: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppExtension ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 应用名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 是否显示分类菜单
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsShowSearchMenu",DTOPropertyName="IsShowSearchMenu",IsRequired=true, IsSerializable = true)]
        public bool IsShowSearchMenu
        {
            get
            {
                return _IsShowSearchMenu;
            }
            set
            {
    
                if (_IsShowSearchMenu != value)
                {
                          
                _IsShowSearchMenu = value; 
               
           		}
    		}
     	}
    
     	private bool _IsShowSearchMenu;
        
    
        /// <summary>
        /// 是否商品列表加购物车 0 否，1是
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsShowAddCart",DTOPropertyName="IsShowAddCart",IsRequired=true, IsSerializable = true)]
        public bool IsShowAddCart
        {
            get
            {
                return _IsShowAddCart;
            }
            set
            {
    
                if (_IsShowAddCart != value)
                {
                          
                _IsShowAddCart = value; 
               
           		}
    		}
     	}
    
     	private bool _IsShowAddCart;
        
    
        /// <summary>
        /// 是否全部商品分成
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDividendAll",DTOPropertyName="IsDividendAll",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsDividendAll
        {
            get
            {
                return _IsDividendAll;
            }
            set
            {
    
                if (_IsDividendAll != value)
                {
                          
                _IsDividendAll = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsDividendAll;
        
    
        /// <summary>
        /// 众销分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=true, IsSerializable = true)]
        public decimal SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _SharePercent;
        
    
        /// <summary>
        /// 是否启用积分抵现功能
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsCashForScore",DTOPropertyName="IsCashForScore",IsRequired=true, IsSerializable = true)]
        public bool IsCashForScore
        {
            get
            {
                return _IsCashForScore;
            }
            set
            {
    
                if (_IsCashForScore != value)
                {
                          
                _IsCashForScore = value; 
               
           		}
    		}
     	}
    
     	private bool _IsCashForScore;
        
    
        /// <summary>
        /// 分销体系中直接上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistributeL1Percent",DTOPropertyName="DistributeL1Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DistributeL1Percent
        {
            get
            {
                return _DistributeL1Percent;
            }
            set
            {
    
                if (_DistributeL1Percent != value)
                {
                          
                _DistributeL1Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DistributeL1Percent;
        
    
        /// <summary>
        /// 分销体系中2级上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistributeL2Percent",DTOPropertyName="DistributeL2Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DistributeL2Percent
        {
            get
            {
                return _DistributeL2Percent;
            }
            set
            {
    
                if (_DistributeL2Percent != value)
                {
                          
                _DistributeL2Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DistributeL2Percent;
        
    
        /// <summary>
        /// 分销体系中3级上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistributeL3Percent",DTOPropertyName="DistributeL3Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DistributeL3Percent
        {
            get
            {
                return _DistributeL3Percent;
            }
            set
            {
    
                if (_DistributeL3Percent != value)
                {
                          
                _DistributeL3Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DistributeL3Percent;
        
    
        /// <summary>
        /// 默认发票类型(当前app默认发票类型：第一位增值税普通发票，第二位电子发票，第三位增值税专用发票；0非默认，1默认)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InvoiceDefault",DTOPropertyName="InvoiceDefault",IsRequired=true, IsSerializable = true)]
        public int InvoiceDefault
        {
            get
            {
                return _InvoiceDefault;
            }
            set
            {
    
                if (_InvoiceDefault != value)
                {
                          
                _InvoiceDefault = value; 
               
           		}
    		}
     	}
    
     	private int _InvoiceDefault = 1;
        
    
        /// <summary>
        /// 发票设置(当前app可用的发票类型：第一位增值税普通发票，第二位电子发票，第三位增值税专用发票；0不可用，1可用)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InvoiceValues",DTOPropertyName="InvoiceValues",IsRequired=true, IsSerializable = true)]
        public int InvoiceValues
        {
            get
            {
                return _InvoiceValues;
            }
            set
            {
    
                if (_InvoiceValues != value)
                {
                          
                _InvoiceValues = value; 
               
           		}
    		}
     	}
    
     	private int _InvoiceValues = 1;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChannelSharePercent",DTOPropertyName="ChannelSharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ChannelSharePercent
        {
            get
            {
                return _ChannelSharePercent;
            }
            set
            {
    
                if (_ChannelSharePercent != value)
                {
                          
                _ChannelSharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ChannelSharePercent;
        
    
        /// <summary>
        /// 是否统一设置积分抵现比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsScoreAll",DTOPropertyName="IsScoreAll",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsScoreAll
        {
            get
            {
                return _IsScoreAll;
            }
            set
            {
    
                if (_IsScoreAll != value)
                {
                          
                _IsScoreAll = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsScoreAll;
        
    
        /// <summary>
        /// 积分抵用上限
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=true, IsSerializable = true)]
        public decimal ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _ScorePercent;
        
    
        /// <summary>
        /// 推广主分成是否所有商品
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsSpreadAll",DTOPropertyName="IsSpreadAll",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsSpreadAll
        {
            get
            {
                return _IsSpreadAll;
            }
            set
            {
    
                if (_IsSpreadAll != value)
                {
                          
                _IsSpreadAll = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsSpreadAll;
        
    
        /// <summary>
        /// 推广主分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadPercent",DTOPropertyName="SpreadPercent",IsRequired=true, IsSerializable = true)]
        public decimal SpreadPercent
        {
            get
            {
                return _SpreadPercent;
            }
            set
            {
    
                if (_SpreadPercent != value)
                {
                          
                _SpreadPercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _SpreadPercent;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppExtensionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppExtensionDTO dto = srcDTO as AppExtensionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppName = dto.AppName;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.IsShowSearchMenu = dto.IsShowSearchMenu;
    								
    				 this.IsShowAddCart = dto.IsShowAddCart;
    								
    				 this.IsDividendAll = dto.IsDividendAll;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.IsCashForScore = dto.IsCashForScore;
    								
    				 this.DistributeL1Percent = dto.DistributeL1Percent;
    								
    				 this.DistributeL2Percent = dto.DistributeL2Percent;
    								
    				 this.DistributeL3Percent = dto.DistributeL3Percent;
    								
    				 this.InvoiceDefault = dto.InvoiceDefault;
    								
    				 this.InvoiceValues = dto.InvoiceValues;
    								
    				 this.ChannelSharePercent = dto.ChannelSharePercent;
    								
    				 this.IsScoreAll = dto.IsScoreAll;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.IsSpreadAll = dto.IsSpreadAll;
    								
    				 this.SpreadPercent = dto.SpreadPercent;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppExtensionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppExtensionDTO();
                base.ToBEData(ref todto);
    			AppExtensionDTO dto = todto as AppExtensionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.IsShowSearchMenu = this.IsShowSearchMenu;
    								
    				 dto.IsShowAddCart = this.IsShowAddCart;
    								
    				 dto.IsDividendAll = this.IsDividendAll;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.IsCashForScore = this.IsCashForScore;
    								
    				 dto.DistributeL1Percent = this.DistributeL1Percent;
    								
    				 dto.DistributeL2Percent = this.DistributeL2Percent;
    								
    				 dto.DistributeL3Percent = this.DistributeL3Percent;
    								
    				 dto.InvoiceDefault = this.InvoiceDefault;
    								
    				 dto.InvoiceValues = this.InvoiceValues;
    								
    				 dto.ChannelSharePercent = this.ChannelSharePercent;
    								
    				 dto.IsScoreAll = this.IsScoreAll;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.IsSpreadAll = this.IsSpreadAll;
    								
    				 dto.SpreadPercent = this.SpreadPercent;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 应用管理:为指定的用户操作应用
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.APPManage",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.APPManageDTO))]
    public partial class APPManage: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  APPManage ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 应用名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=false, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifiedId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,APPManageDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                APPManageDTO dto = srcDTO as APPManageDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Remark = dto.Remark;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ModifiedId = dto.ModifiedId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，APPManageDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new APPManageDTO();
                base.ToBEData(ref todto);
    			APPManageDTO dto = todto as APPManageDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Remark = this.Remark;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = (Guid)this.SubId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ModifiedId = (Guid)this.ModifiedId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppMetaData",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppMetaDataDTO))]
    public partial class AppMetaData: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppMetaData ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Key",DTOPropertyName="Key",IsRequired=true, IsSerializable = true)]
        public string Key
        {
            get
            {
                return _Key;
            }
            set
            {
    
                if (_Key != value)
                {
                          
                _Key = value; 
               
           		}
    		}
     	}
    
     	private string _Key;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Value",DTOPropertyName="Value",IsRequired=true, IsSerializable = true)]
        public string Value
        {
            get
            {
                return _Value;
            }
            set
            {
    
                if (_Value != value)
                {
                          
                _Value = value; 
               
           		}
    		}
     	}
    
     	private string _Value;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppMetaDataDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppMetaDataDTO dto = srcDTO as AppMetaDataDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Key = dto.Key;
    								
    				 this.Value = dto.Value;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppMetaDataDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppMetaDataDTO();
                base.ToBEData(ref todto);
    			AppMetaDataDTO dto = todto as AppMetaDataDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Key = this.Key;
    								
    				 dto.Value = this.Value;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppOrderPickUp",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppOrderPickUpDTO))]
    public partial class AppOrderPickUp: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppOrderPickUp ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 提货人联系方式
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Phone",DTOPropertyName="Phone",IsRequired=false, IsSerializable = true)]
        public string Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
    
                if (_Phone != value)
                {
                          
                _Phone = value; 
               
           		}
    		}
     	}
    
     	private string _Phone;
        
    
        /// <summary>
        /// 预约提货日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BookDate",DTOPropertyName="BookDate",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> BookDate
        {
            get
            {
                return _BookDate;
            }
            set
            {
    
                if (_BookDate != value)
                {
                          
                _BookDate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _BookDate;
        
    
        /// <summary>
        /// 预约提货开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BookStartTime",DTOPropertyName="BookStartTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.TimeSpan> BookStartTime
        {
            get
            {
                return _BookStartTime;
            }
            set
            {
    
                if (_BookStartTime != value)
                {
                          
                _BookStartTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.TimeSpan> _BookStartTime;
        
    
        /// <summary>
        /// 预约提货截止时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BookEndTime",DTOPropertyName="BookEndTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.TimeSpan> BookEndTime
        {
            get
            {
                return _BookEndTime;
            }
            set
            {
    
                if (_BookEndTime != value)
                {
                          
                _BookEndTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.TimeSpan> _BookEndTime;
        
    
        /// <summary>
        /// 提货码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpCode",DTOPropertyName="PickUpCode",IsRequired=true, IsSerializable = true)]
        public string PickUpCode
        {
            get
            {
                return _PickUpCode;
            }
            set
            {
    
                if (_PickUpCode != value)
                {
                          
                _PickUpCode = value; 
               
           		}
    		}
     	}
    
     	private string _PickUpCode;
        
    
        /// <summary>
        /// 提货二维码url地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpQrCodeUrl",DTOPropertyName="PickUpQrCodeUrl",IsRequired=true, IsSerializable = true)]
        public string PickUpQrCodeUrl
        {
            get
            {
                return _PickUpQrCodeUrl;
            }
            set
            {
    
                if (_PickUpQrCodeUrl != value)
                {
                          
                _PickUpQrCodeUrl = value; 
               
           		}
    		}
     	}
    
     	private string _PickUpQrCodeUrl;
        
    
        /// <summary>
        /// 自提点id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeStationId",DTOPropertyName="SelfTakeStationId",IsRequired=true, IsSerializable = true)]
        public System.Guid SelfTakeStationId
        {
            get
            {
                return _SelfTakeStationId;
            }
            set
            {
    
                if (_SelfTakeStationId != value)
                {
                          
                _SelfTakeStationId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SelfTakeStationId;
        
    
        /// <summary>
        /// 自提点省
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StsProvince",DTOPropertyName="StsProvince",IsRequired=false, IsSerializable = true)]
        public string StsProvince
        {
            get
            {
                return _StsProvince;
            }
            set
            {
    
                if (_StsProvince != value)
                {
                          
                _StsProvince = value; 
               
           		}
    		}
     	}
    
     	private string _StsProvince;
        
    
        /// <summary>
        /// 自提城市
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StsCity",DTOPropertyName="StsCity",IsRequired=false, IsSerializable = true)]
        public string StsCity
        {
            get
            {
                return _StsCity;
            }
            set
            {
    
                if (_StsCity != value)
                {
                          
                _StsCity = value; 
               
           		}
    		}
     	}
    
     	private string _StsCity;
        
    
        /// <summary>
        /// 自提区县
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StsDistrict",DTOPropertyName="StsDistrict",IsRequired=true, IsSerializable = true)]
        public string StsDistrict
        {
            get
            {
                return _StsDistrict;
            }
            set
            {
    
                if (_StsDistrict != value)
                {
                          
                _StsDistrict = value; 
               
           		}
    		}
     	}
    
     	private string _StsDistrict;
        
    
        /// <summary>
        /// 详细地址（省+市+区县+详细地址）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StsAddress",DTOPropertyName="StsAddress",IsRequired=true, IsSerializable = true)]
        public string StsAddress
        {
            get
            {
                return _StsAddress;
            }
            set
            {
    
                if (_StsAddress != value)
                {
                          
                _StsAddress = value; 
               
           		}
    		}
     	}
    
     	private string _StsAddress;
        
    
        /// <summary>
        /// 自提点联系电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StsPhone",DTOPropertyName="StsPhone",IsRequired=false, IsSerializable = true)]
        public string StsPhone
        {
            get
            {
                return _StsPhone;
            }
            set
            {
    
                if (_StsPhone != value)
                {
                          
                _StsPhone = value; 
               
           		}
    		}
     	}
    
     	private string _StsPhone;
        
    
        /// <summary>
        /// 自提点名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StsName",DTOPropertyName="StsName",IsRequired=true, IsSerializable = true)]
        public string StsName
        {
            get
            {
                return _StsName;
            }
            set
            {
    
                if (_StsName != value)
                {
                          
                _StsName = value; 
               
           		}
    		}
     	}
    
     	private string _StsName;
        
    
        /// <summary>
        /// 提货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpTime",DTOPropertyName="PickUpTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PickUpTime
        {
            get
            {
                return _PickUpTime;
            }
            set
            {
    
                if (_PickUpTime != value)
                {
                          
                _PickUpTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PickUpTime;
        
    
        /// <summary>
        /// 提货管理员
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpManagerId",DTOPropertyName="PickUpManagerId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> PickUpManagerId
        {
            get
            {
                return _PickUpManagerId;
            }
            set
            {
    
                if (_PickUpManagerId != value)
                {
                          
                _PickUpManagerId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _PickUpManagerId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppOrderPickUpDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppOrderPickUpDTO dto = srcDTO as AppOrderPickUpDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Phone = dto.Phone;
    								
    				 this.BookDate = dto.BookDate;
    								
    				 this.BookStartTime = dto.BookStartTime;
    								
    				 this.BookEndTime = dto.BookEndTime;
    								
    				 this.PickUpCode = dto.PickUpCode;
    								
    				 this.PickUpQrCodeUrl = dto.PickUpQrCodeUrl;
    								
    				 this.SelfTakeStationId = dto.SelfTakeStationId;
    								
    				 this.StsProvince = dto.StsProvince;
    								
    				 this.StsCity = dto.StsCity;
    								
    				 this.StsDistrict = dto.StsDistrict;
    								
    				 this.StsAddress = dto.StsAddress;
    								
    				 this.StsPhone = dto.StsPhone;
    								
    				 this.StsName = dto.StsName;
    								
    				 this.PickUpTime = dto.PickUpTime;
    								
    				 this.PickUpManagerId = dto.PickUpManagerId;
    								
    				 this.UserId = dto.UserId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppOrderPickUpDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppOrderPickUpDTO();
                base.ToBEData(ref todto);
    			AppOrderPickUpDTO dto = todto as AppOrderPickUpDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Phone = this.Phone;
    								
    				 dto.BookDate = this.BookDate;
    								
    				 dto.BookStartTime = this.BookStartTime;
    								
    				 dto.BookEndTime = this.BookEndTime;
    								
    				 dto.PickUpCode = this.PickUpCode;
    								
    				 dto.PickUpQrCodeUrl = this.PickUpQrCodeUrl;
    								
    				 dto.SelfTakeStationId = this.SelfTakeStationId;
    								
    				 dto.StsProvince = this.StsProvince;
    								
    				 dto.StsCity = this.StsCity;
    								
    				 dto.StsDistrict = this.StsDistrict;
    								
    				 dto.StsAddress = this.StsAddress;
    								
    				 dto.StsPhone = this.StsPhone;
    								
    				 dto.StsName = this.StsName;
    								
    				 dto.PickUpTime = this.PickUpTime;
    								
    				 dto.PickUpManagerId = this.PickUpManagerId;
    								
    				 dto.UserId = this.UserId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppSelfTakeStation",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppSelfTakeStationDTO))]
    public partial class AppSelfTakeStation: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppSelfTakeStation ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 省编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Province",DTOPropertyName="Province",IsRequired=true, IsSerializable = true)]
        public string Province
        {
            get
            {
                return _Province;
            }
            set
            {
    
                if (_Province != value)
                {
                          
                _Province = value; 
               
           		}
    		}
     	}
    
     	private string _Province;
        
    
        /// <summary>
        /// 城市编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="City",DTOPropertyName="City",IsRequired=true, IsSerializable = true)]
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
    
                if (_City != value)
                {
                          
                _City = value; 
               
           		}
    		}
     	}
    
     	private string _City;
        
    
        /// <summary>
        /// 区县编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="District",DTOPropertyName="District",IsRequired=true, IsSerializable = true)]
        public string District
        {
            get
            {
                return _District;
            }
            set
            {
    
                if (_District != value)
                {
                          
                _District = value; 
               
           		}
    		}
     	}
    
     	private string _District;
        
    
        /// <summary>
        /// 详细地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Address",DTOPropertyName="Address",IsRequired=true, IsSerializable = true)]
        public string Address
        {
            get
            {
                return _Address;
            }
            set
            {
    
                if (_Address != value)
                {
                          
                _Address = value; 
               
           		}
    		}
     	}
    
     	private string _Address;
        
    
        /// <summary>
        /// 自提点联系电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Phone",DTOPropertyName="Phone",IsRequired=false, IsSerializable = true)]
        public string Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
    
                if (_Phone != value)
                {
                          
                _Phone = value; 
               
           		}
    		}
     	}
    
     	private string _Phone;
        
    
        /// <summary>
        /// 下单后预约自提天数（目前固定为1天）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DelayDay",DTOPropertyName="DelayDay",IsRequired=true, IsSerializable = true)]
        public int DelayDay
        {
            get
            {
                return _DelayDay;
            }
            set
            {
    
                if (_DelayDay != value)
                {
                          
                _DelayDay = value; 
               
           		}
    		}
     	}
    
     	private int _DelayDay;
        
    
        /// <summary>
        /// 预约时间范围最大值（天），目前固定14天
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MaxBookDay",DTOPropertyName="MaxBookDay",IsRequired=true, IsSerializable = true)]
        public int MaxBookDay
        {
            get
            {
                return _MaxBookDay;
            }
            set
            {
    
                if (_MaxBookDay != value)
                {
                          
                _MaxBookDay = value; 
               
           		}
    		}
     	}
    
     	private int _MaxBookDay;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppSelfTakeStationDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppSelfTakeStationDTO dto = srcDTO as AppSelfTakeStationDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Province = dto.Province;
    								
    				 this.City = dto.City;
    								
    				 this.District = dto.District;
    								
    				 this.Address = dto.Address;
    								
    				 this.Phone = dto.Phone;
    								
    				 this.DelayDay = dto.DelayDay;
    								
    				 this.MaxBookDay = dto.MaxBookDay;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.SubId = dto.SubId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppSelfTakeStationDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppSelfTakeStationDTO();
                base.ToBEData(ref todto);
    			AppSelfTakeStationDTO dto = todto as AppSelfTakeStationDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Province = this.Province;
    								
    				 dto.City = this.City;
    								
    				 dto.District = this.District;
    								
    				 dto.Address = this.Address;
    								
    				 dto.Phone = this.Phone;
    								
    				 dto.DelayDay = this.DelayDay;
    								
    				 dto.MaxBookDay = this.MaxBookDay;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.SubId = this.SubId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppSet",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppSetDTO))]
    public partial class AppSet: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppSet ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppSetType",DTOPropertyName="AppSetType",IsRequired=true, IsSerializable = true)]
        public int AppSetType
        {
            get
            {
                return _AppSetType;
            }
            set
            {
    
                if (_AppSetType != value)
                {
                          
                _AppSetType = value; 
               
           		}
    		}
     	}
    
     	private int _AppSetType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppIcon",DTOPropertyName="AppIcon",IsRequired=true, IsSerializable = true)]
        public string AppIcon
        {
            get
            {
                return _AppIcon;
            }
            set
            {
    
                if (_AppIcon != value)
                {
                          
                _AppIcon = value; 
               
           		}
    		}
     	}
    
     	private string _AppIcon;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppAccount",DTOPropertyName="AppAccount",IsRequired=true, IsSerializable = true)]
        public string AppAccount
        {
            get
            {
                return _AppAccount;
            }
            set
            {
    
                if (_AppAccount != value)
                {
                          
                _AppAccount = value; 
               
           		}
    		}
     	}
    
     	private string _AppAccount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppCreateOn",DTOPropertyName="AppCreateOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime AppCreateOn
        {
            get
            {
                return _AppCreateOn;
            }
            set
            {
    
                if (_AppCreateOn != value)
                {
                          
                _AppCreateOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _AppCreateOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppSetId",DTOPropertyName="AppSetId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppSetId
        {
            get
            {
                return _AppSetId;
            }
            set
            {
    
                if (_AppSetId != value)
                {
                          
                _AppSetId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppSetId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppSetDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppSetDTO dto = srcDTO as AppSetDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppSetType = dto.AppSetType;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppIcon = dto.AppIcon;
    								
    				 this.AppAccount = dto.AppAccount;
    								
    				 this.AppCreateOn = dto.AppCreateOn;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.AppSetId = dto.AppSetId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppSetDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppSetDTO();
                base.ToBEData(ref todto);
    			AppSetDTO dto = todto as AppSetDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppSetType = this.AppSetType;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppIcon = this.AppIcon;
    								
    				 dto.AppAccount = this.AppAccount;
    								
    				 dto.AppCreateOn = this.AppCreateOn;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.AppSetId = this.AppSetId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppStsManager",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppStsManagerDTO))]
    public partial class AppStsManager: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppStsManager ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=true, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeStationId",DTOPropertyName="SelfTakeStationId",IsRequired=true, IsSerializable = true)]
        public System.Guid SelfTakeStationId
        {
            get
            {
                return _SelfTakeStationId;
            }
            set
            {
    
                if (_SelfTakeStationId != value)
                {
                          
                _SelfTakeStationId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SelfTakeStationId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppStsManagerDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppStsManagerDTO dto = srcDTO as AppStsManagerDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserCode = dto.UserCode;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.SelfTakeStationId = dto.SelfTakeStationId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppStsManagerDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppStsManagerDTO();
                base.ToBEData(ref todto);
    			AppStsManagerDTO dto = todto as AppStsManagerDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserCode = this.UserCode;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.SelfTakeStationId = this.SelfTakeStationId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AppStsOfficeTime",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AppStsOfficeTimeDTO))]
    public partial class AppStsOfficeTime: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AppStsOfficeTime ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WeekDays",DTOPropertyName="WeekDays",IsRequired=true, IsSerializable = true)]
        public int WeekDays
        {
            get
            {
                return _WeekDays;
            }
            set
            {
    
                if (_WeekDays != value)
                {
                          
                _WeekDays = value; 
               
           		}
    		}
     	}
    
     	private int _WeekDays;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StartTime",DTOPropertyName="StartTime",IsRequired=true, IsSerializable = true)]
        public System.TimeSpan StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
    
                if (_StartTime != value)
                {
                          
                _StartTime = value; 
               
           		}
    		}
     	}
    
     	private System.TimeSpan _StartTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=true, IsSerializable = true)]
        public System.TimeSpan EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private System.TimeSpan _EndTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeStationId",DTOPropertyName="SelfTakeStationId",IsRequired=true, IsSerializable = true)]
        public System.Guid SelfTakeStationId
        {
            get
            {
                return _SelfTakeStationId;
            }
            set
            {
    
                if (_SelfTakeStationId != value)
                {
                          
                _SelfTakeStationId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SelfTakeStationId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AppStsOfficeTimeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AppStsOfficeTimeDTO dto = srcDTO as AppStsOfficeTimeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.WeekDays = dto.WeekDays;
    								
    				 this.StartTime = dto.StartTime;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.SelfTakeStationId = dto.SelfTakeStationId;
    								
    				 this.SubId = dto.SubId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AppStsOfficeTimeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AppStsOfficeTimeDTO();
                base.ToBEData(ref todto);
    			AppStsOfficeTimeDTO dto = todto as AppStsOfficeTimeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.WeekDays = this.WeekDays;
    								
    				 dto.StartTime = this.StartTime;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.SelfTakeStationId = this.SelfTakeStationId;
    								
    				 dto.SubId = this.SubId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 属性
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Attribute",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AttributeDTO))]
    public partial class Attribute: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Attribute ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 是否删除：删除=TRUE,未删除=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AttributeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AttributeDTO dto = srcDTO as AttributeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AttributeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AttributeDTO();
                base.ToBEData(ref todto);
    			AttributeDTO dto = todto as AttributeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AuditCommodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AuditCommodityDTO))]
    public partial class AuditCommodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AuditCommodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Number",DTOPropertyName="No_Number",IsRequired=true, IsSerializable = true)]
        public int No_Number
        {
            get
            {
                return _No_Number;
            }
            set
            {
    
                if (_No_Number != value)
                {
                          
                _No_Number = value; 
               
           		}
    		}
     	}
    
     	private int _No_Number;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=true, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=true, IsSerializable = true)]
        public int TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private int _TotalCollection;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=true, IsSerializable = true)]
        public int TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private int _TotalReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=true, IsSerializable = true)]
        public int Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private int _Salesvolume;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroundTime",DTOPropertyName="GroundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> GroundTime
        {
            get
            {
                return _GroundTime;
            }
            set
            {
    
                if (_GroundTime != value)
                {
                          
                _GroundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _GroundTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=false, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=false, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SortValue",DTOPropertyName="SortValue",IsRequired=true, IsSerializable = true)]
        public int SortValue
        {
            get
            {
                return _SortValue;
            }
            set
            {
    
                if (_SortValue != value)
                {
                          
                _SortValue = value; 
               
           		}
    		}
     	}
    
     	private int _SortValue;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FreightTemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnableSelfTake",DTOPropertyName="IsEnableSelfTake",IsRequired=true, IsSerializable = true)]
        public int IsEnableSelfTake
        {
            get
            {
                return _IsEnableSelfTake;
            }
            set
            {
    
                if (_IsEnableSelfTake != value)
                {
                          
                _IsEnableSelfTake = value; 
               
           		}
    		}
     	}
    
     	private int _IsEnableSelfTake;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Weight",DTOPropertyName="Weight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
    
                if (_Weight != value)
                {
                          
                _Weight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Weight;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=true, IsSerializable = true)]
        public byte PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private byte _PricingMethod = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleAreas",DTOPropertyName="SaleAreas",IsRequired=false, IsSerializable = true)]
        public string SaleAreas
        {
            get
            {
                return _SaleAreas;
            }
            set
            {
    
                if (_SaleAreas != value)
                {
                          
                _SaleAreas = value; 
               
           		}
    		}
     	}
    
     	private string _SaleAreas;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SharePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityType",DTOPropertyName="CommodityType",IsRequired=true, IsSerializable = true)]
        public int CommodityType
        {
            get
            {
                return _CommodityType;
            }
            set
            {
    
                if (_CommodityType != value)
                {
                          
                _CommodityType = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityType = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HtmlVideoPath",DTOPropertyName="HtmlVideoPath",IsRequired=false, IsSerializable = true)]
        public string HtmlVideoPath
        {
            get
            {
                return _HtmlVideoPath;
            }
            set
            {
    
                if (_HtmlVideoPath != value)
                {
                          
                _HtmlVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _HtmlVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MobileVideoPath",DTOPropertyName="MobileVideoPath",IsRequired=false, IsSerializable = true)]
        public string MobileVideoPath
        {
            get
            {
                return _MobileVideoPath;
            }
            set
            {
    
                if (_MobileVideoPath != value)
                {
                          
                _MobileVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _MobileVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoPic",DTOPropertyName="VideoPic",IsRequired=false, IsSerializable = true)]
        public string VideoPic
        {
            get
            {
                return _VideoPic;
            }
            set
            {
    
                if (_VideoPic != value)
                {
                          
                _VideoPic = value; 
               
           		}
    		}
     	}
    
     	private string _VideoPic;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoName",DTOPropertyName="VideoName",IsRequired=false, IsSerializable = true)]
        public string VideoName
        {
            get
            {
                return _VideoName;
            }
            set
            {
    
                if (_VideoName != value)
                {
                          
                _VideoName = value; 
               
           		}
    		}
     	}
    
     	private string _VideoName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScorePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadPercent",DTOPropertyName="SpreadPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SpreadPercent
        {
            get
            {
                return _SpreadPercent;
            }
            set
            {
    
                if (_SpreadPercent != value)
                {
                          
                _SpreadPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SpreadPercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreScale",DTOPropertyName="ScoreScale",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScoreScale
        {
            get
            {
                return _ScoreScale;
            }
            set
            {
    
                if (_ScoreScale != value)
                {
                          
                _ScoreScale = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScoreScale;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxClassCode",DTOPropertyName="TaxClassCode",IsRequired=false, IsSerializable = true)]
        public string TaxClassCode
        {
            get
            {
                return _TaxClassCode;
            }
            set
            {
    
                if (_TaxClassCode != value)
                {
                          
                _TaxClassCode = value; 
               
           		}
    		}
     	}
    
     	private string _TaxClassCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAssurance",DTOPropertyName="IsAssurance",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsAssurance
        {
            get
            {
                return _IsAssurance;
            }
            set
            {
    
                if (_IsAssurance != value)
                {
                          
                _IsAssurance = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsAssurance;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TechSpecs",DTOPropertyName="TechSpecs",IsRequired=false, IsSerializable = true)]
        public string TechSpecs
        {
            get
            {
                return _TechSpecs;
            }
            set
            {
    
                if (_TechSpecs != value)
                {
                          
                _TechSpecs = value; 
               
           		}
    		}
     	}
    
     	private string _TechSpecs;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleService",DTOPropertyName="SaleService",IsRequired=false, IsSerializable = true)]
        public string SaleService
        {
            get
            {
                return _SaleService;
            }
            set
            {
    
                if (_SaleService != value)
                {
                          
                _SaleService = value; 
               
           		}
    		}
     	}
    
     	private string _SaleService;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsReturns",DTOPropertyName="IsReturns",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsReturns
        {
            get
            {
                return _IsReturns;
            }
            set
            {
    
                if (_IsReturns != value)
                {
                          
                _IsReturns = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsReturns;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ServiceSettingId",DTOPropertyName="ServiceSettingId",IsRequired=false, IsSerializable = true)]
        public string ServiceSettingId
        {
            get
            {
                return _ServiceSettingId;
            }
            set
            {
    
                if (_ServiceSettingId != value)
                {
                          
                _ServiceSettingId = value; 
               
           		}
    		}
     	}
    
     	private string _ServiceSettingId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifieId",DTOPropertyName="ModifieId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifieId
        {
            get
            {
                return _ModifieId;
            }
            set
            {
    
                if (_ModifieId != value)
                {
                          
                _ModifieId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifieId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FieldName",DTOPropertyName="FieldName",IsRequired=false, IsSerializable = true)]
        public string FieldName
        {
            get
            {
                return _FieldName;
            }
            set
            {
    
                if (_FieldName != value)
                {
                          
                _FieldName = value; 
               
           		}
    		}
     	}
    
     	private string _FieldName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RowNo",DTOPropertyName="RowNo",IsRequired=true, IsSerializable = true)]
        public int RowNo
        {
            get
            {
                return _RowNo;
            }
            set
            {
    
                if (_RowNo != value)
                {
                          
                _RowNo = value; 
               
           		}
    		}
     	}
    
     	private int _RowNo;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AuditCommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AuditCommodityDTO dto = srcDTO as AuditCommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.No_Number = dto.No_Number;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Description = dto.Description;
    								
    				 this.State = dto.State;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroundTime = dto.GroundTime;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SortValue = dto.SortValue;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.IsEnableSelfTake = dto.IsEnableSelfTake;
    								
    				 this.Weight = dto.Weight;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.SaleAreas = dto.SaleAreas;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.CommodityType = dto.CommodityType;
    								
    				 this.HtmlVideoPath = dto.HtmlVideoPath;
    								
    				 this.MobileVideoPath = dto.MobileVideoPath;
    								
    				 this.VideoPic = dto.VideoPic;
    								
    				 this.VideoName = dto.VideoName;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.SpreadPercent = dto.SpreadPercent;
    								
    				 this.ScoreScale = dto.ScoreScale;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.TaxClassCode = dto.TaxClassCode;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.IsAssurance = dto.IsAssurance;
    								
    				 this.TechSpecs = dto.TechSpecs;
    								
    				 this.SaleService = dto.SaleService;
    								
    				 this.IsReturns = dto.IsReturns;
    								
    				 this.ServiceSettingId = dto.ServiceSettingId;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.ModifieId = dto.ModifieId;
    								
    				 this.FieldName = dto.FieldName;
    								
    				 this.RowNo = dto.RowNo;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AuditCommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AuditCommodityDTO();
                base.ToBEData(ref todto);
    			AuditCommodityDTO dto = todto as AuditCommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.No_Number = this.No_Number;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Description = this.Description;
    								
    				 dto.State = this.State;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroundTime = this.GroundTime;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SortValue = this.SortValue;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.IsEnableSelfTake = this.IsEnableSelfTake;
    								
    				 dto.Weight = this.Weight;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.SaleAreas = this.SaleAreas;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.CommodityType = this.CommodityType;
    								
    				 dto.HtmlVideoPath = this.HtmlVideoPath;
    								
    				 dto.MobileVideoPath = this.MobileVideoPath;
    								
    				 dto.VideoPic = this.VideoPic;
    								
    				 dto.VideoName = this.VideoName;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.SpreadPercent = this.SpreadPercent;
    								
    				 dto.ScoreScale = this.ScoreScale;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.TaxClassCode = this.TaxClassCode;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.IsAssurance = this.IsAssurance;
    								
    				 dto.TechSpecs = this.TechSpecs;
    								
    				 dto.SaleService = this.SaleService;
    								
    				 dto.IsReturns = this.IsReturns;
    								
    				 dto.ServiceSettingId = this.ServiceSettingId;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.ModifieId = this.ModifieId;
    								
    				 dto.FieldName = this.FieldName;
    								
    				 dto.RowNo = this.RowNo;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AuditCommodityStock",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AuditCommodityStockDTO))]
    public partial class AuditCommodityStock: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AuditCommodityStock ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityStockId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditId",DTOPropertyName="AuditId",IsRequired=true, IsSerializable = true)]
        public System.Guid AuditId
        {
            get
            {
                return _AuditId;
            }
            set
            {
    
                if (_AuditId != value)
                {
                          
                _AuditId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AuditId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=true, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=false, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ThumImg",DTOPropertyName="ThumImg",IsRequired=false, IsSerializable = true)]
        public string ThumImg
        {
            get
            {
                return _ThumImg;
            }
            set
            {
    
                if (_ThumImg != value)
                {
                          
                _ThumImg = value; 
               
           		}
    		}
     	}
    
     	private string _ThumImg;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CarouselImgs",DTOPropertyName="CarouselImgs",IsRequired=false, IsSerializable = true)]
        public string CarouselImgs
        {
            get
            {
                return _CarouselImgs;
            }
            set
            {
    
                if (_CarouselImgs != value)
                {
                          
                _CarouselImgs = value; 
               
           		}
    		}
     	}
    
     	private string _CarouselImgs;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AuditCommodityStockDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AuditCommodityStockDTO dto = srcDTO as AuditCommodityStockDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.AuditId = dto.AuditId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.ThumImg = dto.ThumImg;
    								
    				 this.CarouselImgs = dto.CarouselImgs;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AuditCommodityStockDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AuditCommodityStockDTO();
                base.ToBEData(ref todto);
    			AuditCommodityStockDTO dto = todto as AuditCommodityStockDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.AuditId = this.AuditId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.ThumImg = this.ThumImg;
    								
    				 dto.CarouselImgs = this.CarouselImgs;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AuditManage",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AuditManageDTO))]
    public partial class AuditManage: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AuditManage ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 审核状态（1-通过 2-拒绝）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Status",DTOPropertyName="Status",IsRequired=true, IsSerializable = true)]
        public int Status
        {
            get
            {
                return _Status;
            }
            set
            {
    
                if (_Status != value)
                {
                          
                _Status = value; 
               
           		}
    		}
     	}
    
     	private int _Status;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyUserId",DTOPropertyName="ApplyUserId",IsRequired=true, IsSerializable = true)]
        public System.Guid ApplyUserId
        {
            get
            {
                return _ApplyUserId;
            }
            set
            {
    
                if (_ApplyUserId != value)
                {
                          
                _ApplyUserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ApplyUserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditUserId",DTOPropertyName="AuditUserId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AuditUserId
        {
            get
            {
                return _AuditUserId;
            }
            set
            {
    
                if (_AuditUserId != value)
                {
                          
                _AuditUserId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AuditUserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyTime",DTOPropertyName="ApplyTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ApplyTime
        {
            get
            {
                return _ApplyTime;
            }
            set
            {
    
                if (_ApplyTime != value)
                {
                          
                _ApplyTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ApplyTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditTime",DTOPropertyName="AuditTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> AuditTime
        {
            get
            {
                return _AuditTime;
            }
            set
            {
    
                if (_AuditTime != value)
                {
                          
                _AuditTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _AuditTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditRemark",DTOPropertyName="AuditRemark",IsRequired=false, IsSerializable = true)]
        public string AuditRemark
        {
            get
            {
                return _AuditRemark;
            }
            set
            {
    
                if (_AuditRemark != value)
                {
                          
                _AuditRemark = value; 
               
           		}
    		}
     	}
    
     	private string _AuditRemark;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Action",DTOPropertyName="Action",IsRequired=true, IsSerializable = true)]
        public int Action
        {
            get
            {
                return _Action;
            }
            set
            {
    
                if (_Action != value)
                {
                          
                _Action = value; 
               
           		}
    		}
     	}
    
     	private int _Action;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AuditManageDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AuditManageDTO dto = srcDTO as AuditManageDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Status = dto.Status;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.ApplyUserId = dto.ApplyUserId;
    								
    				 this.AuditUserId = dto.AuditUserId;
    								
    				 this.ApplyTime = dto.ApplyTime;
    								
    				 this.AuditTime = dto.AuditTime;
    								
    				 this.AuditRemark = dto.AuditRemark;
    								
    				 this.Action = dto.Action;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AuditManageDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AuditManageDTO();
                base.ToBEData(ref todto);
    			AuditManageDTO dto = todto as AuditManageDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Status = this.Status;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.ApplyUserId = this.ApplyUserId;
    								
    				 dto.AuditUserId = this.AuditUserId;
    								
    				 dto.ApplyTime = this.ApplyTime;
    								
    				 dto.AuditTime = this.AuditTime;
    								
    				 dto.AuditRemark = this.AuditRemark;
    								
    				 dto.Action = this.Action;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.AuditMode",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.AuditModeDTO))]
    public partial class AuditMode: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  AuditMode ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 审核模式（0-自动 1-手动）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModeStatus",DTOPropertyName="ModeStatus",IsRequired=true, IsSerializable = true)]
        public int ModeStatus
        {
            get
            {
                return _ModeStatus;
            }
            set
            {
    
                if (_ModeStatus != value)
                {
                          
                _ModeStatus = value; 
               
           		}
    		}
     	}
    
     	private int _ModeStatus;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifiedId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,AuditModeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                AuditModeDTO dto = srcDTO as AuditModeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ModeStatus = dto.ModeStatus;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，AuditModeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new AuditModeDTO();
                base.ToBEData(ref todto);
    			AuditModeDTO dto = todto as AuditModeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ModeStatus = this.ModeStatus;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedId = (Guid)this.ModifiedId  ;

                     dto.ModifiedOn = (DateTime)this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.BaseCommission",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.BaseCommissionDTO))]
    public partial class BaseCommission: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  BaseCommission ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 商户申请id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MallApplyId",DTOPropertyName="MallApplyId",IsRequired=true, IsSerializable = true)]
        public System.Guid MallApplyId
        {
            get
            {
                return _MallApplyId;
            }
            set
            {
    
                if (_MallApplyId != value)
                {
                          
                _MallApplyId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _MallApplyId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 生效时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EffectiveTime",DTOPropertyName="EffectiveTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EffectiveTime
        {
            get
            {
                return _EffectiveTime;
            }
            set
            {
    
                if (_EffectiveTime != value)
                {
                          
                _EffectiveTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EffectiveTime;
        
    
        /// <summary>
        /// 基础佣金比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Commission",DTOPropertyName="Commission",IsRequired=true, IsSerializable = true)]
        public decimal Commission
        {
            get
            {
                return _Commission;
            }
            set
            {
    
                if (_Commission != value)
                {
                          
                _Commission = value; 
               
           		}
    		}
     	}
    
     	private decimal _Commission;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 商户名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,BaseCommissionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                BaseCommissionDTO dto = srcDTO as BaseCommissionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.MallApplyId = dto.MallApplyId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.EffectiveTime = dto.EffectiveTime;
    								
    				 this.Commission = dto.Commission;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppName = dto.AppName;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，BaseCommissionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new BaseCommissionDTO();
                base.ToBEData(ref todto);
    			BaseCommissionDTO dto = todto as BaseCommissionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.MallApplyId = this.MallApplyId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.EffectiveTime = this.EffectiveTime;
    								
    				 dto.Commission = this.Commission;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppName = this.AppName;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 用户行为记录
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.BehaviorRecord",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.BehaviorRecordDTO))]
    public partial class BehaviorRecord: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  BehaviorRecord ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 用户Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 接口方法名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Method",DTOPropertyName="Method",IsRequired=true, IsSerializable = true)]
        public string Method
        {
            get
            {
                return _Method;
            }
            set
            {
    
                if (_Method != value)
                {
                          
                _Method = value; 
               
           		}
    		}
     	}
    
     	private string _Method;
        
    
        /// <summary>
        /// 参数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Params",DTOPropertyName="Params",IsRequired=true, IsSerializable = true)]
        public string Params
        {
            get
            {
                return _Params;
            }
            set
            {
    
                if (_Params != value)
                {
                          
                _Params = value; 
               
           		}
    		}
     	}
    
     	private string _Params;
        
    
        /// <summary>
        /// 行为类型  1：浏览商品，2：收藏商品，3：删除收藏，4：添加购物车，5：删除购物车商品，6：确认支付
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BehaviorType",DTOPropertyName="BehaviorType",IsRequired=true, IsSerializable = true)]
        public int BehaviorType
        {
            get
            {
                return _BehaviorType;
            }
            set
            {
    
                if (_BehaviorType != value)
                {
                          
                _BehaviorType = value; 
               
           		}
    		}
     	}
    
     	private int _BehaviorType;
        
    
        /// <summary>
        /// 行为关键字，与行为类型对应 1：浏览商品：商品Id，2：收藏商品：商品Id，3：删除收藏：商品Id，4：添加购物车：商品Id，5：删除购物车商品：商品Id，6：确认支付：订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BehaviorKey",DTOPropertyName="BehaviorKey",IsRequired=true, IsSerializable = true)]
        public string BehaviorKey
        {
            get
            {
                return _BehaviorKey;
            }
            set
            {
    
                if (_BehaviorKey != value)
                {
                          
                _BehaviorKey = value; 
               
           		}
    		}
     	}
    
     	private string _BehaviorKey;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,BehaviorRecordDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                BehaviorRecordDTO dto = srcDTO as BehaviorRecordDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.Method = dto.Method;
    								
    				 this.Params = dto.Params;
    								
    				 this.BehaviorType = dto.BehaviorType;
    								
    				 this.BehaviorKey = dto.BehaviorKey;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，BehaviorRecordDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new BehaviorRecordDTO();
                base.ToBEData(ref todto);
    			BehaviorRecordDTO dto = todto as BehaviorRecordDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.Method = this.Method;
    								
    				 dto.Params = this.Params;
    								
    				 dto.BehaviorType = this.BehaviorType;
    								
    				 dto.BehaviorKey = this.BehaviorKey;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Brandwall",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.BrandwallDTO))]
    public partial class Brandwall: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Brandwall ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Brandname",DTOPropertyName="Brandname",IsRequired=true, IsSerializable = true)]
        public string Brandname
        {
            get
            {
                return _Brandname;
            }
            set
            {
    
                if (_Brandname != value)
                {
                          
                _Brandname = value; 
               
           		}
    		}
     	}
    
     	private string _Brandname;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Brandstatu",DTOPropertyName="Brandstatu",IsRequired=true, IsSerializable = true)]
        public int Brandstatu
        {
            get
            {
                return _Brandstatu;
            }
            set
            {
    
                if (_Brandstatu != value)
                {
                          
                _Brandstatu = value; 
               
           		}
    		}
     	}
    
     	private int _Brandstatu;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BrandLogo",DTOPropertyName="BrandLogo",IsRequired=true, IsSerializable = true)]
        public string BrandLogo
        {
            get
            {
                return _BrandLogo;
            }
            set
            {
    
                if (_BrandLogo != value)
                {
                          
                _BrandLogo = value; 
               
           		}
    		}
     	}
    
     	private string _BrandLogo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,BrandwallDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                BrandwallDTO dto = srcDTO as BrandwallDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Brandname = dto.Brandname;
    								
    				 this.Brandstatu = dto.Brandstatu;
    								
    				 this.BrandLogo = dto.BrandLogo;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，BrandwallDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new BrandwallDTO();
                base.ToBEData(ref todto);
    			BrandwallDTO dto = todto as BrandwallDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Brandname = this.Brandname;
    								
    				 dto.Brandstatu = this.Brandstatu;
    								
    				 dto.BrandLogo = this.BrandLogo;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 分类
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Category",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CategoryDTO))]
    public partial class Category: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Category ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 父级ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentId",DTOPropertyName="ParentId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
    
                if (_ParentId != value)
                {
                          
                _ParentId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ParentId;
        
    
        /// <summary>
        /// 层级：顶级=0，二级=1，三级=2
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentLevel",DTOPropertyName="CurrentLevel",IsRequired=true, IsSerializable = true)]
        public int CurrentLevel
        {
            get
            {
                return _CurrentLevel;
            }
            set
            {
    
                if (_CurrentLevel != value)
                {
                          
                _CurrentLevel = value; 
               
           		}
    		}
     	}
    
     	private int _CurrentLevel;
        
    
        /// <summary>
        /// AppID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 排序：数字大小代表排序
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Sort",DTOPropertyName="Sort",IsRequired=true, IsSerializable = true)]
        public int Sort
        {
            get
            {
                return _Sort;
            }
            set
            {
    
                if (_Sort != value)
                {
                          
                _Sort = value; 
               
           		}
    		}
     	}
    
     	private int _Sort;
        
    
        /// <summary>
        /// 是否删除：删除=TRUE,未删除=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="icon",DTOPropertyName="icon",IsRequired=false, IsSerializable = true)]
        public string icon
        {
            get
            {
                return _icon;
            }
            set
            {
    
                if (_icon != value)
                {
                          
                _icon = value; 
               
           		}
    		}
     	}
    
     	private string _icon;
        
    
        /// <summary>
        /// 是否启用
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsUse",DTOPropertyName="IsUse",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsUse
        {
            get
            {
                return _IsUse;
            }
            set
            {
    
                if (_IsUse != value)
                {
                          
                _IsUse = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsUse;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentCategoryPath",DTOPropertyName="ParentCategoryPath",IsRequired=false, IsSerializable = true)]
        public string ParentCategoryPath
        {
            get
            {
                return _ParentCategoryPath;
            }
            set
            {
    
                if (_ParentCategoryPath != value)
                {
                          
                _ParentCategoryPath = value; 
               
           		}
    		}
     	}
    
     	private string _ParentCategoryPath;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CategoryDTO dto = srcDTO as CategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ParentId = dto.ParentId;
    								
    				 this.CurrentLevel = dto.CurrentLevel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Sort = dto.Sort;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.icon = dto.icon;
    								
    				 this.IsUse = dto.IsUse;
    								
    				 this.ParentCategoryPath = dto.ParentCategoryPath;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CategoryDTO();
                base.ToBEData(ref todto);
    			CategoryDTO dto = todto as CategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ParentId = this.ParentId;
    								
    				 dto.CurrentLevel = this.CurrentLevel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Sort = this.Sort;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.icon = this.icon;
    								
    				 dto.IsUse = this.IsUse;
    								
    				 dto.ParentCategoryPath = this.ParentCategoryPath;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 品类广告
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CategoryAdvertise",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CategoryAdvertiseDTO))]
    public partial class CategoryAdvertise: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CategoryAdvertise ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 广告名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AdvertiseName",DTOPropertyName="AdvertiseName",IsRequired=true, IsSerializable = true)]
        public string AdvertiseName
        {
            get
            {
                return _AdvertiseName;
            }
            set
            {
    
                if (_AdvertiseName != value)
                {
                          
                _AdvertiseName = value; 
               
           		}
    		}
     	}
    
     	private string _AdvertiseName;
        
    
        /// <summary>
        /// 投放开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PutTime",DTOPropertyName="PutTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime PutTime
        {
            get
            {
                return _PutTime;
            }
            set
            {
    
                if (_PutTime != value)
                {
                          
                _PutTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _PutTime;
        
    
        /// <summary>
        /// 投放结束时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PushTime",DTOPropertyName="PushTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime PushTime
        {
            get
            {
                return _PushTime;
            }
            set
            {
    
                if (_PushTime != value)
                {
                          
                _PushTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _PushTime;
        
    
        /// <summary>
        /// 投放分类ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryId",DTOPropertyName="CategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
    
                if (_CategoryId != value)
                {
                          
                _CategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CategoryId;
        
    
        /// <summary>
        /// 投放状态
        /// </summary>
        /// <LongDescription>
        /// (0未开始，1投放中，2已结束)
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 推广链接类型
        /// </summary>
        /// <LongDescription>
        /// (1专题活动，2会员服务，3商品，4 自定义链接)
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="spreadEnum",DTOPropertyName="spreadEnum",IsRequired=true, IsSerializable = true)]
        public int spreadEnum
        {
            get
            {
                return _spreadEnum;
            }
            set
            {
    
                if (_spreadEnum != value)
                {
                          
                _spreadEnum = value; 
               
           		}
    		}
     	}
    
     	private int _spreadEnum;
        
    
        /// <summary>
        /// 自定义URL
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreeUrl",DTOPropertyName="FreeUrl",IsRequired=true, IsSerializable = true)]
        public string FreeUrl
        {
            get
            {
                return _FreeUrl;
            }
            set
            {
    
                if (_FreeUrl != value)
                {
                          
                _FreeUrl = value; 
               
           		}
    		}
     	}
    
     	private string _FreeUrl;
        
    
        /// <summary>
        /// 广告图片地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AdvertiseImg",DTOPropertyName="AdvertiseImg",IsRequired=true, IsSerializable = true)]
        public string AdvertiseImg
        {
            get
            {
                return _AdvertiseImg;
            }
            set
            {
    
                if (_AdvertiseImg != value)
                {
                          
                _AdvertiseImg = value; 
               
           		}
    		}
     	}
    
     	private string _AdvertiseImg;
        
    
        /// <summary>
        /// 广告视频地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AdvertiseMedia",DTOPropertyName="AdvertiseMedia",IsRequired=true, IsSerializable = true)]
        public string AdvertiseMedia
        {
            get
            {
                return _AdvertiseMedia;
            }
            set
            {
    
                if (_AdvertiseMedia != value)
                {
                          
                _AdvertiseMedia = value; 
               
           		}
    		}
     	}
    
     	private string _AdvertiseMedia;
        
    
        /// <summary>
        /// 广告类型
        /// </summary>
        /// <LongDescription>
        /// 0图片1视频
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="AdvertiseType",DTOPropertyName="AdvertiseType",IsRequired=true, IsSerializable = true)]
        public int AdvertiseType
        {
            get
            {
                return _AdvertiseType;
            }
            set
            {
    
                if (_AdvertiseType != value)
                {
                          
                _AdvertiseType = value; 
               
           		}
    		}
     	}
    
     	private int _AdvertiseType;
        
    
        /// <summary>
        /// 广告涉及到ID(只对专题、产品)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AdverID",DTOPropertyName="AdverID",IsRequired=true, IsSerializable = true)]
        public System.Guid AdverID
        {
            get
            {
                return _AdverID;
            }
            set
            {
    
                if (_AdverID != value)
                {
                          
                _AdverID = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AdverID;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=true, IsSerializable = true)]
        public System.Guid ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ModifiedId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserService",DTOPropertyName="UserService",IsRequired=true, IsSerializable = true)]
        public string UserService
        {
            get
            {
                return _UserService;
            }
            set
            {
    
                if (_UserService != value)
                {
                          
                _UserService = value; 
               
           		}
    		}
     	}
    
     	private string _UserService;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CategoryAdvertiseDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CategoryAdvertiseDTO dto = srcDTO as CategoryAdvertiseDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AdvertiseName = dto.AdvertiseName;
    								
    				 this.PutTime = dto.PutTime;
    								
    				 this.PushTime = dto.PushTime;
    								
    				 this.CategoryId = dto.CategoryId;
    								
    				 this.State = dto.State;
    								
    				 this.spreadEnum = dto.spreadEnum;
    								
    				 this.FreeUrl = dto.FreeUrl;
    								
    				 this.AdvertiseImg = dto.AdvertiseImg;
    								
    				 this.AdvertiseMedia = dto.AdvertiseMedia;
    								
    				 this.AdvertiseType = dto.AdvertiseType;
    								
    				 this.AdverID = dto.AdverID;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.UserService = dto.UserService;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CategoryAdvertiseDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CategoryAdvertiseDTO();
                base.ToBEData(ref todto);
    			CategoryAdvertiseDTO dto = todto as CategoryAdvertiseDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AdvertiseName = this.AdvertiseName;
    								
    				 dto.PutTime = this.PutTime;
    								
    				 dto.PushTime = this.PushTime;
    								
    				 dto.CategoryId = this.CategoryId;
    								
    				 dto.State = this.State;
    								
    				 dto.spreadEnum = this.spreadEnum;
    								
    				 dto.FreeUrl = this.FreeUrl;
    								
    				 dto.AdvertiseImg = this.AdvertiseImg;
    								
    				 dto.AdvertiseMedia = this.AdvertiseMedia;
    								
    				 dto.AdvertiseType = this.AdvertiseType;
    								
    				 dto.AdverID = this.AdverID;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ModifiedId = this.ModifiedId;
    								
    				 dto.UserService = this.UserService;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CategoryCommission",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CategoryCommissionDTO))]
    public partial class CategoryCommission: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CategoryCommission ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MallApplyId",DTOPropertyName="MallApplyId",IsRequired=true, IsSerializable = true)]
        public System.Guid MallApplyId
        {
            get
            {
                return _MallApplyId;
            }
            set
            {
    
                if (_MallApplyId != value)
                {
                          
                _MallApplyId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _MallApplyId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EffectiveTime",DTOPropertyName="EffectiveTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EffectiveTime
        {
            get
            {
                return _EffectiveTime;
            }
            set
            {
    
                if (_EffectiveTime != value)
                {
                          
                _EffectiveTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EffectiveTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Commission",DTOPropertyName="Commission",IsRequired=true, IsSerializable = true)]
        public decimal Commission
        {
            get
            {
                return _Commission;
            }
            set
            {
    
                if (_Commission != value)
                {
                          
                _Commission = value; 
               
           		}
    		}
     	}
    
     	private decimal _Commission;
        
    
        /// <summary>
        /// 分类Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryId",DTOPropertyName="CategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
    
                if (_CategoryId != value)
                {
                          
                _CategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CategoryId;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CategoryCommissionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CategoryCommissionDTO dto = srcDTO as CategoryCommissionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.MallApplyId = dto.MallApplyId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.EffectiveTime = dto.EffectiveTime;
    								
    				 this.Commission = dto.Commission;
    								
    				 this.CategoryId = dto.CategoryId;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CategoryCommissionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CategoryCommissionDTO();
                base.ToBEData(ref todto);
    			CategoryCommissionDTO dto = todto as CategoryCommissionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.MallApplyId = this.MallApplyId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.EffectiveTime = this.EffectiveTime;
    								
    				 dto.Commission = this.Commission;
    								
    				 dto.CategoryId = this.CategoryId;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CategoryInnerBrand",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CategoryInnerBrandDTO))]
    public partial class CategoryInnerBrand: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CategoryInnerBrand ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Brandname",DTOPropertyName="Brandname",IsRequired=true, IsSerializable = true)]
        public string Brandname
        {
            get
            {
                return _Brandname;
            }
            set
            {
    
                if (_Brandname != value)
                {
                          
                _Brandname = value; 
               
           		}
    		}
     	}
    
     	private string _Brandname;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BrandId",DTOPropertyName="BrandId",IsRequired=true, IsSerializable = true)]
        public System.Guid BrandId
        {
            get
            {
                return _BrandId;
            }
            set
            {
    
                if (_BrandId != value)
                {
                          
                _BrandId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _BrandId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryId",DTOPropertyName="CategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
    
                if (_CategoryId != value)
                {
                          
                _CategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CategoryId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=true, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CategoryInnerBrandDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CategoryInnerBrandDTO dto = srcDTO as CategoryInnerBrandDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Brandname = dto.Brandname;
    								
    				 this.BrandId = dto.BrandId;
    								
    				 this.CategoryId = dto.CategoryId;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CategoryInnerBrandDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CategoryInnerBrandDTO();
                base.ToBEData(ref todto);
    			CategoryInnerBrandDTO dto = todto as CategoryInnerBrandDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Brandname = this.Brandname;
    								
    				 dto.BrandId = this.BrandId;
    								
    				 dto.CategoryId = this.CategoryId;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CateringBusinessHours",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CateringBusinessHoursDTO))]
    public partial class CateringBusinessHours: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CateringBusinessHours ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OpeningTime",DTOPropertyName="OpeningTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime OpeningTime
        {
            get
            {
                return _OpeningTime;
            }
            set
            {
    
                if (_OpeningTime != value)
                {
                          
                _OpeningTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _OpeningTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ClosingTime",DTOPropertyName="ClosingTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ClosingTime
        {
            get
            {
                return _ClosingTime;
            }
            set
            {
    
                if (_ClosingTime != value)
                {
                          
                _ClosingTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ClosingTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsValid",DTOPropertyName="IsValid",IsRequired=true, IsSerializable = true)]
        public bool IsValid
        {
            get
            {
                return _IsValid;
            }
            set
            {
    
                if (_IsValid != value)
                {
                          
                _IsValid = value; 
               
           		}
    		}
     	}
    
     	private bool _IsValid;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CateringSettingId",DTOPropertyName="CateringSettingId",IsRequired=true, IsSerializable = true)]
        public System.Guid CateringSettingId
        {
            get
            {
                return _CateringSettingId;
            }
            set
            {
    
                if (_CateringSettingId != value)
                {
                          
                _CateringSettingId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CateringSettingId;
        

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>   
    	[ModelProperty(DisplayNameResKey="CateringSetting",DTOPropertyName="CateringSetting",IsRequired= false, IsSerializable = true)]
        public CateringSetting CateringSetting
        {
            get
            {
                return _CateringSetting;
            }
            set
            {
               _CateringSetting = value;
            }
        }
    
    	private CateringSetting  _CateringSetting = null;
    
        

        #endregion
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CateringBusinessHoursDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CateringBusinessHoursDTO dto = srcDTO as CateringBusinessHoursDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OpeningTime = dto.OpeningTime;
    								
    				 this.ClosingTime = dto.ClosingTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.IsValid = dto.IsValid;
    								
    				 this.CateringSettingId = dto.CateringSettingId;
    			                            if (dto.CateringSetting != null)
    				            {
    				                CateringSetting navModel = null;
    
    				                object objnavModel = System.Runtime.Remoting.Messaging.CallContext.GetData(dto.CateringSetting.Id.ToString() + dto.CateringSetting.GetType().FullName);
    				                if ( (objnavModel as CateringSetting) != null)
    				                {
    				                    navModel = objnavModel as CateringSetting;
    				                }
    				                else
    				                {
    				                    navModel = new CateringSetting();
    				                    navModel.FromBEDataToModel(dto.CateringSetting);                    
    				                }
    				                this.CateringSetting = navModel;
    				            }
    
    						         }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CateringBusinessHoursDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CateringBusinessHoursDTO();
                base.ToBEData(ref todto);
    			CateringBusinessHoursDTO dto = todto as CateringBusinessHoursDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OpeningTime = this.OpeningTime;
    								
    				 dto.ClosingTime = this.ClosingTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.IsValid = this.IsValid;
    								
    				 dto.CateringSettingId = this.CateringSettingId;
    			                            if (this.CateringSetting != null)
    				            {
    				                CateringSettingDTO navDTO = null;
    
    				                Object objnavDTO = System.Runtime.Remoting.Messaging.CallContext.GetData(this.CateringSetting.Id.ToString() + this.CateringSetting.GetType().FullName);
    				                if ((objnavDTO as CateringSettingDTO) != null)
    				                    navDTO = objnavDTO as CateringSettingDTO;
    				                else
    				                {
    				                    navDTO = this.CateringSetting.FromModelToBEData() as CateringSettingDTO;                    
    				                }
    
    				                dto.CateringSetting = navDTO;
    							}
    
    						         }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CateringComdtyXData",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CateringComdtyXDataDTO))]
    public partial class CateringComdtyXData: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CateringComdtyXData ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 单位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=true, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 餐盒价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MealBoxAmount",DTOPropertyName="MealBoxAmount",IsRequired=true, IsSerializable = true)]
        public decimal MealBoxAmount
        {
            get
            {
                return _MealBoxAmount;
            }
            set
            {
    
                if (_MealBoxAmount != value)
                {
                          
                _MealBoxAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _MealBoxAmount;
        
    
        /// <summary>
        /// 餐盒数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MealBoxNum",DTOPropertyName="MealBoxNum",IsRequired=true, IsSerializable = true)]
        public int MealBoxNum
        {
            get
            {
                return _MealBoxNum;
            }
            set
            {
    
                if (_MealBoxNum != value)
                {
                          
                _MealBoxNum = value; 
               
           		}
    		}
     	}
    
     	private int _MealBoxNum;
        
    
        /// <summary>
        /// 最小购买数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MinPurchaseQuantity",DTOPropertyName="MinPurchaseQuantity",IsRequired=true, IsSerializable = true)]
        public int MinPurchaseQuantity
        {
            get
            {
                return _MinPurchaseQuantity;
            }
            set
            {
    
                if (_MinPurchaseQuantity != value)
                {
                          
                _MinPurchaseQuantity = value; 
               
           		}
    		}
     	}
    
     	private int _MinPurchaseQuantity;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComdtyId",DTOPropertyName="ComdtyId",IsRequired=true, IsSerializable = true)]
        public System.Guid ComdtyId
        {
            get
            {
                return _ComdtyId;
            }
            set
            {
    
                if (_ComdtyId != value)
                {
                          
                _ComdtyId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ComdtyId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsValid",DTOPropertyName="IsValid",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsValid
        {
            get
            {
                return _IsValid;
            }
            set
            {
    
                if (_IsValid != value)
                {
                          
                _IsValid = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsValid = true;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CateringComdtyXDataDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CateringComdtyXDataDTO dto = srcDTO as CateringComdtyXDataDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Unit = dto.Unit;
    								
    				 this.MealBoxAmount = dto.MealBoxAmount;
    								
    				 this.MealBoxNum = dto.MealBoxNum;
    								
    				 this.MinPurchaseQuantity = dto.MinPurchaseQuantity;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ComdtyId = dto.ComdtyId;
    								
    				 this.IsValid = dto.IsValid;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CateringComdtyXDataDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CateringComdtyXDataDTO();
                base.ToBEData(ref todto);
    			CateringComdtyXDataDTO dto = todto as CateringComdtyXDataDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.MealBoxAmount = this.MealBoxAmount;
    								
    				 dto.MealBoxNum = this.MealBoxNum;
    								
    				 dto.MinPurchaseQuantity = this.MinPurchaseQuantity;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ComdtyId = this.ComdtyId;
    								
    				 dto.IsValid = this.IsValid;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CateringSetting",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CateringSettingDTO))]
    public partial class CateringSetting: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CateringSetting ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 单位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=true, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 规格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Specification",DTOPropertyName="Specification",IsRequired=true, IsSerializable = true)]
        public string Specification
        {
            get
            {
                return _Specification;
            }
            set
            {
    
                if (_Specification != value)
                {
                          
                _Specification = value; 
               
           		}
    		}
     	}
    
     	private string _Specification;
        
    
        /// <summary>
        /// 起送金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryAmount",DTOPropertyName="DeliveryAmount",IsRequired=true, IsSerializable = true)]
        public decimal DeliveryAmount
        {
            get
            {
                return _DeliveryAmount;
            }
            set
            {
    
                if (_DeliveryAmount != value)
                {
                          
                _DeliveryAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _DeliveryAmount;
        
    
        /// <summary>
        /// 配送范围
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryRange",DTOPropertyName="DeliveryRange",IsRequired=true, IsSerializable = true)]
        public double DeliveryRange
        {
            get
            {
                return _DeliveryRange;
            }
            set
            {
    
                if (_DeliveryRange != value)
                {
                          
                _DeliveryRange = value; 
               
           		}
    		}
     	}
    
     	private double _DeliveryRange;
        
    
        /// <summary>
        /// 配送费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryFee",DTOPropertyName="DeliveryFee",IsRequired=true, IsSerializable = true)]
        public decimal DeliveryFee
        {
            get
            {
                return _DeliveryFee;
            }
            set
            {
    
                if (_DeliveryFee != value)
                {
                          
                _DeliveryFee = value; 
               
           		}
    		}
     	}
    
     	private decimal _DeliveryFee;
        
    
        /// <summary>
        /// 最多可使用优惠券
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MostCoupon",DTOPropertyName="MostCoupon",IsRequired=true, IsSerializable = true)]
        public decimal MostCoupon
        {
            get
            {
                return _MostCoupon;
            }
            set
            {
    
                if (_MostCoupon != value)
                {
                          
                _MostCoupon = value; 
               
           		}
    		}
     	}
    
     	private decimal _MostCoupon;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StoreId",DTOPropertyName="StoreId",IsRequired=true, IsSerializable = true)]
        public System.Guid StoreId
        {
            get
            {
                return _StoreId;
            }
            set
            {
    
                if (_StoreId != value)
                {
                          
                _StoreId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _StoreId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreeAmount",DTOPropertyName="FreeAmount",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> FreeAmount
        {
            get
            {
                return _FreeAmount;
            }
            set
            {
    
                if (_FreeAmount != value)
                {
                          
                _FreeAmount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _FreeAmount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryFeeStartT",DTOPropertyName="DeliveryFeeStartT",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> DeliveryFeeStartT
        {
            get
            {
                return _DeliveryFeeStartT;
            }
            set
            {
    
                if (_DeliveryFeeStartT != value)
                {
                          
                _DeliveryFeeStartT = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _DeliveryFeeStartT;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryFeeEndT",DTOPropertyName="DeliveryFeeEndT",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> DeliveryFeeEndT
        {
            get
            {
                return _DeliveryFeeEndT;
            }
            set
            {
    
                if (_DeliveryFeeEndT != value)
                {
                          
                _DeliveryFeeEndT = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _DeliveryFeeEndT;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryFeeDiscount",DTOPropertyName="DeliveryFeeDiscount",IsRequired=false, IsSerializable = true)]
        public Nullable<double> DeliveryFeeDiscount
        {
            get
            {
                return _DeliveryFeeDiscount;
            }
            set
            {
    
                if (_DeliveryFeeDiscount != value)
                {
                          
                _DeliveryFeeDiscount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<double> _DeliveryFeeDiscount;
        

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>   
    	[ModelProperty(DisplayNameResKey="CateringBusinessHours",DTOPropertyName="CateringBusinessHours",IsRequired= false, IsSerializable = true)]
         
        public List<CateringBusinessHours> CateringBusinessHours
        {
            get
            {
    		    if ( _CateringBusinessHours == null)
    			 {
    			    _CateringBusinessHours = new List<CateringBusinessHours>();
    			 }
                return _CateringBusinessHours;
            }
            set
            {
                if ((value != null))
                {
                   _CateringBusinessHours = value;
                }
            }
        }
    
    	private List<CateringBusinessHours>  _CateringBusinessHours = null;
    
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>   
    	[ModelProperty(DisplayNameResKey="CateringShiftTime",DTOPropertyName="CateringShiftTime",IsRequired= false, IsSerializable = true)]
         
        public List<CateringShiftTime> CateringShiftTime
        {
            get
            {
    		    if ( _CateringShiftTime == null)
    			 {
    			    _CateringShiftTime = new List<CateringShiftTime>();
    			 }
                return _CateringShiftTime;
            }
            set
            {
                if ((value != null))
                {
                   _CateringShiftTime = value;
                }
            }
        }
    
    	private List<CateringShiftTime>  _CateringShiftTime = null;
    

        #endregion
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CateringSettingDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CateringSettingDTO dto = srcDTO as CateringSettingDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Unit = dto.Unit;
    								
    				 this.Specification = dto.Specification;
    								
    				 this.DeliveryAmount = dto.DeliveryAmount;
    								
    				 this.DeliveryRange = dto.DeliveryRange;
    								
    				 this.DeliveryFee = dto.DeliveryFee;
    								
    				 this.MostCoupon = dto.MostCoupon;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.StoreId = dto.StoreId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.FreeAmount = dto.FreeAmount;
    								
    				 this.DeliveryFeeStartT = dto.DeliveryFeeStartT;
    								
    				 this.DeliveryFeeEndT = dto.DeliveryFeeEndT;
    								
    				 this.DeliveryFeeDiscount = dto.DeliveryFeeDiscount;
    			 
    						  if (dto.CateringBusinessHours != null)
    						  {
    						  	this.CateringBusinessHours = new List<CateringBusinessHours>();
    							foreach (CateringBusinessHoursDTO navDTO in dto.CateringBusinessHours)
    			                {
    			                    if (navDTO != null)
    			                    {
    			                        CateringBusinessHours navModel = null;
    
    			                        object objnavModel = System.Runtime.Remoting.Messaging.CallContext.GetData(navDTO.Id.ToString() + navDTO.GetType().FullName);
    			                        if ((objnavModel as CateringBusinessHours) != null)
    			                        {
    			                            navModel = objnavModel as CateringBusinessHours;
    			                        }
    			                        else
    			                        {
    			                            navModel = new CateringBusinessHours();
    			                            navModel.FromBEDataToModel(navDTO);
    			                        }
    			                        this.CateringBusinessHours.Add(navModel);
    			                    }
    			                }						  
    						  }
                             
    						  if (dto.CateringShiftTime != null)
    						  {
    						  	this.CateringShiftTime = new List<CateringShiftTime>();
    							foreach (CateringShiftTimeDTO navDTO in dto.CateringShiftTime)
    			                {
    			                    if (navDTO != null)
    			                    {
    			                        CateringShiftTime navModel = null;
    
    			                        object objnavModel = System.Runtime.Remoting.Messaging.CallContext.GetData(navDTO.Id.ToString() + navDTO.GetType().FullName);
    			                        if ((objnavModel as CateringShiftTime) != null)
    			                        {
    			                            navModel = objnavModel as CateringShiftTime;
    			                        }
    			                        else
    			                        {
    			                            navModel = new CateringShiftTime();
    			                            navModel.FromBEDataToModel(navDTO);
    			                        }
    			                        this.CateringShiftTime.Add(navModel);
    			                    }
    			                }						  
    						  }
                                    }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CateringSettingDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CateringSettingDTO();
                base.ToBEData(ref todto);
    			CateringSettingDTO dto = todto as CateringSettingDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.Specification = this.Specification;
    								
    				 dto.DeliveryAmount = this.DeliveryAmount;
    								
    				 dto.DeliveryRange = this.DeliveryRange;
    								
    				 dto.DeliveryFee = this.DeliveryFee;
    								
    				 dto.MostCoupon = this.MostCoupon;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.StoreId = this.StoreId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.FreeAmount = this.FreeAmount;
    								
    				 dto.DeliveryFeeStartT = this.DeliveryFeeStartT;
    								
    				 dto.DeliveryFeeEndT = this.DeliveryFeeEndT;
    								
    				 dto.DeliveryFeeDiscount = this.DeliveryFeeDiscount;
    			 
    						  if (this.CateringBusinessHours != null)
    						  {
    						  	dto.CateringBusinessHours = new List<CateringBusinessHoursDTO>();
    			                foreach (CateringBusinessHours navModel in this.CateringBusinessHours)
    			                {
    			                    CateringBusinessHoursDTO navDTO = null;
    
    			                    Object objnavDTO = System.Runtime.Remoting.Messaging.CallContext.GetData(navModel.Id.ToString() + navModel.GetType().FullName);
    			                    if (objnavDTO != null && (objnavDTO as CateringBusinessHoursDTO) != null)
    			                        navDTO = objnavDTO as CateringBusinessHoursDTO;
    			                    else
    			                    {
    			                        navDTO = navModel.FromModelToBEData() as CateringBusinessHoursDTO;
    			                    }
    
    			                    if (navDTO != null)
    			                        dto.CateringBusinessHours.Add(navDTO);
    			                }						  
    						  }
                             
    						  if (this.CateringShiftTime != null)
    						  {
    						  	dto.CateringShiftTime = new List<CateringShiftTimeDTO>();
    			                foreach (CateringShiftTime navModel in this.CateringShiftTime)
    			                {
    			                    CateringShiftTimeDTO navDTO = null;
    
    			                    Object objnavDTO = System.Runtime.Remoting.Messaging.CallContext.GetData(navModel.Id.ToString() + navModel.GetType().FullName);
    			                    if (objnavDTO != null && (objnavDTO as CateringShiftTimeDTO) != null)
    			                        navDTO = objnavDTO as CateringShiftTimeDTO;
    			                    else
    			                    {
    			                        navDTO = navModel.FromModelToBEData() as CateringShiftTimeDTO;
    			                    }
    
    			                    if (navDTO != null)
    			                        dto.CateringShiftTime.Add(navDTO);
    			                }						  
    						  }
                                    }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CateringShiftTime",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CateringShiftTimeDTO))]
    public partial class CateringShiftTime: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CateringShiftTime ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShiftTime",DTOPropertyName="ShiftTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ShiftTime
        {
            get
            {
                return _ShiftTime;
            }
            set
            {
    
                if (_ShiftTime != value)
                {
                          
                _ShiftTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ShiftTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsValid",DTOPropertyName="IsValid",IsRequired=true, IsSerializable = true)]
        public bool IsValid
        {
            get
            {
                return _IsValid;
            }
            set
            {
    
                if (_IsValid != value)
                {
                          
                _IsValid = value; 
               
           		}
    		}
     	}
    
     	private bool _IsValid;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CateringSettingId",DTOPropertyName="CateringSettingId",IsRequired=true, IsSerializable = true)]
        public System.Guid CateringSettingId
        {
            get
            {
                return _CateringSettingId;
            }
            set
            {
    
                if (_CateringSettingId != value)
                {
                          
                _CateringSettingId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CateringSettingId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>   
    	[ModelProperty(DisplayNameResKey="CateringSetting",DTOPropertyName="CateringSetting",IsRequired= false, IsSerializable = true)]
        public CateringSetting CateringSetting
        {
            get
            {
                return _CateringSetting;
            }
            set
            {
               _CateringSetting = value;
            }
        }
    
    	private CateringSetting  _CateringSetting = null;
    
        

        #endregion
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CateringShiftTimeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CateringShiftTimeDTO dto = srcDTO as CateringShiftTimeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ShiftTime = dto.ShiftTime;
    								
    				 this.IsValid = dto.IsValid;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.CateringSettingId = dto.CateringSettingId;
    								
    				 this.AppId = dto.AppId;
    			                            if (dto.CateringSetting != null)
    				            {
    				                CateringSetting navModel = null;
    
    				                object objnavModel = System.Runtime.Remoting.Messaging.CallContext.GetData(dto.CateringSetting.Id.ToString() + dto.CateringSetting.GetType().FullName);
    				                if ( (objnavModel as CateringSetting) != null)
    				                {
    				                    navModel = objnavModel as CateringSetting;
    				                }
    				                else
    				                {
    				                    navModel = new CateringSetting();
    				                    navModel.FromBEDataToModel(dto.CateringSetting);                    
    				                }
    				                this.CateringSetting = navModel;
    				            }
    
    						         }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CateringShiftTimeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CateringShiftTimeDTO();
                base.ToBEData(ref todto);
    			CateringShiftTimeDTO dto = todto as CateringShiftTimeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ShiftTime = this.ShiftTime;
    								
    				 dto.IsValid = this.IsValid;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.CateringSettingId = this.CateringSettingId;
    								
    				 dto.AppId = this.AppId;
    			                            if (this.CateringSetting != null)
    				            {
    				                CateringSettingDTO navDTO = null;
    
    				                Object objnavDTO = System.Runtime.Remoting.Messaging.CallContext.GetData(this.CateringSetting.Id.ToString() + this.CateringSetting.GetType().FullName);
    				                if ((objnavDTO as CateringSettingDTO) != null)
    				                    navDTO = objnavDTO as CateringSettingDTO;
    				                else
    				                {
    				                    navDTO = this.CateringSetting.FromModelToBEData() as CateringSettingDTO;                    
    				                }
    
    				                dto.CateringSetting = navDTO;
    							}
    
    						         }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹分红明细
    /// </summary>
    /// <LongDescription>
    /// 每个用户每天每个众筹活动生成1条记录
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CfDividend",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CfDividendDTO))]
    public partial class CfDividend: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CfDividend ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 应用当日分红金币
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Gold",DTOPropertyName="Gold",IsRequired=true, IsSerializable = true)]
        public long Gold
        {
            get
            {
                return _Gold;
            }
            set
            {
    
                if (_Gold != value)
                {
                          
                _Gold = value; 
               
           		}
    		}
     	}
    
     	private long _Gold;
        
    
        /// <summary>
        /// 当日持有股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareCount",DTOPropertyName="ShareCount",IsRequired=true, IsSerializable = true)]
        public long ShareCount
        {
            get
            {
                return _ShareCount;
            }
            set
            {
    
                if (_ShareCount != value)
                {
                          
                _ShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _ShareCount;
        
    
        /// <summary>
        /// 0：初始化，1：已生成红包
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CfDividendDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CfDividendDTO dto = srcDTO as CfDividendDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.Gold = dto.Gold;
    								
    				 this.ShareCount = dto.ShareCount;
    								
    				 this.State = dto.State;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CfDividendDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CfDividendDTO();
                base.ToBEData(ref todto);
    			CfDividendDTO dto = todto as CfDividendDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.Gold = this.Gold;
    								
    				 dto.ShareCount = this.ShareCount;
    								
    				 dto.State = this.State;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹分账表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CfOrderDividend",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CfOrderDividendDTO))]
    public partial class CfOrderDividend: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CfOrderDividend ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 分账金币
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Gold",DTOPropertyName="Gold",IsRequired=true, IsSerializable = true)]
        public long Gold
        {
            get
            {
                return _Gold;
            }
            set
            {
    
                if (_Gold != value)
                {
                          
                _Gold = value; 
               
           		}
    		}
     	}
    
     	private long _Gold;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 0：初始化，1：已分账
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 已募得股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentShareCount",DTOPropertyName="CurrentShareCount",IsRequired=true, IsSerializable = true)]
        public long CurrentShareCount
        {
            get
            {
                return _CurrentShareCount;
            }
            set
            {
    
                if (_CurrentShareCount != value)
                {
                          
                _CurrentShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _CurrentShareCount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CfOrderDividendDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CfOrderDividendDTO dto = srcDTO as CfOrderDividendDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Gold = dto.Gold;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.State = dto.State;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.CurrentShareCount = dto.CurrentShareCount;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CfOrderDividendDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CfOrderDividendDTO();
                base.ToBEData(ref todto);
    			CfOrderDividendDTO dto = todto as CfOrderDividendDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Gold = this.Gold;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.State = this.State;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.CurrentShareCount = this.CurrentShareCount;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹分账明细
    /// </summary>
    /// <LongDescription>
    /// 没个用户针对每个订单生成1条记录
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CfOrderDividendDetail",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CfOrderDividendDetailDTO))]
    public partial class CfOrderDividendDetail: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CfOrderDividendDetail ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// CfOrderDividend表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderDividendId",DTOPropertyName="OrderDividendId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderDividendId
        {
            get
            {
                return _OrderDividendId;
            }
            set
            {
    
                if (_OrderDividendId != value)
                {
                          
                _OrderDividendId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderDividendId;
        
    
        /// <summary>
        /// 统计日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 获得金币数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Gold",DTOPropertyName="Gold",IsRequired=true, IsSerializable = true)]
        public long Gold
        {
            get
            {
                return _Gold;
            }
            set
            {
    
                if (_Gold != value)
                {
                          
                _Gold = value; 
               
           		}
    		}
     	}
    
     	private long _Gold;
        
    
        /// <summary>
        /// 用户持有股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareCount",DTOPropertyName="ShareCount",IsRequired=true, IsSerializable = true)]
        public long ShareCount
        {
            get
            {
                return _ShareCount;
            }
            set
            {
    
                if (_ShareCount != value)
                {
                          
                _ShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _ShareCount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CfOrderDividendDetailDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CfOrderDividendDetailDTO dto = srcDTO as CfOrderDividendDetailDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.OrderDividendId = dto.OrderDividendId;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.Gold = dto.Gold;
    								
    				 this.ShareCount = dto.ShareCount;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CfOrderDividendDetailDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CfOrderDividendDetailDTO();
                base.ToBEData(ref todto);
    			CfOrderDividendDetailDTO dto = todto as CfOrderDividendDetailDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.OrderDividendId = this.OrderDividendId;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.Gold = this.Gold;
    								
    				 dto.ShareCount = this.ShareCount;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 收藏
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Collection",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CollectionDTO))]
    public partial class Collection: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Collection ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CollectionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CollectionDTO dto = srcDTO as CollectionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CollectionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CollectionDTO();
                base.ToBEData(ref todto);
    			CollectionDTO dto = todto as CollectionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品属性
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ComAttibute",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ComAttibuteDTO))]
    public partial class ComAttibute: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ComAttibute ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 属性名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AttributeName",DTOPropertyName="AttributeName",IsRequired=true, IsSerializable = true)]
        public string AttributeName
        {
            get
            {
                return _AttributeName;
            }
            set
            {
    
                if (_AttributeName != value)
                {
                          
                _AttributeName = value; 
               
           		}
    		}
     	}
    
     	private string _AttributeName;
        
    
        /// <summary>
        /// 次级属性名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SecondAttributeName",DTOPropertyName="SecondAttributeName",IsRequired=true, IsSerializable = true)]
        public string SecondAttributeName
        {
            get
            {
                return _SecondAttributeName;
            }
            set
            {
    
                if (_SecondAttributeName != value)
                {
                          
                _SecondAttributeName = value; 
               
           		}
    		}
     	}
    
     	private string _SecondAttributeName;
        
    
        /// <summary>
        /// 属性ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AttributeId",DTOPropertyName="AttributeId",IsRequired=true, IsSerializable = true)]
        public System.Guid AttributeId
        {
            get
            {
                return _AttributeId;
            }
            set
            {
    
                if (_AttributeId != value)
                {
                          
                _AttributeId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AttributeId;
        
    
        /// <summary>
        /// 次级属性ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SecondAttributeId",DTOPropertyName="SecondAttributeId",IsRequired=true, IsSerializable = true)]
        public System.Guid SecondAttributeId
        {
            get
            {
                return _SecondAttributeId;
            }
            set
            {
    
                if (_SecondAttributeId != value)
                {
                          
                _SecondAttributeId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SecondAttributeId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ComAttibuteDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ComAttibuteDTO dto = srcDTO as ComAttibuteDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AttributeName = dto.AttributeName;
    								
    				 this.SecondAttributeName = dto.SecondAttributeName;
    								
    				 this.AttributeId = dto.AttributeId;
    								
    				 this.SecondAttributeId = dto.SecondAttributeId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ComAttibuteDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ComAttibuteDTO();
                base.ToBEData(ref todto);
    			ComAttibuteDTO dto = todto as ComAttibuteDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AttributeName = this.AttributeName;
    								
    				 dto.SecondAttributeName = this.SecondAttributeName;
    								
    				 dto.AttributeId = this.AttributeId;
    								
    				 dto.SecondAttributeId = this.SecondAttributeId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Commodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityDTO))]
    public partial class Commodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Commodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 商品编号数字
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Number",DTOPropertyName="No_Number",IsRequired=true, IsSerializable = true)]
        public int No_Number
        {
            get
            {
                return _No_Number;
            }
            set
            {
    
                if (_No_Number != value)
                {
                          
                _No_Number = value; 
               
           		}
    		}
     	}
    
     	private int _No_Number;
        
    
        /// <summary>
        /// 商品单价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 商品库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 商品图片路径
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 商品描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 商品状态：上架=0，未上架=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 是否删除：删除=TRUE,未删除=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品编号字符
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=true, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 收藏数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=true, IsSerializable = true)]
        public int TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private int _TotalCollection;
        
    
        /// <summary>
        /// 评价数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=true, IsSerializable = true)]
        public int TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private int _TotalReview;
        
    
        /// <summary>
        /// 销量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=true, IsSerializable = true)]
        public int Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private int _Salesvolume;
        
    
        /// <summary>
        /// 最后修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 最后上架时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroundTime",DTOPropertyName="GroundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> GroundTime
        {
            get
            {
                return _GroundTime;
            }
            set
            {
    
                if (_GroundTime != value)
                {
                          
                _GroundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _GroundTime;
        
    
        /// <summary>
        /// 商品属性
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=false, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 商品类目信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=false, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SortValue",DTOPropertyName="SortValue",IsRequired=true, IsSerializable = true)]
        public int SortValue
        {
            get
            {
                return _SortValue;
            }
            set
            {
    
                if (_SortValue != value)
                {
                          
                _SortValue = value; 
               
           		}
    		}
     	}
    
     	private int _SortValue;
        
    
        /// <summary>
        /// 运费模板Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FreightTemplateId;
        
    
        /// <summary>
        /// 商品市场价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 是否支持自提:0不支持，1支持。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnableSelfTake",DTOPropertyName="IsEnableSelfTake",IsRequired=true, IsSerializable = true)]
        public int IsEnableSelfTake
        {
            get
            {
                return _IsEnableSelfTake;
            }
            set
            {
    
                if (_IsEnableSelfTake != value)
                {
                          
                _IsEnableSelfTake = value; 
               
           		}
    		}
     	}
    
     	private int _IsEnableSelfTake;
        
    
        /// <summary>
        /// 重量(单位：kg)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Weight",DTOPropertyName="Weight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
    
                if (_Weight != value)
                {
                          
                _Weight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Weight;
        
    
        /// <summary>
        /// 0按件计价，1按重量计价。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=true, IsSerializable = true)]
        public byte PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private byte _PricingMethod = 0;
        
    
        /// <summary>
        /// 销售地区
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleAreas",DTOPropertyName="SaleAreas",IsRequired=false, IsSerializable = true)]
        public string SaleAreas
        {
            get
            {
                return _SaleAreas;
            }
            set
            {
    
                if (_SaleAreas != value)
                {
                          
                _SaleAreas = value; 
               
           		}
    		}
     	}
    
     	private string _SaleAreas;
        
    
        /// <summary>
        /// 分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SharePercent;
        
    
        /// <summary>
        /// 商品类型:0实体商品；1虚拟商品
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityType",DTOPropertyName="CommodityType",IsRequired=true, IsSerializable = true)]
        public int CommodityType
        {
            get
            {
                return _CommodityType;
            }
            set
            {
    
                if (_CommodityType != value)
                {
                          
                _CommodityType = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityType = 0;
        
    
        /// <summary>
        /// 网页视频播放地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HtmlVideoPath",DTOPropertyName="HtmlVideoPath",IsRequired=false, IsSerializable = true)]
        public string HtmlVideoPath
        {
            get
            {
                return _HtmlVideoPath;
            }
            set
            {
    
                if (_HtmlVideoPath != value)
                {
                          
                _HtmlVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _HtmlVideoPath;
        
    
        /// <summary>
        /// 手机客户端视频播放地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MobileVideoPath",DTOPropertyName="MobileVideoPath",IsRequired=false, IsSerializable = true)]
        public string MobileVideoPath
        {
            get
            {
                return _MobileVideoPath;
            }
            set
            {
    
                if (_MobileVideoPath != value)
                {
                          
                _MobileVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _MobileVideoPath;
        
    
        /// <summary>
        /// 视频图片
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoPic",DTOPropertyName="VideoPic",IsRequired=false, IsSerializable = true)]
        public string VideoPic
        {
            get
            {
                return _VideoPic;
            }
            set
            {
    
                if (_VideoPic != value)
                {
                          
                _VideoPic = value; 
               
           		}
    		}
     	}
    
     	private string _VideoPic;
        
    
        /// <summary>
        /// 视频名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoName",DTOPropertyName="VideoName",IsRequired=false, IsSerializable = true)]
        public string VideoName
        {
            get
            {
                return _VideoName;
            }
            set
            {
    
                if (_VideoName != value)
                {
                          
                _VideoName = value; 
               
           		}
    		}
     	}
    
     	private string _VideoName;
        
    
        /// <summary>
        /// 积分抵用上限
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScorePercent;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 推广主分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadPercent",DTOPropertyName="SpreadPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SpreadPercent
        {
            get
            {
                return _SpreadPercent;
            }
            set
            {
    
                if (_SpreadPercent != value)
                {
                          
                _SpreadPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SpreadPercent;
        
    
        /// <summary>
        /// 积分比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreScale",DTOPropertyName="ScoreScale",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScoreScale
        {
            get
            {
                return _ScoreScale;
            }
            set
            {
    
                if (_ScoreScale != value)
                {
                          
                _ScoreScale = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScoreScale;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 税收分类编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxClassCode",DTOPropertyName="TaxClassCode",IsRequired=false, IsSerializable = true)]
        public string TaxClassCode
        {
            get
            {
                return _TaxClassCode;
            }
            set
            {
    
                if (_TaxClassCode != value)
                {
                          
                _TaxClassCode = value; 
               
           		}
    		}
     	}
    
     	private string _TaxClassCode;
        
    
        /// <summary>
        /// 计量单位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 商品条码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 备注编码
        /// </summary>
        /// <LongDescription>
        /// 京东、网易skuId
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 进货价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 七天无理由退货
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAssurance",DTOPropertyName="IsAssurance",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsAssurance
        {
            get
            {
                return _IsAssurance;
            }
            set
            {
    
                if (_IsAssurance != value)
                {
                          
                _IsAssurance = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsAssurance;
        
    
        /// <summary>
        /// 规格参数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TechSpecs",DTOPropertyName="TechSpecs",IsRequired=false, IsSerializable = true)]
        public string TechSpecs
        {
            get
            {
                return _TechSpecs;
            }
            set
            {
    
                if (_TechSpecs != value)
                {
                          
                _TechSpecs = value; 
               
           		}
    		}
     	}
    
     	private string _TechSpecs;
        
    
        /// <summary>
        /// 售后说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleService",DTOPropertyName="SaleService",IsRequired=false, IsSerializable = true)]
        public string SaleService
        {
            get
            {
                return _SaleService;
            }
            set
            {
    
                if (_SaleService != value)
                {
                          
                _SaleService = value; 
               
           		}
    		}
     	}
    
     	private string _SaleService;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsReturns",DTOPropertyName="IsReturns",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsReturns
        {
            get
            {
                return _IsReturns;
            }
            set
            {
    
                if (_IsReturns != value)
                {
                          
                _IsReturns = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsReturns;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 服务项设置Id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ServiceSettingId",DTOPropertyName="ServiceSettingId",IsRequired=false, IsSerializable = true)]
        public string ServiceSettingId
        {
            get
            {
                return _ServiceSettingId;
            }
            set
            {
    
                if (_ServiceSettingId != value)
                {
                          
                _ServiceSettingId = value; 
               
           		}
    		}
     	}
    
     	private string _ServiceSettingId;
        
    
        /// <summary>
        /// 商品类型：实物=null或0，易捷卡密=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 易捷电子券活动编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 易捷电子券类型编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 修改人id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifieId",DTOPropertyName="ModifieId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifieId
        {
            get
            {
                return _ModifieId;
            }
            set
            {
    
                if (_ModifieId != value)
                {
                          
                _ModifieId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifieId;
        
    
        /// <summary>
        /// 是否支持7天无理由退 
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Isnsupport",DTOPropertyName="Isnsupport",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> Isnsupport
        {
            get
            {
                return _Isnsupport;
            }
            set
            {
    
                if (_Isnsupport != value)
                {
                          
                _Isnsupport = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _Isnsupport;
        
    
        /// <summary>
        /// 石化二期系统商品编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ErQiCode",DTOPropertyName="ErQiCode",IsRequired=false, IsSerializable = true)]
        public string ErQiCode
        {
            get
            {
                return _ErQiCode;
            }
            set
            {
    
                if (_ErQiCode != value)
                {
                          
                _ErQiCode = value; 
               
           		}
    		}
     	}
    
     	private string _ErQiCode;
        
    
        /// <summary>
        /// 退货运费模板Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundFreightTemplateId",DTOPropertyName="RefundFreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> RefundFreightTemplateId
        {
            get
            {
                return _RefundFreightTemplateId;
            }
            set
            {
    
                if (_RefundFreightTemplateId != value)
                {
                          
                _RefundFreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _RefundFreightTemplateId;
        
    
        /// <summary>
        /// 加入购物车数据
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BasketCount",DTOPropertyName="BasketCount",IsRequired=false, IsSerializable = true)]
        public Nullable<int> BasketCount
        {
            get
            {
                return _BasketCount;
            }
            set
            {
    
                if (_BasketCount != value)
                {
                          
                _BasketCount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _BasketCount;
        
    
        /// <summary>
        /// 排序权重（销量销售额40，收藏购物车10）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderWeight",DTOPropertyName="OrderWeight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> OrderWeight
        {
            get
            {
                return _OrderWeight;
            }
            set
            {
    
                if (_OrderWeight != value)
                {
                          
                _OrderWeight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _OrderWeight;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Assurance",DTOPropertyName="Assurance",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> Assurance
        {
            get
            {
                return _Assurance;
            }
            set
            {
    
                if (_Assurance != value)
                {
                          
                _Assurance = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _Assurance;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityDTO dto = srcDTO as CommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.No_Number = dto.No_Number;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Description = dto.Description;
    								
    				 this.State = dto.State;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroundTime = dto.GroundTime;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SortValue = dto.SortValue;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.IsEnableSelfTake = dto.IsEnableSelfTake;
    								
    				 this.Weight = dto.Weight;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.SaleAreas = dto.SaleAreas;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.CommodityType = dto.CommodityType;
    								
    				 this.HtmlVideoPath = dto.HtmlVideoPath;
    								
    				 this.MobileVideoPath = dto.MobileVideoPath;
    								
    				 this.VideoPic = dto.VideoPic;
    								
    				 this.VideoName = dto.VideoName;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.SpreadPercent = dto.SpreadPercent;
    								
    				 this.ScoreScale = dto.ScoreScale;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.TaxClassCode = dto.TaxClassCode;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.IsAssurance = dto.IsAssurance;
    								
    				 this.TechSpecs = dto.TechSpecs;
    								
    				 this.SaleService = dto.SaleService;
    								
    				 this.IsReturns = dto.IsReturns;
    								
    				 this.ServiceSettingId = dto.ServiceSettingId;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.ModifieId = dto.ModifieId;
    								
    				 this.Isnsupport = dto.Isnsupport;
    								
    				 this.ErQiCode = dto.ErQiCode;
    								
    				 this.RefundFreightTemplateId = dto.RefundFreightTemplateId;
    								
    				 this.BasketCount = dto.BasketCount;
    								
    				 this.OrderWeight = dto.OrderWeight;
    								
    				 this.Assurance = dto.Assurance;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityDTO();
                base.ToBEData(ref todto);
    			CommodityDTO dto = todto as CommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.No_Number = this.No_Number;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Description = this.Description;
    								
    				 dto.State = this.State;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroundTime = this.GroundTime;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SortValue = this.SortValue;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.IsEnableSelfTake = this.IsEnableSelfTake;
    								
    				 dto.Weight = this.Weight;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.SaleAreas = this.SaleAreas;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.CommodityType = this.CommodityType;
    								
    				 dto.HtmlVideoPath = this.HtmlVideoPath;
    								
    				 dto.MobileVideoPath = this.MobileVideoPath;
    								
    				 dto.VideoPic = this.VideoPic;
    								
    				 dto.VideoName = this.VideoName;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.SpreadPercent = this.SpreadPercent;
    								
    				 dto.ScoreScale = this.ScoreScale;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.TaxClassCode = this.TaxClassCode;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.IsAssurance = this.IsAssurance;
    								
    				 dto.TechSpecs = this.TechSpecs;
    								
    				 dto.SaleService = this.SaleService;
    								
    				 dto.IsReturns = this.IsReturns;
    								
    				 dto.ServiceSettingId = this.ServiceSettingId;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.ModifieId = this.ModifieId;
    								
    				 dto.Isnsupport = this.Isnsupport;
    								
    				 dto.ErQiCode = this.ErQiCode;
    								
    				 dto.RefundFreightTemplateId = this.RefundFreightTemplateId;
    								
    				 dto.BasketCount = this.BasketCount;
    								
    				 dto.OrderWeight = this.OrderWeight;
    								
    				 dto.Assurance = this.Assurance;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品的分类
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityCategory",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityCategoryDTO))]
    public partial class CommodityCategory: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityCategory ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 分类ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryId",DTOPropertyName="CategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
    
                if (_CategoryId != value)
                {
                          
                _CategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CategoryId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MaxSort",DTOPropertyName="MaxSort",IsRequired=false, IsSerializable = true)]
        public Nullable<double> MaxSort
        {
            get
            {
                return _MaxSort;
            }
            set
            {
    
                if (_MaxSort != value)
                {
                          
                _MaxSort = value; 
               
           		}
    		}
     	}
    
     	private Nullable<double> _MaxSort;
        
    
        /// <summary>
        /// 分类的appid
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// appid对应的crc64转码结果
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrcAppId",DTOPropertyName="CrcAppId",IsRequired=true, IsSerializable = true)]
        public long CrcAppId
        {
            get
            {
                return _CrcAppId;
            }
            set
            {
    
                if (_CrcAppId != value)
                {
                          
                _CrcAppId = value; 
               
           		}
    		}
     	}
    
     	private long _CrcAppId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 是否删除
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryPath",DTOPropertyName="CategoryPath",IsRequired=false, IsSerializable = true)]
        public string CategoryPath
        {
            get
            {
                return _CategoryPath;
            }
            set
            {
    
                if (_CategoryPath != value)
                {
                          
                _CategoryPath = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryPath;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityCategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityCategoryDTO dto = srcDTO as CommodityCategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.CategoryId = dto.CategoryId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.MaxSort = dto.MaxSort;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CrcAppId = dto.CrcAppId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.CategoryPath = dto.CategoryPath;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityCategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityCategoryDTO();
                base.ToBEData(ref todto);
    			CommodityCategoryDTO dto = todto as CommodityCategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.CategoryId = this.CategoryId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.MaxSort = this.MaxSort;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CrcAppId = this.CrcAppId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.CategoryPath = this.CategoryPath;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityChange",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityChangeDTO))]
    public partial class CommodityChange: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityChange ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubOn",DTOPropertyName="SubOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubOn
        {
            get
            {
                return _SubOn;
            }
            set
            {
    
                if (_SubOn != value)
                {
                          
                _SubOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubOn;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 商品编号数字
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Number",DTOPropertyName="No_Number",IsRequired=true, IsSerializable = true)]
        public int No_Number
        {
            get
            {
                return _No_Number;
            }
            set
            {
    
                if (_No_Number != value)
                {
                          
                _No_Number = value; 
               
           		}
    		}
     	}
    
     	private int _No_Number;
        
    
        /// <summary>
        /// 商品单价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 商品库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 商品图片路径
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 商品描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 商品状态：上架=0，未上架=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 是否删除：删除=TRUE,未删除=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品编号字符
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=false, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 收藏数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=true, IsSerializable = true)]
        public int TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private int _TotalCollection;
        
    
        /// <summary>
        /// 评价数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=true, IsSerializable = true)]
        public int TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private int _TotalReview;
        
    
        /// <summary>
        /// 销量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=true, IsSerializable = true)]
        public int Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private int _Salesvolume;
        
    
        /// <summary>
        /// 最后修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 最后上架时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroundTime",DTOPropertyName="GroundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> GroundTime
        {
            get
            {
                return _GroundTime;
            }
            set
            {
    
                if (_GroundTime != value)
                {
                          
                _GroundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _GroundTime;
        
    
        /// <summary>
        /// 商品属性
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=false, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=false, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SortValue",DTOPropertyName="SortValue",IsRequired=true, IsSerializable = true)]
        public int SortValue
        {
            get
            {
                return _SortValue;
            }
            set
            {
    
                if (_SortValue != value)
                {
                          
                _SortValue = value; 
               
           		}
    		}
     	}
    
     	private int _SortValue;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FreightTemplateId;
        
    
        /// <summary>
        /// 商品市场价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 是否支持自提:0不支持，1支持。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnableSelfTake",DTOPropertyName="IsEnableSelfTake",IsRequired=true, IsSerializable = true)]
        public int IsEnableSelfTake
        {
            get
            {
                return _IsEnableSelfTake;
            }
            set
            {
    
                if (_IsEnableSelfTake != value)
                {
                          
                _IsEnableSelfTake = value; 
               
           		}
    		}
     	}
    
     	private int _IsEnableSelfTake;
        
    
        /// <summary>
        /// 重量(单位：kg)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Weight",DTOPropertyName="Weight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
    
                if (_Weight != value)
                {
                          
                _Weight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Weight;
        
    
        /// <summary>
        /// 0按件计价，1按重量计价。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=true, IsSerializable = true)]
        public byte PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private byte _PricingMethod = 0;
        
    
        /// <summary>
        /// 销售地区
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleAreas",DTOPropertyName="SaleAreas",IsRequired=false, IsSerializable = true)]
        public string SaleAreas
        {
            get
            {
                return _SaleAreas;
            }
            set
            {
    
                if (_SaleAreas != value)
                {
                          
                _SaleAreas = value; 
               
           		}
    		}
     	}
    
     	private string _SaleAreas;
        
    
        /// <summary>
        /// 分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SharePercent;
        
    
        /// <summary>
        /// 商品类型:0实体商品；1虚拟商品
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityType",DTOPropertyName="CommodityType",IsRequired=true, IsSerializable = true)]
        public int CommodityType
        {
            get
            {
                return _CommodityType;
            }
            set
            {
    
                if (_CommodityType != value)
                {
                          
                _CommodityType = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityType = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HtmlVideoPath",DTOPropertyName="HtmlVideoPath",IsRequired=false, IsSerializable = true)]
        public string HtmlVideoPath
        {
            get
            {
                return _HtmlVideoPath;
            }
            set
            {
    
                if (_HtmlVideoPath != value)
                {
                          
                _HtmlVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _HtmlVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MobileVideoPath",DTOPropertyName="MobileVideoPath",IsRequired=false, IsSerializable = true)]
        public string MobileVideoPath
        {
            get
            {
                return _MobileVideoPath;
            }
            set
            {
    
                if (_MobileVideoPath != value)
                {
                          
                _MobileVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _MobileVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoPic",DTOPropertyName="VideoPic",IsRequired=false, IsSerializable = true)]
        public string VideoPic
        {
            get
            {
                return _VideoPic;
            }
            set
            {
    
                if (_VideoPic != value)
                {
                          
                _VideoPic = value; 
               
           		}
    		}
     	}
    
     	private string _VideoPic;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoName",DTOPropertyName="VideoName",IsRequired=false, IsSerializable = true)]
        public string VideoName
        {
            get
            {
                return _VideoName;
            }
            set
            {
    
                if (_VideoName != value)
                {
                          
                _VideoName = value; 
               
           		}
    		}
     	}
    
     	private string _VideoName;
        
    
        /// <summary>
        /// 积分抵用上限
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScorePercent;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 推广主分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadPercent",DTOPropertyName="SpreadPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SpreadPercent
        {
            get
            {
                return _SpreadPercent;
            }
            set
            {
    
                if (_SpreadPercent != value)
                {
                          
                _SpreadPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SpreadPercent;
        
    
        /// <summary>
        /// 积分比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreScale",DTOPropertyName="ScoreScale",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScoreScale
        {
            get
            {
                return _ScoreScale;
            }
            set
            {
    
                if (_ScoreScale != value)
                {
                          
                _ScoreScale = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScoreScale;
        
    
        /// <summary>
        /// 销项税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 税收分类编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxClassCode",DTOPropertyName="TaxClassCode",IsRequired=false, IsSerializable = true)]
        public string TaxClassCode
        {
            get
            {
                return _TaxClassCode;
            }
            set
            {
    
                if (_TaxClassCode != value)
                {
                          
                _TaxClassCode = value; 
               
           		}
    		}
     	}
    
     	private string _TaxClassCode;
        
    
        /// <summary>
        /// 计量单位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 进项税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 商品条码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 京东商品编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 进货价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 七天无理由退货
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAssurance",DTOPropertyName="IsAssurance",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsAssurance
        {
            get
            {
                return _IsAssurance;
            }
            set
            {
    
                if (_IsAssurance != value)
                {
                          
                _IsAssurance = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsAssurance;
        
    
        /// <summary>
        /// 规格参数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TechSpecs",DTOPropertyName="TechSpecs",IsRequired=false, IsSerializable = true)]
        public string TechSpecs
        {
            get
            {
                return _TechSpecs;
            }
            set
            {
    
                if (_TechSpecs != value)
                {
                          
                _TechSpecs = value; 
               
           		}
    		}
     	}
    
     	private string _TechSpecs;
        
    
        /// <summary>
        /// 售后说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleService",DTOPropertyName="SaleService",IsRequired=false, IsSerializable = true)]
        public string SaleService
        {
            get
            {
                return _SaleService;
            }
            set
            {
    
                if (_SaleService != value)
                {
                          
                _SaleService = value; 
               
           		}
    		}
     	}
    
     	private string _SaleService;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsReturns",DTOPropertyName="IsReturns",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsReturns
        {
            get
            {
                return _IsReturns;
            }
            set
            {
    
                if (_IsReturns != value)
                {
                          
                _IsReturns = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsReturns;
        
    
        /// <summary>
        /// 服务项设置Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ServiceSettingId",DTOPropertyName="ServiceSettingId",IsRequired=false, IsSerializable = true)]
        public string ServiceSettingId
        {
            get
            {
                return _ServiceSettingId;
            }
            set
            {
    
                if (_ServiceSettingId != value)
                {
                          
                _ServiceSettingId = value; 
               
           		}
    		}
     	}
    
     	private string _ServiceSettingId;
        
    
        /// <summary>
        /// 商品类型：实物=null或0，易捷卡密=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 易捷电子券活动编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 易捷电子券类型编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 修改人id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifiedId;
        
    
        /// <summary>
        /// 修改审核状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditState",DTOPropertyName="AuditState",IsRequired=true, IsSerializable = true)]
        public int AuditState
        {
            get
            {
                return _AuditState;
            }
            set
            {
    
                if (_AuditState != value)
                {
                          
                _AuditState = value; 
               
           		}
    		}
     	}
    
     	private int _AuditState = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _SubTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityChangeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityChangeDTO dto = srcDTO as CommodityChangeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.SubOn = dto.SubOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.No_Number = dto.No_Number;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Description = dto.Description;
    								
    				 this.State = dto.State;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroundTime = dto.GroundTime;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SortValue = dto.SortValue;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.IsEnableSelfTake = dto.IsEnableSelfTake;
    								
    				 this.Weight = dto.Weight;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.SaleAreas = dto.SaleAreas;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.CommodityType = dto.CommodityType;
    								
    				 this.HtmlVideoPath = dto.HtmlVideoPath;
    								
    				 this.MobileVideoPath = dto.MobileVideoPath;
    								
    				 this.VideoPic = dto.VideoPic;
    								
    				 this.VideoName = dto.VideoName;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.SpreadPercent = dto.SpreadPercent;
    								
    				 this.ScoreScale = dto.ScoreScale;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.TaxClassCode = dto.TaxClassCode;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.IsAssurance = dto.IsAssurance;
    								
    				 this.TechSpecs = dto.TechSpecs;
    								
    				 this.SaleService = dto.SaleService;
    								
    				 this.IsReturns = dto.IsReturns;
    								
    				 this.ServiceSettingId = dto.ServiceSettingId;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.AuditState = dto.AuditState;
    								
    				 this.SubTime = dto.SubTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityChangeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityChangeDTO();
                base.ToBEData(ref todto);
    			CommodityChangeDTO dto = todto as CommodityChangeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.SubOn = this.SubOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.No_Number = this.No_Number;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Description = this.Description;
    								
    				 dto.State = this.State;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroundTime = this.GroundTime;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SortValue = this.SortValue;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.IsEnableSelfTake = this.IsEnableSelfTake;
    								
    				 dto.Weight = this.Weight;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.SaleAreas = this.SaleAreas;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.CommodityType = this.CommodityType;
    								
    				 dto.HtmlVideoPath = this.HtmlVideoPath;
    								
    				 dto.MobileVideoPath = this.MobileVideoPath;
    								
    				 dto.VideoPic = this.VideoPic;
    								
    				 dto.VideoName = this.VideoName;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.SpreadPercent = this.SpreadPercent;
    								
    				 dto.ScoreScale = this.ScoreScale;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.TaxClassCode = this.TaxClassCode;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.IsAssurance = this.IsAssurance;
    								
    				 dto.TechSpecs = this.TechSpecs;
    								
    				 dto.SaleService = this.SaleService;
    								
    				 dto.IsReturns = this.IsReturns;
    								
    				 dto.ServiceSettingId = this.ServiceSettingId;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.ModifiedId = (Guid)this.ModifiedId;
    								
    				 dto.AuditState = (int)this.AuditState;
    								
    				 dto.SubTime = (DateTime)this.SubTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品编码生成序列
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityCodeSeq",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityCodeSeqDTO))]
    public partial class CommodityCodeSeq: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityCodeSeq ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 当前递增值
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Offset",DTOPropertyName="Offset",IsRequired=true, IsSerializable = true)]
        public int Offset
        {
            get
            {
                return _Offset;
            }
            set
            {
    
                if (_Offset != value)
                {
                          
                _Offset = value; 
               
           		}
    		}
     	}
    
     	private int _Offset;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityCodeSeqDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityCodeSeqDTO dto = srcDTO as CommodityCodeSeqDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.Offset = dto.Offset;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityCodeSeqDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityCodeSeqDTO();
                base.ToBEData(ref todto);
    			CommodityCodeSeqDTO dto = todto as CommodityCodeSeqDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.Offset = this.Offset;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityCommission",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityCommissionDTO))]
    public partial class CommodityCommission: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityCommission ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MallApplyId",DTOPropertyName="MallApplyId",IsRequired=true, IsSerializable = true)]
        public System.Guid MallApplyId
        {
            get
            {
                return _MallApplyId;
            }
            set
            {
    
                if (_MallApplyId != value)
                {
                          
                _MallApplyId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _MallApplyId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EffectiveTime",DTOPropertyName="EffectiveTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EffectiveTime
        {
            get
            {
                return _EffectiveTime;
            }
            set
            {
    
                if (_EffectiveTime != value)
                {
                          
                _EffectiveTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EffectiveTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Commission",DTOPropertyName="Commission",IsRequired=true, IsSerializable = true)]
        public decimal Commission
        {
            get
            {
                return _Commission;
            }
            set
            {
    
                if (_Commission != value)
                {
                          
                _Commission = value; 
               
           		}
    		}
     	}
    
     	private decimal _Commission;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryId",DTOPropertyName="CategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
    
                if (_CategoryId != value)
                {
                          
                _CategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CategoryId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=false, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityCommissionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityCommissionDTO dto = srcDTO as CommodityCommissionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.MallApplyId = dto.MallApplyId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.EffectiveTime = dto.EffectiveTime;
    								
    				 this.Commission = dto.Commission;
    								
    				 this.CategoryId = dto.CategoryId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityName = dto.CommodityName;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityCommissionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityCommissionDTO();
                base.ToBEData(ref todto);
    			CommodityCommissionDTO dto = todto as CommodityCommissionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.MallApplyId = this.MallApplyId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.EffectiveTime = this.EffectiveTime;
    								
    				 dto.Commission = this.Commission;
    								
    				 dto.CategoryId = this.CategoryId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityName = this.CommodityName;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品三级分销
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityDistribution",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityDistributionDTO))]
    public partial class CommodityDistribution: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityDistribution ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 直接上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="L1Percent",DTOPropertyName="L1Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> L1Percent
        {
            get
            {
                return _L1Percent;
            }
            set
            {
    
                if (_L1Percent != value)
                {
                          
                _L1Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _L1Percent;
        
    
        /// <summary>
        /// 2级上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="L2Percent",DTOPropertyName="L2Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> L2Percent
        {
            get
            {
                return _L2Percent;
            }
            set
            {
    
                if (_L2Percent != value)
                {
                          
                _L2Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _L2Percent;
        
    
        /// <summary>
        /// 3级上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="L3Percent",DTOPropertyName="L3Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> L3Percent
        {
            get
            {
                return _L3Percent;
            }
            set
            {
    
                if (_L3Percent != value)
                {
                          
                _L3Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _L3Percent;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityDistributionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityDistributionDTO dto = srcDTO as CommodityDistributionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.L1Percent = dto.L1Percent;
    								
    				 this.L2Percent = dto.L2Percent;
    								
    				 this.L3Percent = dto.L3Percent;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityDistributionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityDistributionDTO();
                base.ToBEData(ref todto);
    			CommodityDistributionDTO dto = todto as CommodityDistributionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.L1Percent = this.L1Percent;
    								
    				 dto.L2Percent = this.L2Percent;
    								
    				 dto.L3Percent = this.L3Percent;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品三级分销设置log
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityDistributionJounal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityDistributionJounalDTO))]
    public partial class CommodityDistributionJounal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityDistributionJounal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 直接上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="L1Percent",DTOPropertyName="L1Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> L1Percent
        {
            get
            {
                return _L1Percent;
            }
            set
            {
    
                if (_L1Percent != value)
                {
                          
                _L1Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _L1Percent;
        
    
        /// <summary>
        /// 2级上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="L2Percent",DTOPropertyName="L2Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> L2Percent
        {
            get
            {
                return _L2Percent;
            }
            set
            {
    
                if (_L2Percent != value)
                {
                          
                _L2Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _L2Percent;
        
    
        /// <summary>
        /// 3级上级分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="L3Percent",DTOPropertyName="L3Percent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> L3Percent
        {
            get
            {
                return _L3Percent;
            }
            set
            {
    
                if (_L3Percent != value)
                {
                          
                _L3Percent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _L3Percent;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityDistributionJounalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityDistributionJounalDTO dto = srcDTO as CommodityDistributionJounalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.L1Percent = dto.L1Percent;
    								
    				 this.L2Percent = dto.L2Percent;
    								
    				 this.L3Percent = dto.L3Percent;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityDistributionJounalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityDistributionJounalDTO();
                base.ToBEData(ref todto);
    			CommodityDistributionJounalDTO dto = todto as CommodityDistributionJounalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.L1Percent = this.L1Percent;
    								
    				 dto.L2Percent = this.L2Percent;
    								
    				 dto.L3Percent = this.L3Percent;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityInnerBrand",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityInnerBrandDTO))]
    public partial class CommodityInnerBrand: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityInnerBrand ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BrandId",DTOPropertyName="BrandId",IsRequired=true, IsSerializable = true)]
        public System.Guid BrandId
        {
            get
            {
                return _BrandId;
            }
            set
            {
    
                if (_BrandId != value)
                {
                          
                _BrandId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _BrandId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MaxSort",DTOPropertyName="MaxSort",IsRequired=false, IsSerializable = true)]
        public Nullable<double> MaxSort
        {
            get
            {
                return _MaxSort;
            }
            set
            {
    
                if (_MaxSort != value)
                {
                          
                _MaxSort = value; 
               
           		}
    		}
     	}
    
     	private Nullable<double> _MaxSort;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrcAppId",DTOPropertyName="CrcAppId",IsRequired=true, IsSerializable = true)]
        public long CrcAppId
        {
            get
            {
                return _CrcAppId;
            }
            set
            {
    
                if (_CrcAppId != value)
                {
                          
                _CrcAppId = value; 
               
           		}
    		}
     	}
    
     	private long _CrcAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityInnerBrandDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityInnerBrandDTO dto = srcDTO as CommodityInnerBrandDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.BrandId = dto.BrandId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.MaxSort = dto.MaxSort;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CrcAppId = dto.CrcAppId;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityInnerBrandDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityInnerBrandDTO();
                base.ToBEData(ref todto);
    			CommodityInnerBrandDTO dto = todto as CommodityInnerBrandDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.BrandId = this.BrandId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.MaxSort = this.MaxSort;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CrcAppId = this.CrcAppId;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品内部类目
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityInnerCategory",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityInnerCategoryDTO))]
    public partial class CommodityInnerCategory: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityInnerCategory ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryId",DTOPropertyName="CategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
    
                if (_CategoryId != value)
                {
                          
                _CategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CategoryId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MaxSort",DTOPropertyName="MaxSort",IsRequired=false, IsSerializable = true)]
        public Nullable<double> MaxSort
        {
            get
            {
                return _MaxSort;
            }
            set
            {
    
                if (_MaxSort != value)
                {
                          
                _MaxSort = value; 
               
           		}
    		}
     	}
    
     	private Nullable<double> _MaxSort;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrcAppId",DTOPropertyName="CrcAppId",IsRequired=true, IsSerializable = true)]
        public long CrcAppId
        {
            get
            {
                return _CrcAppId;
            }
            set
            {
    
                if (_CrcAppId != value)
                {
                          
                _CrcAppId = value; 
               
           		}
    		}
     	}
    
     	private long _CrcAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityInnerCategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityInnerCategoryDTO dto = srcDTO as CommodityInnerCategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.CategoryId = dto.CategoryId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.MaxSort = dto.MaxSort;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CrcAppId = dto.CrcAppId;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityInnerCategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityInnerCategoryDTO();
                base.ToBEData(ref todto);
    			CommodityInnerCategoryDTO dto = todto as CommodityInnerCategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.CategoryId = this.CategoryId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.MaxSort = this.MaxSort;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CrcAppId = this.CrcAppId;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品维护日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityJournalDTO))]
    public partial class CommodityJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Number",DTOPropertyName="No_Number",IsRequired=true, IsSerializable = true)]
        public int No_Number
        {
            get
            {
                return _No_Number;
            }
            set
            {
    
                if (_No_Number != value)
                {
                          
                _No_Number = value; 
               
           		}
    		}
     	}
    
     	private int _No_Number;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=true, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=true, IsSerializable = true)]
        public int TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private int _TotalCollection;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=true, IsSerializable = true)]
        public int TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private int _TotalReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=true, IsSerializable = true)]
        public int Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private int _Salesvolume;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroundTime",DTOPropertyName="GroundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> GroundTime
        {
            get
            {
                return _GroundTime;
            }
            set
            {
    
                if (_GroundTime != value)
                {
                          
                _GroundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _GroundTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=false, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=false, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SortValue",DTOPropertyName="SortValue",IsRequired=true, IsSerializable = true)]
        public int SortValue
        {
            get
            {
                return _SortValue;
            }
            set
            {
    
                if (_SortValue != value)
                {
                          
                _SortValue = value; 
               
           		}
    		}
     	}
    
     	private int _SortValue;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FreightTemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnableSelfTake",DTOPropertyName="IsEnableSelfTake",IsRequired=true, IsSerializable = true)]
        public int IsEnableSelfTake
        {
            get
            {
                return _IsEnableSelfTake;
            }
            set
            {
    
                if (_IsEnableSelfTake != value)
                {
                          
                _IsEnableSelfTake = value; 
               
           		}
    		}
     	}
    
     	private int _IsEnableSelfTake;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Weight",DTOPropertyName="Weight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
    
                if (_Weight != value)
                {
                          
                _Weight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Weight;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=true, IsSerializable = true)]
        public byte PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private byte _PricingMethod = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleAreas",DTOPropertyName="SaleAreas",IsRequired=false, IsSerializable = true)]
        public string SaleAreas
        {
            get
            {
                return _SaleAreas;
            }
            set
            {
    
                if (_SaleAreas != value)
                {
                          
                _SaleAreas = value; 
               
           		}
    		}
     	}
    
     	private string _SaleAreas;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SharePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HtmlVideoPath",DTOPropertyName="HtmlVideoPath",IsRequired=false, IsSerializable = true)]
        public string HtmlVideoPath
        {
            get
            {
                return _HtmlVideoPath;
            }
            set
            {
    
                if (_HtmlVideoPath != value)
                {
                          
                _HtmlVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _HtmlVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MobileVideoPath",DTOPropertyName="MobileVideoPath",IsRequired=false, IsSerializable = true)]
        public string MobileVideoPath
        {
            get
            {
                return _MobileVideoPath;
            }
            set
            {
    
                if (_MobileVideoPath != value)
                {
                          
                _MobileVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _MobileVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoPic",DTOPropertyName="VideoPic",IsRequired=false, IsSerializable = true)]
        public string VideoPic
        {
            get
            {
                return _VideoPic;
            }
            set
            {
    
                if (_VideoPic != value)
                {
                          
                _VideoPic = value; 
               
           		}
    		}
     	}
    
     	private string _VideoPic;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoName",DTOPropertyName="VideoName",IsRequired=false, IsSerializable = true)]
        public string VideoName
        {
            get
            {
                return _VideoName;
            }
            set
            {
    
                if (_VideoName != value)
                {
                          
                _VideoName = value; 
               
           		}
    		}
     	}
    
     	private string _VideoName;
        
    
        /// <summary>
        /// 积分抵用上限
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScorePercent;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityJournalDTO dto = srcDTO as CommodityJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.No_Number = dto.No_Number;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Description = dto.Description;
    								
    				 this.State = dto.State;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroundTime = dto.GroundTime;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SortValue = dto.SortValue;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.IsEnableSelfTake = dto.IsEnableSelfTake;
    								
    				 this.Weight = dto.Weight;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.SaleAreas = dto.SaleAreas;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.HtmlVideoPath = dto.HtmlVideoPath;
    								
    				 this.MobileVideoPath = dto.MobileVideoPath;
    								
    				 this.VideoPic = dto.VideoPic;
    								
    				 this.VideoName = dto.VideoName;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.Duty = dto.Duty;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityJournalDTO();
                base.ToBEData(ref todto);
    			CommodityJournalDTO dto = todto as CommodityJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.No_Number = this.No_Number;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Description = this.Description;
    								
    				 dto.State = this.State;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroundTime = this.GroundTime;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SortValue = this.SortValue;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.IsEnableSelfTake = this.IsEnableSelfTake;
    								
    				 dto.Weight = this.Weight;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.SaleAreas = this.SaleAreas;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.HtmlVideoPath = this.HtmlVideoPath;
    								
    				 dto.MobileVideoPath = this.MobileVideoPath;
    								
    				 dto.VideoPic = this.VideoPic;
    								
    				 dto.VideoName = this.VideoName;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.Duty = this.Duty;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityOrder",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityOrderDTO))]
    public partial class CommodityOrder: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityOrder ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 商家(店铺)应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 订单总价不包含运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 订单状态（必填）：未支付=0，未发货=1，已发货=2，确认收货=3，商家取消订单=4，客户取消订单=5，超时交易关闭=6，已退款=7，待发货退款中=8，已发货退款中=9,已发货退款中商家同意退款，商家未收到货=10,付款中=11,金和处理退款中=12,出库中=13，出库中退款中=14，待审核=16，待付款待审核=17，餐饮订单待处理=18，餐饮订单已处理=19
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 付款时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PaymentTime",DTOPropertyName="PaymentTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PaymentTime
        {
            get
            {
                return _PaymentTime;
            }
            set
            {
    
                if (_PaymentTime != value)
                {
                          
                _PaymentTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PaymentTime;
        
    
        /// <summary>
        /// 付款价格，包含运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RealPrice",DTOPropertyName="RealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RealPrice
        {
            get
            {
                return _RealPrice;
            }
            set
            {
    
                if (_RealPrice != value)
                {
                          
                _RealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RealPrice;
        
    
        /// <summary>
        /// 确认收货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ConfirmTime",DTOPropertyName="ConfirmTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ConfirmTime
        {
            get
            {
                return _ConfirmTime;
            }
            set
            {
    
                if (_ConfirmTime != value)
                {
                          
                _ConfirmTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ConfirmTime;
        
    
        /// <summary>
        /// 发货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipmentsTime",DTOPropertyName="ShipmentsTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ShipmentsTime
        {
            get
            {
                return _ShipmentsTime;
            }
            set
            {
    
                if (_ShipmentsTime != value)
                {
                          
                _ShipmentsTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ShipmentsTime;
        
    
        /// <summary>
        /// 收货人姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiptUserName",DTOPropertyName="ReceiptUserName",IsRequired=true, IsSerializable = true)]
        public string ReceiptUserName
        {
            get
            {
                return _ReceiptUserName;
            }
            set
            {
    
                if (_ReceiptUserName != value)
                {
                          
                _ReceiptUserName = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiptUserName;
        
    
        /// <summary>
        /// 收货人电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiptPhone",DTOPropertyName="ReceiptPhone",IsRequired=true, IsSerializable = true)]
        public string ReceiptPhone
        {
            get
            {
                return _ReceiptPhone;
            }
            set
            {
    
                if (_ReceiptPhone != value)
                {
                          
                _ReceiptPhone = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiptPhone;
        
    
        /// <summary>
        /// 收货人地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiptAddress",DTOPropertyName="ReceiptAddress",IsRequired=true, IsSerializable = true)]
        public string ReceiptAddress
        {
            get
            {
                return _ReceiptAddress;
            }
            set
            {
    
                if (_ReceiptAddress != value)
                {
                          
                _ReceiptAddress = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiptAddress;
        
    
        /// <summary>
        /// 买家备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 付款方式:金币=0，到付=1，支付宝=2,在线支付=3支付宝担保4:U付;支付宝直接到账=1003；U付直接到账=1004）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Payment",DTOPropertyName="Payment",IsRequired=true, IsSerializable = true)]
        public int Payment
        {
            get
            {
                return _Payment;
            }
            set
            {
    
                if (_Payment != value)
                {
                          
                _Payment = value; 
               
           		}
    		}
     	}
    
     	private int _Payment;
        
    
        /// <summary>
        /// 卖家回复信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MessageToBuyer",DTOPropertyName="MessageToBuyer",IsRequired=false, IsSerializable = true)]
        public string MessageToBuyer
        {
            get
            {
                return _MessageToBuyer;
            }
            set
            {
    
                if (_MessageToBuyer != value)
                {
                          
                _MessageToBuyer = value; 
               
           		}
    		}
     	}
    
     	private string _MessageToBuyer;
        
    
        /// <summary>
        /// 省（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Province",DTOPropertyName="Province",IsRequired=true, IsSerializable = true)]
        public string Province
        {
            get
            {
                return _Province;
            }
            set
            {
    
                if (_Province != value)
                {
                          
                _Province = value; 
               
           		}
    		}
     	}
    
     	private string _Province;
        
    
        /// <summary>
        /// 市
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="City",DTOPropertyName="City",IsRequired=true, IsSerializable = true)]
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
    
                if (_City != value)
                {
                          
                _City = value; 
               
           		}
    		}
     	}
    
     	private string _City;
        
    
        /// <summary>
        /// 区
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="District",DTOPropertyName="District",IsRequired=true, IsSerializable = true)]
        public string District
        {
            get
            {
                return _District;
            }
            set
            {
    
                if (_District != value)
                {
                          
                _District = value; 
               
           		}
    		}
     	}
    
     	private string _District;
        
    
        /// <summary>
        /// 是否修改过实收总价:true=修改过，false=未修改过
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsModifiedPrice",DTOPropertyName="IsModifiedPrice",IsRequired=true, IsSerializable = true)]
        public bool IsModifiedPrice
        {
            get
            {
                return _IsModifiedPrice;
            }
            set
            {
    
                if (_IsModifiedPrice != value)
                {
                          
                _IsModifiedPrice = value; 
               
           		}
    		}
     	}
    
     	private bool _IsModifiedPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 真实支付状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PaymentState",DTOPropertyName="PaymentState",IsRequired=true, IsSerializable = true)]
        public bool PaymentState
        {
            get
            {
                return _PaymentState;
            }
            set
            {
    
                if (_PaymentState != value)
                {
                          
                _PaymentState = value; 
               
           		}
    		}
     	}
    
     	private bool _PaymentState;
        
    
        /// <summary>
        /// 邮编
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RecipientsZipCode",DTOPropertyName="RecipientsZipCode",IsRequired=false, IsSerializable = true)]
        public string RecipientsZipCode
        {
            get
            {
                return _RecipientsZipCode;
            }
            set
            {
    
                if (_RecipientsZipCode != value)
                {
                          
                _RecipientsZipCode = value; 
               
           		}
    		}
     	}
    
     	private string _RecipientsZipCode;
        
    
        /// <summary>
        /// 0：广告，1：好运来，2：CPS,,3：（图文类）启动页广告,4:（图文类）主页展示,5: （图文类）正文展示,6:红包,7:（商贸App）启动页广告,8:（商贸App）商品详情页,9:（商贸App）优惠促销页,10:（音视频）启动页广告,11:（音视频）故事列表页,&#xA;12:（音视频）听故事页,13:（音视频）分类列表页,14:（音视频）推广链接,15:（沟通App）启动页广告,16:（沟通App）PC:推广连接广告,17:（沟通App）PC:会话banner,18:（沟通App）PC:会话右边框,19:广告墙,20:应用墙,21:好运来,22:（音视频）视频播放前广告,&#xA;23:（音视频）视频播放后广告,24:（音视频）暂停广告,25:(图文)信息流广告,26: (图文)信息列表通栏广告,27:问答广告,28:商品墙,29:精确营销,30:Android本地APP，31:IOS本地APP,32:广场,33:分享订单34分享商品35图文嵌电商,36:厂家直营,&#xA;37:AndroidWeb，38:IOSWeb
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SrcType",DTOPropertyName="SrcType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> SrcType
        {
            get
            {
                return _SrcType;
            }
            set
            {
    
                if (_SrcType != value)
                {
                          
                _SrcType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _SrcType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SrcTagId",DTOPropertyName="SrcTagId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SrcTagId
        {
            get
            {
                return _SrcTagId;
            }
            set
            {
    
                if (_SrcTagId != value)
                {
                          
                _SrcTagId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SrcTagId;
        
    
        /// <summary>
        /// CPSId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CPSId",DTOPropertyName="CPSId",IsRequired=false, IsSerializable = true)]
        public string CPSId
        {
            get
            {
                return _CPSId;
            }
            set
            {
    
                if (_CPSId != value)
                {
                          
                _CPSId = value; 
               
           		}
    		}
     	}
    
     	private string _CPSId;
        
    
        /// <summary>
        /// 取消订单原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CancelReason",DTOPropertyName="CancelReason",IsRequired=false, IsSerializable = true)]
        public string CancelReason
        {
            get
            {
                return _CancelReason;
            }
            set
            {
    
                if (_CancelReason != value)
                {
                          
                _CancelReason = value; 
               
           		}
    		}
     	}
    
     	private string _CancelReason = "";
        
    
        /// <summary>
        /// 物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipExpCo",DTOPropertyName="ShipExpCo",IsRequired=false, IsSerializable = true)]
        public string ShipExpCo
        {
            get
            {
                return _ShipExpCo;
            }
            set
            {
    
                if (_ShipExpCo != value)
                {
                          
                _ShipExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _ShipExpCo;
        
    
        /// <summary>
        /// 快递单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpOrderNo",DTOPropertyName="ExpOrderNo",IsRequired=false, IsSerializable = true)]
        public string ExpOrderNo
        {
            get
            {
                return _ExpOrderNo;
            }
            set
            {
    
                if (_ExpOrderNo != value)
                {
                          
                _ExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpOrderNo;
        
    
        /// <summary>
        /// 是否延迟收货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDelayConfirmTime",DTOPropertyName="IsDelayConfirmTime",IsRequired=true, IsSerializable = true)]
        public bool IsDelayConfirmTime
        {
            get
            {
                return _IsDelayConfirmTime;
            }
            set
            {
    
                if (_IsDelayConfirmTime != value)
                {
                          
                _IsDelayConfirmTime = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDelayConfirmTime;
        
    
        /// <summary>
        /// 运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Freight",DTOPropertyName="Freight",IsRequired=true, IsSerializable = true)]
        public decimal Freight
        {
            get
            {
                return _Freight;
            }
            set
            {
    
                if (_Freight != value)
                {
                          
                _Freight = value; 
               
           		}
    		}
     	}
    
     	private decimal _Freight;
        
    
        /// <summary>
        /// 是否退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsRefund",DTOPropertyName="IsRefund",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsRefund
        {
            get
            {
                return _IsRefund;
            }
            set
            {
    
                if (_IsRefund != value)
                {
                          
                _IsRefund = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsRefund;
        
    
        /// <summary>
        /// 0没有删除1客户删除2商家删除3客户商家同时删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public int IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private int _IsDel = 0;
        
    
        /// <summary>
        /// 申请退款时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundTime",DTOPropertyName="RefundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> RefundTime
        {
            get
            {
                return _RefundTime;
            }
            set
            {
    
                if (_RefundTime != value)
                {
                          
                _RefundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _RefundTime;
        
    
        /// <summary>
        /// 达成协议时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AgreementTime",DTOPropertyName="AgreementTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> AgreementTime
        {
            get
            {
                return _AgreementTime;
            }
            set
            {
    
                if (_AgreementTime != value)
                {
                          
                _AgreementTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _AgreementTime;
        
    
        /// <summary>
        /// 卖家备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SellersRemark",DTOPropertyName="SellersRemark",IsRequired=false, IsSerializable = true)]
        public string SellersRemark
        {
            get
            {
                return _SellersRemark;
            }
            set
            {
    
                if (_SellersRemark != value)
                {
                          
                _SellersRemark = value; 
               
           		}
    		}
     	}
    
     	private string _SellersRemark;
        
    
        /// <summary>
        /// 众销佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Commission",DTOPropertyName="Commission",IsRequired=true, IsSerializable = true)]
        public decimal Commission
        {
            get
            {
                return _Commission;
            }
            set
            {
    
                if (_Commission != value)
                {
                          
                _Commission = value; 
               
           		}
    		}
     	}
    
     	private decimal _Commission;
        
    
        /// <summary>
        /// 是否参加众筹 ： 0：非众筹，1：众筹进行中，2：众筹成功
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsCrowdfunding",DTOPropertyName="IsCrowdfunding",IsRequired=true, IsSerializable = true)]
        public int IsCrowdfunding
        {
            get
            {
                return _IsCrowdfunding;
            }
            set
            {
    
                if (_IsCrowdfunding != value)
                {
                          
                _IsCrowdfunding = value; 
               
           		}
    		}
     	}
    
     	private int _IsCrowdfunding;
        
    
        /// <summary>
        /// 众筹有效金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrowdfundingPrice",DTOPropertyName="CrowdfundingPrice",IsRequired=true, IsSerializable = true)]
        public decimal CrowdfundingPrice
        {
            get
            {
                return _CrowdfundingPrice;
            }
            set
            {
    
                if (_CrowdfundingPrice != value)
                {
                          
                _CrowdfundingPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _CrowdfundingPrice;
        
    
        /// <summary>
        /// 金币付款金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GoldPrice",DTOPropertyName="GoldPrice",IsRequired=true, IsSerializable = true)]
        public decimal GoldPrice
        {
            get
            {
                return _GoldPrice;
            }
            set
            {
    
                if (_GoldPrice != value)
                {
                          
                _GoldPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _GoldPrice;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 代金券金额
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="GoldCoupon",DTOPropertyName="GoldCoupon",IsRequired=true, IsSerializable = true)]
        public decimal GoldCoupon
        {
            get
            {
                return _GoldCoupon;
            }
            set
            {
    
                if (_GoldCoupon != value)
                {
                          
                _GoldCoupon = value; 
               
           		}
    		}
     	}
    
     	private decimal _GoldCoupon;
        
    
        /// <summary>
        /// 自提标志，0：非自提，1：自提
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeFlag",DTOPropertyName="SelfTakeFlag",IsRequired=true, IsSerializable = true)]
        public int SelfTakeFlag
        {
            get
            {
                return _SelfTakeFlag;
            }
            set
            {
    
                if (_SelfTakeFlag != value)
                {
                          
                _SelfTakeFlag = value; 
               
           		}
    		}
     	}
    
     	private int _SelfTakeFlag;
        
    
        /// <summary>
        /// 推广者用户id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreaderId",DTOPropertyName="SpreaderId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SpreaderId
        {
            get
            {
                return _SpreaderId;
            }
            set
            {
    
                if (_SpreaderId != value)
                {
                          
                _SpreaderId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SpreaderId;
        
    
        /// <summary>
        /// 推广主分成（金币）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadGold",DTOPropertyName="SpreadGold",IsRequired=true, IsSerializable = true)]
        public long SpreadGold
        {
            get
            {
                return _SpreadGold;
            }
            set
            {
    
                if (_SpreadGold != value)
                {
                          
                _SpreadGold = value; 
               
           		}
    		}
     	}
    
     	private long _SpreadGold;
        
    
        /// <summary>
        /// 生成订单分享码（不一定有效）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadCode",DTOPropertyName="SpreadCode",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SpreadCode
        {
            get
            {
                return _SpreadCode;
            }
            set
            {
    
                if (_SpreadCode != value)
                {
                          
                _SpreadCode = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SpreadCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OwnerShare",DTOPropertyName="OwnerShare",IsRequired=true, IsSerializable = true)]
        public decimal OwnerShare
        {
            get
            {
                return _OwnerShare;
            }
            set
            {
    
                if (_OwnerShare != value)
                {
                          
                _OwnerShare = value; 
               
           		}
    		}
     	}
    
     	private decimal _OwnerShare;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SrcAppId",DTOPropertyName="SrcAppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SrcAppId
        {
            get
            {
                return _SrcAppId;
            }
            set
            {
    
                if (_SrcAppId != value)
                {
                          
                _SrcAppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SrcAppId;
        
    
        /// <summary>
        /// 0：未加积分，1已加积分
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreState",DTOPropertyName="ScoreState",IsRequired=true, IsSerializable = true)]
        public int ScoreState
        {
            get
            {
                return _ScoreState;
            }
            set
            {
    
                if (_ScoreState != value)
                {
                          
                _ScoreState = value; 
               
           		}
    		}
     	}
    
     	private int _ScoreState;
        
    
        /// <summary>
        /// 电商馆(商城)应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _EsAppId;
        
    
        /// <summary>
        /// 订单类型:0实体商品订单；1虚拟商品订单；2.餐饮订单；3(虚拟商品)易捷卡密订单
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderType",DTOPropertyName="OrderType",IsRequired=true, IsSerializable = true)]
        public int OrderType
        {
            get
            {
                return _OrderType;
            }
            set
            {
    
                if (_OrderType != value)
                {
                          
                _OrderType = value; 
               
           		}
    		}
     	}
    
     	private int _OrderType = 0;
        
    
        /// <summary>
        /// 服务Id（与btp订单的关联Id）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ServiceId",DTOPropertyName="ServiceId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ServiceId
        {
            get
            {
                return _ServiceId;
            }
            set
            {
    
                if (_ServiceId != value)
                {
                          
                _ServiceId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ServiceId;
        
    
        /// <summary>
        /// 分销商UserId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistributorId",DTOPropertyName="DistributorId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> DistributorId
        {
            get
            {
                return _DistributorId;
            }
            set
            {
    
                if (_DistributorId != value)
                {
                          
                _DistributorId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _DistributorId;
        
    
        /// <summary>
        /// 分销佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistributeMoney",DTOPropertyName="DistributeMoney",IsRequired=true, IsSerializable = true)]
        public decimal DistributeMoney
        {
            get
            {
                return _DistributeMoney;
            }
            set
            {
    
                if (_DistributeMoney != value)
                {
                          
                _DistributeMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _DistributeMoney = 0m;
        
    
        /// <summary>
        /// 上传图片路径
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=false, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 渠道推广码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaiCode",DTOPropertyName="SaiCode",IsRequired=false, IsSerializable = true)]
        public string SaiCode
        {
            get
            {
                return _SaiCode;
            }
            set
            {
    
                if (_SaiCode != value)
                {
                          
                _SaiCode = value; 
               
           		}
    		}
     	}
    
     	private string _SaiCode;
        
    
        /// <summary>
        /// 渠道分享佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChannelShareMoney",DTOPropertyName="ChannelShareMoney",IsRequired=true, IsSerializable = true)]
        public decimal ChannelShareMoney
        {
            get
            {
                return _ChannelShareMoney;
            }
            set
            {
    
                if (_ChannelShareMoney != value)
                {
                          
                _ChannelShareMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _ChannelShareMoney;
        
    
        /// <summary>
        /// 流水号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Batch",DTOPropertyName="Batch",IsRequired=false, IsSerializable = true)]
        public string Batch
        {
            get
            {
                return _Batch;
            }
            set
            {
    
                if (_Batch != value)
                {
                          
                _Batch = value; 
               
           		}
    		}
     	}
    
     	private string _Batch;
        
    
        /// <summary>
        /// 餐盒费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MealBoxFee",DTOPropertyName="MealBoxFee",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MealBoxFee
        {
            get
            {
                return _MealBoxFee;
            }
            set
            {
    
                if (_MealBoxFee != value)
                {
                          
                _MealBoxFee = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MealBoxFee = 0m;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=true, IsSerializable = true)]
        public decimal Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private decimal _Duty;
        
    
        /// <summary>
        /// 快递单打印次数
        /// </summary>
        /// <LongDescription>
        /// 快递单打印次数
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ExpressPrintCount",DTOPropertyName="ExpressPrintCount",IsRequired=false, IsSerializable = true)]
        public Nullable<int> ExpressPrintCount
        {
            get
            {
                return _ExpressPrintCount;
            }
            set
            {
    
                if (_ExpressPrintCount != value)
                {
                          
                _ExpressPrintCount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _ExpressPrintCount;
        
    
        /// <summary>
        /// 发货单打印次数
        /// </summary>
        /// <LongDescription>
        /// 发货单打印次数
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="InvoicePrintCount",DTOPropertyName="InvoicePrintCount",IsRequired=false, IsSerializable = true)]
        public Nullable<int> InvoicePrintCount
        {
            get
            {
                return _InvoicePrintCount;
            }
            set
            {
    
                if (_InvoicePrintCount != value)
                {
                          
                _InvoicePrintCount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _InvoicePrintCount;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 第一个字段的内容
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="FirstContent",DTOPropertyName="FirstContent",IsRequired=true, IsSerializable = true)]
        public string FirstContent
        {
            get
            {
                return _FirstContent;
            }
            set
            {
    
                if (_FirstContent != value)
                {
                          
                _FirstContent = value; 
               
           		}
    		}
     	}
    
     	private string _FirstContent;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 第二个字段的内容
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="SecondContent",DTOPropertyName="SecondContent",IsRequired=true, IsSerializable = true)]
        public string SecondContent
        {
            get
            {
                return _SecondContent;
            }
            set
            {
    
                if (_SecondContent != value)
                {
                          
                _SecondContent = value; 
               
           		}
    		}
     	}
    
     	private string _SecondContent;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 第三个字段的内容
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ThirdContent",DTOPropertyName="ThirdContent",IsRequired=true, IsSerializable = true)]
        public string ThirdContent
        {
            get
            {
                return _ThirdContent;
            }
            set
            {
    
                if (_ThirdContent != value)
                {
                          
                _ThirdContent = value; 
               
           		}
    		}
     	}
    
     	private string _ThirdContent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Street",DTOPropertyName="Street",IsRequired=false, IsSerializable = true)]
        public string Street
        {
            get
            {
                return _Street;
            }
            set
            {
    
                if (_Street != value)
                {
                          
                _Street = value; 
               
           		}
    		}
     	}
    
     	private string _Street;
        
    
        /// <summary>
        /// 退款原因编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CancelReasonCode",DTOPropertyName="CancelReasonCode",IsRequired=false, IsSerializable = true)]
        public Nullable<short> CancelReasonCode
        {
            get
            {
                return _CancelReasonCode;
            }
            set
            {
    
                if (_CancelReasonCode != value)
                {
                          
                _CancelReasonCode = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _CancelReasonCode;
        
    
        /// <summary>
        /// 优惠套装活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SetMealId",DTOPropertyName="SetMealId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SetMealId
        {
            get
            {
                return _SetMealId;
            }
            set
            {
    
                if (_SetMealId != value)
                {
                          
                _SetMealId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SetMealId;
        
    
        /// <summary>
        /// 商家应用名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 供应商名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierName",DTOPropertyName="SupplierName",IsRequired=false, IsSerializable = true)]
        public string SupplierName
        {
            get
            {
                return _SupplierName;
            }
            set
            {
    
                if (_SupplierName != value)
                {
                          
                _SupplierName = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierName;
        
    
        /// <summary>
        /// 供应商编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierCode",DTOPropertyName="SupplierCode",IsRequired=false, IsSerializable = true)]
        public string SupplierCode
        {
            get
            {
                return _SupplierCode;
            }
            set
            {
    
                if (_SupplierCode != value)
                {
                          
                _SupplierCode = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierCode;
        
    
        /// <summary>
        /// 供应商类型（0-自营他配；1-第三方；2-自营自配自采；3-自营自配统采）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierType",DTOPropertyName="SupplierType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> SupplierType
        {
            get
            {
                return _SupplierType;
            }
            set
            {
    
                if (_SupplierType != value)
                {
                          
                _SupplierType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _SupplierType;
        
    
        /// <summary>
        /// 供应商发货方类型（0-商家自选物流 1-京东发货）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipperType",DTOPropertyName="ShipperType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> ShipperType
        {
            get
            {
                return _ShipperType;
            }
            set
            {
    
                if (_ShipperType != value)
                {
                          
                _ShipperType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _ShipperType;
        
    
        /// <summary>
        /// 商家类型（0-自营他配；1-第三方；2-自营自配自采；3-自营自配统采）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppType",DTOPropertyName="AppType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> AppType
        {
            get
            {
                return _AppType;
            }
            set
            {
    
                if (_AppType != value)
                {
                          
                _AppType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _AppType;
        
    
        /// <summary>
        /// 金采团购活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JcActivityId",DTOPropertyName="JcActivityId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> JcActivityId
        {
            get
            {
                return _JcActivityId;
            }
            set
            {
    
                if (_JcActivityId != value)
                {
                          
                _JcActivityId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _JcActivityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HasStatisYJInfo",DTOPropertyName="HasStatisYJInfo",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> HasStatisYJInfo
        {
            get
            {
                return _HasStatisYJInfo;
            }
            set
            {
    
                if (_HasStatisYJInfo != value)
                {
                          
                _HasStatisYJInfo = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _HasStatisYJInfo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TechSpecs",DTOPropertyName="TechSpecs",IsRequired=false, IsSerializable = true)]
        public string TechSpecs
        {
            get
            {
                return _TechSpecs;
            }
            set
            {
    
                if (_TechSpecs != value)
                {
                          
                _TechSpecs = value; 
               
           		}
    		}
     	}
    
     	private string _TechSpecs;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleService",DTOPropertyName="SaleService",IsRequired=false, IsSerializable = true)]
        public string SaleService
        {
            get
            {
                return _SaleService;
            }
            set
            {
    
                if (_SaleService != value)
                {
                          
                _SaleService = value; 
               
           		}
    		}
     	}
    
     	private string _SaleService;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryTime",DTOPropertyName="DeliveryTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> DeliveryTime
        {
            get
            {
                return _DeliveryTime;
            }
            set
            {
    
                if (_DeliveryTime != value)
                {
                          
                _DeliveryTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _DeliveryTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryDays",DTOPropertyName="DeliveryDays",IsRequired=false, IsSerializable = true)]
        public Nullable<int> DeliveryDays
        {
            get
            {
                return _DeliveryDays;
            }
            set
            {
    
                if (_DeliveryDays != value)
                {
                          
                _DeliveryDays = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _DeliveryDays;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityOrderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityOrderDTO dto = srcDTO as CommodityOrderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Price = dto.Price;
    								
    				 this.State = dto.State;
    								
    				 this.PaymentTime = dto.PaymentTime;
    								
    				 this.RealPrice = dto.RealPrice;
    								
    				 this.ConfirmTime = dto.ConfirmTime;
    								
    				 this.ShipmentsTime = dto.ShipmentsTime;
    								
    				 this.ReceiptUserName = dto.ReceiptUserName;
    								
    				 this.ReceiptPhone = dto.ReceiptPhone;
    								
    				 this.ReceiptAddress = dto.ReceiptAddress;
    								
    				 this.Details = dto.Details;
    								
    				 this.Payment = dto.Payment;
    								
    				 this.MessageToBuyer = dto.MessageToBuyer;
    								
    				 this.Province = dto.Province;
    								
    				 this.City = dto.City;
    								
    				 this.District = dto.District;
    								
    				 this.IsModifiedPrice = dto.IsModifiedPrice;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.PaymentState = dto.PaymentState;
    								
    				 this.RecipientsZipCode = dto.RecipientsZipCode;
    								
    				 this.SrcType = dto.SrcType;
    								
    				 this.SrcTagId = dto.SrcTagId;
    								
    				 this.CPSId = dto.CPSId;
    								
    				 this.CancelReason = dto.CancelReason;
    								
    				 this.ShipExpCo = dto.ShipExpCo;
    								
    				 this.ExpOrderNo = dto.ExpOrderNo;
    								
    				 this.IsDelayConfirmTime = dto.IsDelayConfirmTime;
    								
    				 this.Freight = dto.Freight;
    								
    				 this.IsRefund = dto.IsRefund;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.RefundTime = dto.RefundTime;
    								
    				 this.AgreementTime = dto.AgreementTime;
    								
    				 this.SellersRemark = dto.SellersRemark;
    								
    				 this.Commission = dto.Commission;
    								
    				 this.IsCrowdfunding = dto.IsCrowdfunding;
    								
    				 this.CrowdfundingPrice = dto.CrowdfundingPrice;
    								
    				 this.GoldPrice = dto.GoldPrice;
    								
    				 this.GoldCoupon = dto.GoldCoupon;
    								
    				 this.SelfTakeFlag = dto.SelfTakeFlag;
    								
    				 this.SpreaderId = dto.SpreaderId;
    								
    				 this.SpreadGold = dto.SpreadGold;
    								
    				 this.SpreadCode = dto.SpreadCode;
    								
    				 this.OwnerShare = dto.OwnerShare;
    								
    				 this.SrcAppId = dto.SrcAppId;
    								
    				 this.ScoreState = dto.ScoreState;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.OrderType = dto.OrderType;
    								
    				 this.ServiceId = dto.ServiceId;
    								
    				 this.DistributorId = dto.DistributorId;
    								
    				 this.DistributeMoney = dto.DistributeMoney;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.SaiCode = dto.SaiCode;
    								
    				 this.ChannelShareMoney = dto.ChannelShareMoney;
    								
    				 this.Batch = dto.Batch;
    								
    				 this.MealBoxFee = dto.MealBoxFee;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.ExpressPrintCount = dto.ExpressPrintCount;
    								
    				 this.InvoicePrintCount = dto.InvoicePrintCount;
    								
    				 this.FirstContent = dto.FirstContent;
    								
    				 this.SecondContent = dto.SecondContent;
    								
    				 this.ThirdContent = dto.ThirdContent;
    								
    				 this.Street = dto.Street;
    								
    				 this.CancelReasonCode = dto.CancelReasonCode;
    								
    				 this.SetMealId = dto.SetMealId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.SupplierName = dto.SupplierName;
    								
    				 this.SupplierCode = dto.SupplierCode;
    								
    				 this.SupplierType = dto.SupplierType;
    								
    				 this.ShipperType = dto.ShipperType;
    								
    				 this.AppType = dto.AppType;
    								
    				 this.JcActivityId = dto.JcActivityId;
    								
    				 this.HasStatisYJInfo = dto.HasStatisYJInfo;
    								
    				 this.TechSpecs = dto.TechSpecs;
    								
    				 this.SaleService = dto.SaleService;
    								
    				 this.DeliveryTime = dto.DeliveryTime;
    								
    				 this.DeliveryDays = dto.DeliveryDays;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityOrderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityOrderDTO();
                base.ToBEData(ref todto);
    			CommodityOrderDTO dto = todto as CommodityOrderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Price = this.Price;
    								
    				 dto.State = this.State;
    								
    				 dto.PaymentTime = this.PaymentTime;
    								
    				 dto.RealPrice = this.RealPrice;
    								
    				 dto.ConfirmTime = this.ConfirmTime;
    								
    				 dto.ShipmentsTime = this.ShipmentsTime;
    								
    				 dto.ReceiptUserName = this.ReceiptUserName;
    								
    				 dto.ReceiptPhone = this.ReceiptPhone;
    								
    				 dto.ReceiptAddress = this.ReceiptAddress;
    								
    				 dto.Details = this.Details;
    								
    				 dto.Payment = this.Payment;
    								
    				 dto.MessageToBuyer = this.MessageToBuyer;
    								
    				 dto.Province = this.Province;
    								
    				 dto.City = this.City;
    								
    				 dto.District = this.District;
    								
    				 dto.IsModifiedPrice = this.IsModifiedPrice;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.PaymentState = this.PaymentState;
    								
    				 dto.RecipientsZipCode = this.RecipientsZipCode;
    								
    				 dto.SrcType = this.SrcType;
    								
    				 dto.SrcTagId = this.SrcTagId;
    								
    				 dto.CPSId = this.CPSId;
    								
    				 dto.CancelReason = this.CancelReason;
    								
    				 dto.ShipExpCo = this.ShipExpCo;
    								
    				 dto.ExpOrderNo = this.ExpOrderNo;
    								
    				 dto.IsDelayConfirmTime = this.IsDelayConfirmTime;
    								
    				 dto.Freight = this.Freight;
    								
    				 dto.IsRefund = this.IsRefund;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.RefundTime = this.RefundTime;
    								
    				 dto.AgreementTime = this.AgreementTime;
    								
    				 dto.SellersRemark = this.SellersRemark;
    								
    				 dto.Commission = this.Commission;
    								
    				 dto.IsCrowdfunding = this.IsCrowdfunding;
    								
    				 dto.CrowdfundingPrice = this.CrowdfundingPrice;
    								
    				 dto.GoldPrice = this.GoldPrice;
    								
    				 dto.GoldCoupon = this.GoldCoupon;
    								
    				 dto.SelfTakeFlag = this.SelfTakeFlag;
    								
    				 dto.SpreaderId = this.SpreaderId;
    								
    				 dto.SpreadGold = this.SpreadGold;
    								
    				 dto.SpreadCode = this.SpreadCode;
    								
    				 dto.OwnerShare = this.OwnerShare;
    								
    				 dto.SrcAppId = this.SrcAppId;
    								
    				 dto.ScoreState = this.ScoreState;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.OrderType = this.OrderType;
    								
    				 dto.ServiceId = this.ServiceId;
    								
    				 dto.DistributorId = this.DistributorId;
    								
    				 dto.DistributeMoney = this.DistributeMoney;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.SaiCode = this.SaiCode;
    								
    				 dto.ChannelShareMoney = this.ChannelShareMoney;
    								
    				 dto.Batch = this.Batch;
    								
    				 dto.MealBoxFee = this.MealBoxFee;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.ExpressPrintCount = this.ExpressPrintCount;
    								
    				 dto.InvoicePrintCount = this.InvoicePrintCount;
    								
    				 dto.FirstContent = this.FirstContent;
    								
    				 dto.SecondContent = this.SecondContent;
    								
    				 dto.ThirdContent = this.ThirdContent;
    								
    				 dto.Street = this.Street;
    								
    				 dto.CancelReasonCode = this.CancelReasonCode;
    								
    				 dto.SetMealId = this.SetMealId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.SupplierName = this.SupplierName;
    								
    				 dto.SupplierCode = this.SupplierCode;
    								
    				 dto.SupplierType = this.SupplierType;
    								
    				 dto.ShipperType = this.ShipperType;
    								
    				 dto.AppType = this.AppType;
    								
    				 dto.JcActivityId = this.JcActivityId;
    								
    				 dto.HasStatisYJInfo = this.HasStatisYJInfo;
    								
    				 dto.TechSpecs = this.TechSpecs;
    								
    				 dto.SaleService = this.SaleService;
    								
    				 dto.DeliveryTime = this.DeliveryTime;
    								
    				 dto.DeliveryDays = this.DeliveryDays;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单异常记录
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityOrderException",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityOrderExceptionDTO))]
    public partial class CommodityOrderException: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityOrderException ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 实际结算金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRealPrice",DTOPropertyName="OrderRealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> OrderRealPrice
        {
            get
            {
                return _OrderRealPrice;
            }
            set
            {
    
                if (_OrderRealPrice != value)
                {
                          
                _OrderRealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _OrderRealPrice;
        
    
        /// <summary>
        /// 厂家结算金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ClearingPrice",DTOPropertyName="ClearingPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ClearingPrice
        {
            get
            {
                return _ClearingPrice;
            }
            set
            {
    
                if (_ClearingPrice != value)
                {
                          
                _ClearingPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ClearingPrice;
        
    
        /// <summary>
        /// 异常类型 0：未设置结算价，1：订单金额不够给商家分，2：订单金额不够分成
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExceptionType",DTOPropertyName="ExceptionType",IsRequired=true, IsSerializable = true)]
        public int ExceptionType
        {
            get
            {
                return _ExceptionType;
            }
            set
            {
    
                if (_ExceptionType != value)
                {
                          
                _ExceptionType = value; 
               
           		}
    		}
     	}
    
     	private int _ExceptionType;
        
    
        /// <summary>
        /// 异常原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExceptionReason",DTOPropertyName="ExceptionReason",IsRequired=false, IsSerializable = true)]
        public string ExceptionReason
        {
            get
            {
                return _ExceptionReason;
            }
            set
            {
    
                if (_ExceptionReason != value)
                {
                          
                _ExceptionReason = value; 
               
           		}
    		}
     	}
    
     	private string _ExceptionReason;
        
    
        /// <summary>
        /// AppId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// App名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Note",DTOPropertyName="Note",IsRequired=false, IsSerializable = true)]
        public string Note
        {
            get
            {
                return _Note;
            }
            set
            {
    
                if (_Note != value)
                {
                          
                _Note = value; 
               
           		}
    		}
     	}
    
     	private string _Note;
        
    
        /// <summary>
        /// 异常发生时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExceptionTime",DTOPropertyName="ExceptionTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ExceptionTime
        {
            get
            {
                return _ExceptionTime;
            }
            set
            {
    
                if (_ExceptionTime != value)
                {
                          
                _ExceptionTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ExceptionTime;
        
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 更新时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityOrderExceptionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityOrderExceptionDTO dto = srcDTO as CommodityOrderExceptionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderRealPrice = dto.OrderRealPrice;
    								
    				 this.ClearingPrice = dto.ClearingPrice;
    								
    				 this.ExceptionType = dto.ExceptionType;
    								
    				 this.ExceptionReason = dto.ExceptionReason;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.State = dto.State;
    								
    				 this.Note = dto.Note;
    								
    				 this.ExceptionTime = dto.ExceptionTime;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityOrderExceptionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityOrderExceptionDTO();
                base.ToBEData(ref todto);
    			CommodityOrderExceptionDTO dto = todto as CommodityOrderExceptionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderRealPrice = this.OrderRealPrice;
    								
    				 dto.ClearingPrice = this.ClearingPrice;
    								
    				 dto.ExceptionType = this.ExceptionType;
    								
    				 dto.ExceptionReason = this.ExceptionReason;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.State = this.State;
    								
    				 dto.Note = this.Note;
    								
    				 dto.ExceptionTime = this.ExceptionTime;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品订单服务表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityOrderService",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityOrderServiceDTO))]
    public partial class CommodityOrderService: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityOrderService ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 订单状态（必填）：确认收货=3，售后退款中=5,已退款=7，已发货退款中商家同意退款，商家未收到货=10 ,金和处理退款中=12 ,买家发货超时，商家未收到货=13,售后交易成功=15
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 售后终结时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _EndTime;
        
    
        /// <summary>
        /// 自提订单标志1：自提 0:非自提
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeFlag",DTOPropertyName="SelfTakeFlag",IsRequired=true, IsSerializable = true)]
        public int SelfTakeFlag
        {
            get
            {
                return _SelfTakeFlag;
            }
            set
            {
    
                if (_SelfTakeFlag != value)
                {
                          
                _SelfTakeFlag = value; 
               
           		}
    		}
     	}
    
     	private int _SelfTakeFlag;
        
    
        /// <summary>
        /// 修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 买家是否延迟收货时间，1:延长，0：未延长
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDelayConfirmTimeAfterSales",DTOPropertyName="IsDelayConfirmTimeAfterSales",IsRequired=true, IsSerializable = true)]
        public bool IsDelayConfirmTimeAfterSales
        {
            get
            {
                return _IsDelayConfirmTimeAfterSales;
            }
            set
            {
    
                if (_IsDelayConfirmTimeAfterSales != value)
                {
                          
                _IsDelayConfirmTimeAfterSales = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDelayConfirmTimeAfterSales;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityOrderServiceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityOrderServiceDTO dto = srcDTO as CommodityOrderServiceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.State = dto.State;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.SelfTakeFlag = dto.SelfTakeFlag;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.IsDelayConfirmTimeAfterSales = dto.IsDelayConfirmTimeAfterSales;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityOrderServiceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityOrderServiceDTO();
                base.ToBEData(ref todto);
    			CommodityOrderServiceDTO dto = todto as CommodityOrderServiceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.State = this.State;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.SelfTakeFlag = this.SelfTakeFlag;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.IsDelayConfirmTimeAfterSales = this.IsDelayConfirmTimeAfterSales;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品价格浮动设置
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityPriceFloat",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityPriceFloatDTO))]
    public partial class CommodityPriceFloat: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityPriceFloat ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 商城Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 应用Id(多个,隔开)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppIds",DTOPropertyName="AppIds",IsRequired=false, IsSerializable = true)]
        public string AppIds
        {
            get
            {
                return _AppIds;
            }
            set
            {
    
                if (_AppIds != value)
                {
                          
                _AppIds = value; 
               
           		}
    		}
     	}
    
     	private string _AppIds;
        
    
        /// <summary>
        /// 浮动价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FloatPrice",DTOPropertyName="FloatPrice",IsRequired=true, IsSerializable = true)]
        public decimal FloatPrice
        {
            get
            {
                return _FloatPrice;
            }
            set
            {
    
                if (_FloatPrice != value)
                {
                          
                _FloatPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _FloatPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityPriceFloatDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityPriceFloatDTO dto = srcDTO as CommodityPriceFloatDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.AppIds = dto.AppIds;
    								
    				 this.FloatPrice = dto.FloatPrice;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityPriceFloatDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityPriceFloatDTO();
                base.ToBEData(ref todto);
    			CommodityPriceFloatDTO dto = todto as CommodityPriceFloatDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.AppIds = this.AppIds;
    								
    				 dto.FloatPrice = this.FloatPrice;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品结算价
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommoditySettleAmount",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommoditySettleAmountDTO))]
    public partial class CommoditySettleAmount: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommoditySettleAmount ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 用户名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=true, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 商家APPID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品类型（0-无属性 1-单属性 2-双属性）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityType",DTOPropertyName="CommodityType",IsRequired=true, IsSerializable = true)]
        public short CommodityType
        {
            get
            {
                return _CommodityType;
            }
            set
            {
    
                if (_CommodityType != value)
                {
                          
                _CommodityType = value; 
               
           		}
    		}
     	}
    
     	private short _CommodityType;
        
    
        /// <summary>
        /// 商品属性1名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityAttrName",DTOPropertyName="CommodityAttrName",IsRequired=false, IsSerializable = true)]
        public string CommodityAttrName
        {
            get
            {
                return _CommodityAttrName;
            }
            set
            {
    
                if (_CommodityAttrName != value)
                {
                          
                _CommodityAttrName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityAttrName;
        
    
        /// <summary>
        /// 商品属性2名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySecAttrName",DTOPropertyName="CommoditySecAttrName",IsRequired=false, IsSerializable = true)]
        public string CommoditySecAttrName
        {
            get
            {
                return _CommoditySecAttrName;
            }
            set
            {
    
                if (_CommoditySecAttrName != value)
                {
                          
                _CommoditySecAttrName = value; 
               
           		}
    		}
     	}
    
     	private string _CommoditySecAttrName;
        
    
        /// <summary>
        /// 商品属性结算价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityAttrJson",DTOPropertyName="CommodityAttrJson",IsRequired=false, IsSerializable = true)]
        public string CommodityAttrJson
        {
            get
            {
                return _CommodityAttrJson;
            }
            set
            {
    
                if (_CommodityAttrJson != value)
                {
                          
                _CommodityAttrJson = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityAttrJson;
        
    
        /// <summary>
        /// 生效时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EffectiveTime",DTOPropertyName="EffectiveTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EffectiveTime
        {
            get
            {
                return _EffectiveTime;
            }
            set
            {
    
                if (_EffectiveTime != value)
                {
                          
                _EffectiveTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EffectiveTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommoditySettleAmountDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommoditySettleAmountDTO dto = srcDTO as CommoditySettleAmountDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityType = dto.CommodityType;
    								
    				 this.CommodityAttrName = dto.CommodityAttrName;
    								
    				 this.CommoditySecAttrName = dto.CommoditySecAttrName;
    								
    				 this.CommodityAttrJson = dto.CommodityAttrJson;
    								
    				 this.EffectiveTime = dto.EffectiveTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommoditySettleAmountDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommoditySettleAmountDTO();
                base.ToBEData(ref todto);
    			CommoditySettleAmountDTO dto = todto as CommoditySettleAmountDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityType = this.CommodityType;
    								
    				 dto.CommodityAttrName = this.CommodityAttrName;
    								
    				 dto.CommoditySecAttrName = this.CommoditySecAttrName;
    								
    				 dto.CommodityAttrJson = this.CommodityAttrJson;
    								
    				 dto.EffectiveTime = this.EffectiveTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommoditySpecifications",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommoditySpecificationsDTO))]
    public partial class CommoditySpecifications: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommoditySpecifications ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Attribute",DTOPropertyName="Attribute",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Attribute
        {
            get
            {
                return _Attribute;
            }
            set
            {
    
                if (_Attribute != value)
                {
                          
                _Attribute = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Attribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommoditySpecificationsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommoditySpecificationsDTO dto = srcDTO as CommoditySpecificationsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.Attribute = dto.Attribute;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommoditySpecificationsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommoditySpecificationsDTO();
                base.ToBEData(ref todto);
    			CommoditySpecificationsDTO dto = todto as CommoditySpecificationsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.Attribute = this.Attribute;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityStock",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityStockDTO))]
    public partial class CommodityStock: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityStock ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品属性：[{&quot;Attribute&quot;:&quot;颜色&quot;,&quot;SecondAttribute&quot;:&quot;红&quot;},,{&quot;Attribute&quot;:&quot;尺寸&quot;,&quot;SecondAttribute&quot;:&quot;L&quot;}]
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=true, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 商品市场价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 商品条码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 商品编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=false, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 京东商品编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 进货货
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 缩略图
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ThumImg",DTOPropertyName="ThumImg",IsRequired=false, IsSerializable = true)]
        public string ThumImg
        {
            get
            {
                return _ThumImg;
            }
            set
            {
    
                if (_ThumImg != value)
                {
                          
                _ThumImg = value; 
               
           		}
    		}
     	}
    
     	private string _ThumImg;
        
    
        /// <summary>
        /// 轮播图
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CarouselImgs",DTOPropertyName="CarouselImgs",IsRequired=false, IsSerializable = true)]
        public string CarouselImgs
        {
            get
            {
                return _CarouselImgs;
            }
            set
            {
    
                if (_CarouselImgs != value)
                {
                          
                _CarouselImgs = value; 
               
           		}
    		}
     	}
    
     	private string _CarouselImgs;
        
    
        /// <summary>
        /// 商品状态：上架=0，未上架=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=false, IsSerializable = true)]
        public Nullable<int> State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _State;
        
    
        /// <summary>
        /// 石化二期系统商品编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ErQiCode",DTOPropertyName="ErQiCode",IsRequired=false, IsSerializable = true)]
        public string ErQiCode
        {
            get
            {
                return _ErQiCode;
            }
            set
            {
    
                if (_ErQiCode != value)
                {
                          
                _ErQiCode = value; 
               
           		}
    		}
     	}
    
     	private string _ErQiCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttrType",DTOPropertyName="ComAttrType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> ComAttrType
        {
            get
            {
                return _ComAttrType;
            }
            set
            {
    
                if (_ComAttrType != value)
                {
                          
                _ComAttrType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _ComAttrType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsSell",DTOPropertyName="IsSell",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsSell
        {
            get
            {
                return _IsSell;
            }
            set
            {
    
                if (_IsSell != value)
                {
                          
                _IsSell = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsSell;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityStockDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityStockDTO dto = srcDTO as CommodityStockDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.ThumImg = dto.ThumImg;
    								
    				 this.CarouselImgs = dto.CarouselImgs;
    								
    				 this.State = dto.State;
    								
    				 this.ErQiCode = dto.ErQiCode;
    								
    				 this.ComAttrType = dto.ComAttrType;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.IsSell = dto.IsSell;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityStockDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityStockDTO();
                base.ToBEData(ref todto);
    			CommodityStockDTO dto = todto as CommodityStockDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.ThumImg = this.ThumImg;
    								
    				 dto.CarouselImgs = this.CarouselImgs;
    								
    				 dto.State = this.State;
    								
    				 dto.ErQiCode = this.ErQiCode;
    								
    				 dto.ComAttrType = this.ComAttrType;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.IsSell = this.IsSell;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityTaxRate",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityTaxRateDTO))]
    public partial class CommodityTaxRate: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityTaxRate ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=false, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<double> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<double> _TaxRate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="KeyWord",DTOPropertyName="KeyWord",IsRequired=false, IsSerializable = true)]
        public string KeyWord
        {
            get
            {
                return _KeyWord;
            }
            set
            {
    
                if (_KeyWord != value)
                {
                          
                _KeyWord = value; 
               
           		}
    		}
     	}
    
     	private string _KeyWord;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsCombine",DTOPropertyName="IsCombine",IsRequired=false, IsSerializable = true)]
        public string IsCombine
        {
            get
            {
                return _IsCombine;
            }
            set
            {
    
                if (_IsCombine != value)
                {
                          
                _IsCombine = value; 
               
           		}
    		}
     	}
    
     	private string _IsCombine;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VersionCode",DTOPropertyName="VersionCode",IsRequired=false, IsSerializable = true)]
        public string VersionCode
        {
            get
            {
                return _VersionCode;
            }
            set
            {
    
                if (_VersionCode != value)
                {
                          
                _VersionCode = value; 
               
           		}
    		}
     	}
    
     	private string _VersionCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsUse",DTOPropertyName="IsUse",IsRequired=false, IsSerializable = true)]
        public string IsUse
        {
            get
            {
                return _IsUse;
            }
            set
            {
    
                if (_IsUse != value)
                {
                          
                _IsUse = value; 
               
           		}
    		}
     	}
    
     	private string _IsUse;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DutyState",DTOPropertyName="DutyState",IsRequired=false, IsSerializable = true)]
        public string DutyState
        {
            get
            {
                return _DutyState;
            }
            set
            {
    
                if (_DutyState != value)
                {
                          
                _DutyState = value; 
               
           		}
    		}
     	}
    
     	private string _DutyState;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Policy",DTOPropertyName="Policy",IsRequired=false, IsSerializable = true)]
        public string Policy
        {
            get
            {
                return _Policy;
            }
            set
            {
    
                if (_Policy != value)
                {
                          
                _Policy = value; 
               
           		}
    		}
     	}
    
     	private string _Policy;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PolicyCode",DTOPropertyName="PolicyCode",IsRequired=false, IsSerializable = true)]
        public string PolicyCode
        {
            get
            {
                return _PolicyCode;
            }
            set
            {
    
                if (_PolicyCode != value)
                {
                          
                _PolicyCode = value; 
               
           		}
    		}
     	}
    
     	private string _PolicyCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ConsumeState",DTOPropertyName="ConsumeState",IsRequired=false, IsSerializable = true)]
        public string ConsumeState
        {
            get
            {
                return _ConsumeState;
            }
            set
            {
    
                if (_ConsumeState != value)
                {
                          
                _ConsumeState = value; 
               
           		}
    		}
     	}
    
     	private string _ConsumeState;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ConsumePolicy",DTOPropertyName="ConsumePolicy",IsRequired=false, IsSerializable = true)]
        public string ConsumePolicy
        {
            get
            {
                return _ConsumePolicy;
            }
            set
            {
    
                if (_ConsumePolicy != value)
                {
                          
                _ConsumePolicy = value; 
               
           		}
    		}
     	}
    
     	private string _ConsumePolicy;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ConsumePolicyCode",DTOPropertyName="ConsumePolicyCode",IsRequired=false, IsSerializable = true)]
        public string ConsumePolicyCode
        {
            get
            {
                return _ConsumePolicyCode;
            }
            set
            {
    
                if (_ConsumePolicyCode != value)
                {
                          
                _ConsumePolicyCode = value; 
               
           		}
    		}
     	}
    
     	private string _ConsumePolicyCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TradeCode",DTOPropertyName="TradeCode",IsRequired=false, IsSerializable = true)]
        public Nullable<double> TradeCode
        {
            get
            {
                return _TradeCode;
            }
            set
            {
    
                if (_TradeCode != value)
                {
                          
                _TradeCode = value; 
               
           		}
    		}
     	}
    
     	private Nullable<double> _TradeCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CIQCategory",DTOPropertyName="CIQCategory",IsRequired=false, IsSerializable = true)]
        public string CIQCategory
        {
            get
            {
                return _CIQCategory;
            }
            set
            {
    
                if (_CIQCategory != value)
                {
                          
                _CIQCategory = value; 
               
           		}
    		}
     	}
    
     	private string _CIQCategory;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FiringTime",DTOPropertyName="FiringTime",IsRequired=false, IsSerializable = true)]
        public string FiringTime
        {
            get
            {
                return _FiringTime;
            }
            set
            {
    
                if (_FiringTime != value)
                {
                          
                _FiringTime = value; 
               
           		}
    		}
     	}
    
     	private string _FiringTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=false, IsSerializable = true)]
        public string EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private string _EndTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UpdateTime",DTOPropertyName="UpdateTime",IsRequired=false, IsSerializable = true)]
        public string UpdateTime
        {
            get
            {
                return _UpdateTime;
            }
            set
            {
    
                if (_UpdateTime != value)
                {
                          
                _UpdateTime = value; 
               
           		}
    		}
     	}
    
     	private string _UpdateTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityTaxRateDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityTaxRateDTO dto = srcDTO as CommodityTaxRateDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Content = dto.Content;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.KeyWord = dto.KeyWord;
    								
    				 this.IsCombine = dto.IsCombine;
    								
    				 this.VersionCode = dto.VersionCode;
    								
    				 this.IsUse = dto.IsUse;
    								
    				 this.DutyState = dto.DutyState;
    								
    				 this.Policy = dto.Policy;
    								
    				 this.PolicyCode = dto.PolicyCode;
    								
    				 this.ConsumeState = dto.ConsumeState;
    								
    				 this.ConsumePolicy = dto.ConsumePolicy;
    								
    				 this.ConsumePolicyCode = dto.ConsumePolicyCode;
    								
    				 this.TradeCode = dto.TradeCode;
    								
    				 this.CIQCategory = dto.CIQCategory;
    								
    				 this.FiringTime = dto.FiringTime;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.UpdateTime = dto.UpdateTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityTaxRateDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityTaxRateDTO();
                base.ToBEData(ref todto);
    			CommodityTaxRateDTO dto = todto as CommodityTaxRateDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Content = this.Content;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.KeyWord = this.KeyWord;
    								
    				 dto.IsCombine = this.IsCombine;
    								
    				 dto.VersionCode = this.VersionCode;
    								
    				 dto.IsUse = this.IsUse;
    								
    				 dto.DutyState = this.DutyState;
    								
    				 dto.Policy = this.Policy;
    								
    				 dto.PolicyCode = this.PolicyCode;
    								
    				 dto.ConsumeState = this.ConsumeState;
    								
    				 dto.ConsumePolicy = this.ConsumePolicy;
    								
    				 dto.ConsumePolicyCode = this.ConsumePolicyCode;
    								
    				 dto.TradeCode = this.TradeCode;
    								
    				 dto.CIQCategory = this.CIQCategory;
    								
    				 dto.FiringTime = this.FiringTime;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.UpdateTime = this.UpdateTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商贸用户
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CommodityUser",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CommodityUserDTO))]
    public partial class CommodityUser: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CommodityUser ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 用户头像
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HeadPic",DTOPropertyName="HeadPic",IsRequired=true, IsSerializable = true)]
        public string HeadPic
        {
            get
            {
                return _HeadPic;
            }
            set
            {
    
                if (_HeadPic != value)
                {
                          
                _HeadPic = value; 
               
           		}
    		}
     	}
    
     	private string _HeadPic;
        
    
        /// <summary>
        /// 用户昵称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=true, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 性别：男=0，女=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Sex",DTOPropertyName="Sex",IsRequired=true, IsSerializable = true)]
        public int Sex
        {
            get
            {
                return _Sex;
            }
            set
            {
    
                if (_Sex != value)
                {
                          
                _Sex = value; 
               
           		}
    		}
     	}
    
     	private int _Sex;
        
    
        /// <summary>
        /// 个人备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=true, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CommodityUserDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CommodityUserDTO dto = srcDTO as CommodityUserDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.HeadPic = dto.HeadPic;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.Sex = dto.Sex;
    								
    				 this.Details = dto.Details;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CommodityUserDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CommodityUserDTO();
                base.ToBEData(ref todto);
    			CommodityUserDTO dto = todto as CommodityUserDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.HeadPic = this.HeadPic;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.Sex = this.Sex;
    								
    				 dto.Details = this.Details;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹基本表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Crowdfunding",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CrowdfundingDTO))]
    public partial class Crowdfunding: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Crowdfunding ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 应用名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 每股金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PerShareMoney",DTOPropertyName="PerShareMoney",IsRequired=true, IsSerializable = true)]
        public decimal PerShareMoney
        {
            get
            {
                return _PerShareMoney;
            }
            set
            {
    
                if (_PerShareMoney != value)
                {
                          
                _PerShareMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _PerShareMoney;
        
    
        /// <summary>
        /// 每股分红比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DividendPercent",DTOPropertyName="DividendPercent",IsRequired=true, IsSerializable = true)]
        public decimal DividendPercent
        {
            get
            {
                return _DividendPercent;
            }
            set
            {
    
                if (_DividendPercent != value)
                {
                          
                _DividendPercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _DividendPercent;
        
    
        /// <summary>
        /// 众筹总股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareCount",DTOPropertyName="ShareCount",IsRequired=true, IsSerializable = true)]
        public long ShareCount
        {
            get
            {
                return _ShareCount;
            }
            set
            {
    
                if (_ShareCount != value)
                {
                          
                _ShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _ShareCount;
        
    
        /// <summary>
        /// 众筹开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StartTime",DTOPropertyName="StartTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
    
                if (_StartTime != value)
                {
                          
                _StartTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _StartTime;
        
    
        /// <summary>
        /// 0：进行中 ，1：众筹成功
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 众筹宣传语
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Slogan",DTOPropertyName="Slogan",IsRequired=true, IsSerializable = true)]
        public string Slogan
        {
            get
            {
                return _Slogan;
            }
            set
            {
    
                if (_Slogan != value)
                {
                          
                _Slogan = value; 
               
           		}
    		}
     	}
    
     	private string _Slogan;
        
    
        /// <summary>
        /// 众筹详细描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CrowdfundingDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CrowdfundingDTO dto = srcDTO as CrowdfundingDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.PerShareMoney = dto.PerShareMoney;
    								
    				 this.DividendPercent = dto.DividendPercent;
    								
    				 this.ShareCount = dto.ShareCount;
    								
    				 this.StartTime = dto.StartTime;
    								
    				 this.State = dto.State;
    								
    				 this.Slogan = dto.Slogan;
    								
    				 this.Description = dto.Description;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CrowdfundingDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CrowdfundingDTO();
                base.ToBEData(ref todto);
    			CrowdfundingDTO dto = todto as CrowdfundingDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.PerShareMoney = this.PerShareMoney;
    								
    				 dto.DividendPercent = this.DividendPercent;
    								
    				 dto.ShareCount = this.ShareCount;
    								
    				 dto.StartTime = this.StartTime;
    								
    				 dto.State = this.State;
    								
    				 dto.Slogan = this.Slogan;
    								
    				 dto.Description = this.Description;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹计数表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CrowdfundingCount",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CrowdfundingCountDTO))]
    public partial class CrowdfundingCount: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CrowdfundingCount ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 众筹基本表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrowdfundingId",DTOPropertyName="CrowdfundingId",IsRequired=true, IsSerializable = true)]
        public System.Guid CrowdfundingId
        {
            get
            {
                return _CrowdfundingId;
            }
            set
            {
    
                if (_CrowdfundingId != value)
                {
                          
                _CrowdfundingId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CrowdfundingId;
        
    
        /// <summary>
        /// 当前已募得股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentShareCount",DTOPropertyName="CurrentShareCount",IsRequired=true, IsSerializable = true)]
        public long CurrentShareCount
        {
            get
            {
                return _CurrentShareCount;
            }
            set
            {
    
                if (_CurrentShareCount != value)
                {
                          
                _CurrentShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _CurrentShareCount;
        
    
        /// <summary>
        /// 众筹总股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareCount",DTOPropertyName="ShareCount",IsRequired=true, IsSerializable = true)]
        public long ShareCount
        {
            get
            {
                return _ShareCount;
            }
            set
            {
    
                if (_ShareCount != value)
                {
                          
                _ShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _ShareCount;
        
    
        /// <summary>
        /// 总分红金额(暂未启用)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalDividend",DTOPropertyName="TotalDividend",IsRequired=true, IsSerializable = true)]
        public long TotalDividend
        {
            get
            {
                return _TotalDividend;
            }
            set
            {
    
                if (_TotalDividend != value)
                {
                          
                _TotalDividend = value; 
               
           		}
    		}
     	}
    
     	private long _TotalDividend;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CrowdfundingCountDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CrowdfundingCountDTO dto = srcDTO as CrowdfundingCountDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CrowdfundingId = dto.CrowdfundingId;
    								
    				 this.CurrentShareCount = dto.CurrentShareCount;
    								
    				 this.ShareCount = dto.ShareCount;
    								
    				 this.TotalDividend = dto.TotalDividend;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CrowdfundingCountDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CrowdfundingCountDTO();
                base.ToBEData(ref todto);
    			CrowdfundingCountDTO dto = todto as CrowdfundingCountDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CrowdfundingId = this.CrowdfundingId;
    								
    				 dto.CurrentShareCount = this.CurrentShareCount;
    								
    				 dto.ShareCount = this.ShareCount;
    								
    				 dto.TotalDividend = this.TotalDividend;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹每日统计
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CrowdfundingDaily",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CrowdfundingDailyDTO))]
    public partial class CrowdfundingDaily: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CrowdfundingDaily ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 众筹表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrowdfundingId",DTOPropertyName="CrowdfundingId",IsRequired=true, IsSerializable = true)]
        public System.Guid CrowdfundingId
        {
            get
            {
                return _CrowdfundingId;
            }
            set
            {
    
                if (_CrowdfundingId != value)
                {
                          
                _CrowdfundingId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CrowdfundingId;
        
    
        /// <summary>
        /// 每股分红比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DividendPercent",DTOPropertyName="DividendPercent",IsRequired=true, IsSerializable = true)]
        public decimal DividendPercent
        {
            get
            {
                return _DividendPercent;
            }
            set
            {
    
                if (_DividendPercent != value)
                {
                          
                _DividendPercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _DividendPercent;
        
    
        /// <summary>
        /// 当前已募得股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentShareCount",DTOPropertyName="CurrentShareCount",IsRequired=true, IsSerializable = true)]
        public long CurrentShareCount
        {
            get
            {
                return _CurrentShareCount;
            }
            set
            {
    
                if (_CurrentShareCount != value)
                {
                          
                _CurrentShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _CurrentShareCount;
        
    
        /// <summary>
        /// 统计日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CrowdfundingDailyDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CrowdfundingDailyDTO dto = srcDTO as CrowdfundingDailyDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CrowdfundingId = dto.CrowdfundingId;
    								
    				 this.DividendPercent = dto.DividendPercent;
    								
    				 this.CurrentShareCount = dto.CurrentShareCount;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CrowdfundingDailyDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CrowdfundingDailyDTO();
                base.ToBEData(ref todto);
    			CrowdfundingDailyDTO dto = todto as CrowdfundingDailyDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CrowdfundingId = this.CrowdfundingId;
    								
    				 dto.DividendPercent = this.DividendPercent;
    								
    				 dto.CurrentShareCount = this.CurrentShareCount;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 用户众筹统计表
    /// </summary>
    /// <LongDescription>
    /// 每个用户一条记录，记录用户的众筹收益概况
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.CrowdfundingStatistics",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.CrowdfundingStatisticsDTO))]
    public partial class CrowdfundingStatistics: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  CrowdfundingStatistics ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 用户参与众筹的数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrowdfundingCount",DTOPropertyName="CrowdfundingCount",IsRequired=true, IsSerializable = true)]
        public long CrowdfundingCount
        {
            get
            {
                return _CrowdfundingCount;
            }
            set
            {
    
                if (_CrowdfundingCount != value)
                {
                          
                _CrowdfundingCount = value; 
               
           		}
    		}
     	}
    
     	private long _CrowdfundingCount;
        
    
        /// <summary>
        /// 用户众筹累计分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Total",DTOPropertyName="Total",IsRequired=true, IsSerializable = true)]
        public long Total
        {
            get
            {
                return _Total;
            }
            set
            {
    
                if (_Total != value)
                {
                          
                _Total = value; 
               
           		}
    		}
     	}
    
     	private long _Total;
        
    
        /// <summary>
        /// 用户未领分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UnReceive",DTOPropertyName="UnReceive",IsRequired=true, IsSerializable = true)]
        public long UnReceive
        {
            get
            {
                return _UnReceive;
            }
            set
            {
    
                if (_UnReceive != value)
                {
                          
                _UnReceive = value; 
               
           		}
    		}
     	}
    
     	private long _UnReceive;
        
    
        /// <summary>
        /// 用户近一周分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Week",DTOPropertyName="Week",IsRequired=true, IsSerializable = true)]
        public long Week
        {
            get
            {
                return _Week;
            }
            set
            {
    
                if (_Week != value)
                {
                          
                _Week = value; 
               
           		}
    		}
     	}
    
     	private long _Week;
        
    
        /// <summary>
        /// 用户近一周未领分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UnReceiveWeek",DTOPropertyName="UnReceiveWeek",IsRequired=true, IsSerializable = true)]
        public long UnReceiveWeek
        {
            get
            {
                return _UnReceiveWeek;
            }
            set
            {
    
                if (_UnReceiveWeek != value)
                {
                          
                _UnReceiveWeek = value; 
               
           		}
    		}
     	}
    
     	private long _UnReceiveWeek;
        
    
        /// <summary>
        /// 前一天(昨日)分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastOneDay",DTOPropertyName="LastOneDay",IsRequired=true, IsSerializable = true)]
        public long LastOneDay
        {
            get
            {
                return _LastOneDay;
            }
            set
            {
    
                if (_LastOneDay != value)
                {
                          
                _LastOneDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastOneDay;
        
    
        /// <summary>
        /// 前两天分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastTwoDay",DTOPropertyName="LastTwoDay",IsRequired=true, IsSerializable = true)]
        public long LastTwoDay
        {
            get
            {
                return _LastTwoDay;
            }
            set
            {
    
                if (_LastTwoDay != value)
                {
                          
                _LastTwoDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastTwoDay;
        
    
        /// <summary>
        /// 前三天分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastThreeDay",DTOPropertyName="LastThreeDay",IsRequired=true, IsSerializable = true)]
        public long LastThreeDay
        {
            get
            {
                return _LastThreeDay;
            }
            set
            {
    
                if (_LastThreeDay != value)
                {
                          
                _LastThreeDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastThreeDay;
        
    
        /// <summary>
        /// 前四天分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastFourDay",DTOPropertyName="LastFourDay",IsRequired=true, IsSerializable = true)]
        public long LastFourDay
        {
            get
            {
                return _LastFourDay;
            }
            set
            {
    
                if (_LastFourDay != value)
                {
                          
                _LastFourDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastFourDay;
        
    
        /// <summary>
        /// 前五天分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastFiveDay",DTOPropertyName="LastFiveDay",IsRequired=true, IsSerializable = true)]
        public long LastFiveDay
        {
            get
            {
                return _LastFiveDay;
            }
            set
            {
    
                if (_LastFiveDay != value)
                {
                          
                _LastFiveDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastFiveDay;
        
    
        /// <summary>
        /// 前六天分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastSixDay",DTOPropertyName="LastSixDay",IsRequired=true, IsSerializable = true)]
        public long LastSixDay
        {
            get
            {
                return _LastSixDay;
            }
            set
            {
    
                if (_LastSixDay != value)
                {
                          
                _LastSixDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastSixDay;
        
    
        /// <summary>
        /// 前七天分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastSevenDay",DTOPropertyName="LastSevenDay",IsRequired=true, IsSerializable = true)]
        public long LastSevenDay
        {
            get
            {
                return _LastSevenDay;
            }
            set
            {
    
                if (_LastSevenDay != value)
                {
                          
                _LastSevenDay = value; 
               
           		}
    		}
     	}
    
     	private long _LastSevenDay;
        
    
        /// <summary>
        /// 统计日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,CrowdfundingStatisticsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                CrowdfundingStatisticsDTO dto = srcDTO as CrowdfundingStatisticsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.CrowdfundingCount = dto.CrowdfundingCount;
    								
    				 this.Total = dto.Total;
    								
    				 this.UnReceive = dto.UnReceive;
    								
    				 this.Week = dto.Week;
    								
    				 this.UnReceiveWeek = dto.UnReceiveWeek;
    								
    				 this.LastOneDay = dto.LastOneDay;
    								
    				 this.LastTwoDay = dto.LastTwoDay;
    								
    				 this.LastThreeDay = dto.LastThreeDay;
    								
    				 this.LastFourDay = dto.LastFourDay;
    								
    				 this.LastFiveDay = dto.LastFiveDay;
    								
    				 this.LastSixDay = dto.LastSixDay;
    								
    				 this.LastSevenDay = dto.LastSevenDay;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，CrowdfundingStatisticsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new CrowdfundingStatisticsDTO();
                base.ToBEData(ref todto);
    			CrowdfundingStatisticsDTO dto = todto as CrowdfundingStatisticsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.CrowdfundingCount = this.CrowdfundingCount;
    								
    				 dto.Total = this.Total;
    								
    				 dto.UnReceive = this.UnReceive;
    								
    				 dto.Week = this.Week;
    								
    				 dto.UnReceiveWeek = this.UnReceiveWeek;
    								
    				 dto.LastOneDay = this.LastOneDay;
    								
    				 dto.LastTwoDay = this.LastTwoDay;
    								
    				 dto.LastThreeDay = this.LastThreeDay;
    								
    				 dto.LastFourDay = this.LastFourDay;
    								
    				 dto.LastFiveDay = this.LastFiveDay;
    								
    				 dto.LastSixDay = this.LastSixDay;
    								
    				 dto.LastSevenDay = this.LastSevenDay;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 收货地址
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DeliveryAddress",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DeliveryAddressDTO))]
    public partial class DeliveryAddress: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DeliveryAddress ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 收货人姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RecipientsUserName",DTOPropertyName="RecipientsUserName",IsRequired=true, IsSerializable = true)]
        public string RecipientsUserName
        {
            get
            {
                return _RecipientsUserName;
            }
            set
            {
    
                if (_RecipientsUserName != value)
                {
                          
                _RecipientsUserName = value; 
               
           		}
    		}
     	}
    
     	private string _RecipientsUserName;
        
    
        /// <summary>
        /// 收货人电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RecipientsPhone",DTOPropertyName="RecipientsPhone",IsRequired=true, IsSerializable = true)]
        public string RecipientsPhone
        {
            get
            {
                return _RecipientsPhone;
            }
            set
            {
    
                if (_RecipientsPhone != value)
                {
                          
                _RecipientsPhone = value; 
               
           		}
    		}
     	}
    
     	private string _RecipientsPhone;
        
    
        /// <summary>
        /// 收货详细地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RecipientsAddress",DTOPropertyName="RecipientsAddress",IsRequired=true, IsSerializable = true)]
        public string RecipientsAddress
        {
            get
            {
                return _RecipientsAddress;
            }
            set
            {
    
                if (_RecipientsAddress != value)
                {
                          
                _RecipientsAddress = value; 
               
           		}
    		}
     	}
    
     	private string _RecipientsAddress;
        
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 是否默认:默认=True，非默认=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDefault",DTOPropertyName="IsDefault",IsRequired=true, IsSerializable = true)]
        public bool IsDefault
        {
            get
            {
                return _IsDefault;
            }
            set
            {
    
                if (_IsDefault != value)
                {
                          
                _IsDefault = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDefault;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 省
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Province",DTOPropertyName="Province",IsRequired=true, IsSerializable = true)]
        public string Province
        {
            get
            {
                return _Province;
            }
            set
            {
    
                if (_Province != value)
                {
                          
                _Province = value; 
               
           		}
    		}
     	}
    
     	private string _Province;
        
    
        /// <summary>
        /// 市
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="City",DTOPropertyName="City",IsRequired=true, IsSerializable = true)]
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
    
                if (_City != value)
                {
                          
                _City = value; 
               
           		}
    		}
     	}
    
     	private string _City;
        
    
        /// <summary>
        /// 区
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="District",DTOPropertyName="District",IsRequired=true, IsSerializable = true)]
        public string District
        {
            get
            {
                return _District;
            }
            set
            {
    
                if (_District != value)
                {
                          
                _District = value; 
               
           		}
    		}
     	}
    
     	private string _District;
        
    
        /// <summary>
        /// 邮编
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RecipientsZipCode",DTOPropertyName="RecipientsZipCode",IsRequired=false, IsSerializable = true)]
        public string RecipientsZipCode
        {
            get
            {
                return _RecipientsZipCode;
            }
            set
            {
    
                if (_RecipientsZipCode != value)
                {
                          
                _RecipientsZipCode = value; 
               
           		}
    		}
     	}
    
     	private string _RecipientsZipCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ProvinceCode",DTOPropertyName="ProvinceCode",IsRequired=true, IsSerializable = true)]
        public string ProvinceCode
        {
            get
            {
                return _ProvinceCode;
            }
            set
            {
    
                if (_ProvinceCode != value)
                {
                          
                _ProvinceCode = value; 
               
           		}
    		}
     	}
    
     	private string _ProvinceCode = "000000";
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CityCode",DTOPropertyName="CityCode",IsRequired=true, IsSerializable = true)]
        public string CityCode
        {
            get
            {
                return _CityCode;
            }
            set
            {
    
                if (_CityCode != value)
                {
                          
                _CityCode = value; 
               
           		}
    		}
     	}
    
     	private string _CityCode = "000000";
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistrictCode",DTOPropertyName="DistrictCode",IsRequired=true, IsSerializable = true)]
        public string DistrictCode
        {
            get
            {
                return _DistrictCode;
            }
            set
            {
    
                if (_DistrictCode != value)
                {
                          
                _DistrictCode = value; 
               
           		}
    		}
     	}
    
     	private string _DistrictCode = "000000";
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StreetCode",DTOPropertyName="StreetCode",IsRequired=false, IsSerializable = true)]
        public string StreetCode
        {
            get
            {
                return _StreetCode;
            }
            set
            {
    
                if (_StreetCode != value)
                {
                          
                _StreetCode = value; 
               
           		}
    		}
     	}
    
     	private string _StreetCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Street",DTOPropertyName="Street",IsRequired=false, IsSerializable = true)]
        public string Street
        {
            get
            {
                return _Street;
            }
            set
            {
    
                if (_Street != value)
                {
                          
                _Street = value; 
               
           		}
    		}
     	}
    
     	private string _Street;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DeliveryAddressDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DeliveryAddressDTO dto = srcDTO as DeliveryAddressDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.RecipientsUserName = dto.RecipientsUserName;
    								
    				 this.RecipientsPhone = dto.RecipientsPhone;
    								
    				 this.RecipientsAddress = dto.RecipientsAddress;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.IsDefault = dto.IsDefault;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Province = dto.Province;
    								
    				 this.City = dto.City;
    								
    				 this.District = dto.District;
    								
    				 this.RecipientsZipCode = dto.RecipientsZipCode;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ProvinceCode = dto.ProvinceCode;
    								
    				 this.CityCode = dto.CityCode;
    								
    				 this.DistrictCode = dto.DistrictCode;
    								
    				 this.StreetCode = dto.StreetCode;
    								
    				 this.Street = dto.Street;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DeliveryAddressDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DeliveryAddressDTO();
                base.ToBEData(ref todto);
    			DeliveryAddressDTO dto = todto as DeliveryAddressDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.RecipientsUserName = this.RecipientsUserName;
    								
    				 dto.RecipientsPhone = this.RecipientsPhone;
    								
    				 dto.RecipientsAddress = this.RecipientsAddress;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.IsDefault = this.IsDefault;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Province = this.Province;
    								
    				 dto.City = this.City;
    								
    				 dto.District = this.District;
    								
    				 dto.RecipientsZipCode = this.RecipientsZipCode;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ProvinceCode = this.ProvinceCode;
    								
    				 dto.CityCode = this.CityCode;
    								
    				 dto.DistrictCode = this.DistrictCode;
    								
    				 dto.StreetCode = this.StreetCode;
    								
    				 dto.Street = this.Street;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 分销商申请
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DistributionApply",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DistributionApplyDTO))]
    public partial class DistributionApply: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DistributionApply ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 是否有身份认证信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HasIdentity",DTOPropertyName="HasIdentity",IsRequired=true, IsSerializable = true)]
        public bool HasIdentity
        {
            get
            {
                return _HasIdentity;
            }
            set
            {
    
                if (_HasIdentity != value)
                {
                          
                _HasIdentity = value; 
               
           		}
    		}
     	}
    
     	private bool _HasIdentity;
        
    
        /// <summary>
        /// 分销商申请设置Id，即appid
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RuleId",DTOPropertyName="RuleId",IsRequired=true, IsSerializable = true)]
        public System.Guid RuleId
        {
            get
            {
                return _RuleId;
            }
            set
            {
    
                if (_RuleId != value)
                {
                          
                _RuleId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _RuleId;
        
    
        /// <summary>
        /// 申请人Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 申请人帐号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=true, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        
    
        /// <summary>
        /// 申请人昵称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=true, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 申请人头像logo
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturePath",DTOPropertyName="PicturePath",IsRequired=true, IsSerializable = true)]
        public string PicturePath
        {
            get
            {
                return _PicturePath;
            }
            set
            {
    
                if (_PicturePath != value)
                {
                          
                _PicturePath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturePath;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remarks",DTOPropertyName="Remarks",IsRequired=false, IsSerializable = true)]
        public string Remarks
        {
            get
            {
                return _Remarks;
            }
            set
            {
    
                if (_Remarks != value)
                {
                          
                _Remarks = value; 
               
           		}
    		}
     	}
    
     	private string _Remarks;
        
    
        /// <summary>
        /// 拒绝原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefuseReason",DTOPropertyName="RefuseReason",IsRequired=false, IsSerializable = true)]
        public string RefuseReason
        {
            get
            {
                return _RefuseReason;
            }
            set
            {
    
                if (_RefuseReason != value)
                {
                          
                _RefuseReason = value; 
               
           		}
    		}
     	}
    
     	private string _RefuseReason;
        
    
        /// <summary>
        /// 审核人Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditorId",DTOPropertyName="AuditorId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AuditorId
        {
            get
            {
                return _AuditorId;
            }
            set
            {
    
                if (_AuditorId != value)
                {
                          
                _AuditorId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AuditorId;
        
    
        /// <summary>
        /// 审核时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditTime",DTOPropertyName="AuditTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> AuditTime
        {
            get
            {
                return _AuditTime;
            }
            set
            {
    
                if (_AuditTime != value)
                {
                          
                _AuditTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _AuditTime;
        
    
        /// <summary>
        /// 上级分销商id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentId",DTOPropertyName="ParentId",IsRequired=true, IsSerializable = true)]
        public System.Guid ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
    
                if (_ParentId != value)
                {
                          
                _ParentId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ParentId;
        

        #endregion
        #region 复杂类型属性
    	/// <summary>
        /// 申请状态
        /// </summary>  
    	//[JHBEProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public Jinher.AMP.BTP.Deploy.Enum.DistributeApplyStateEnum State
        {
            get
            {            
                return _State;
            }
            set
            {                 
                _State = value;                  
            }
        }
        private Jinher.AMP.BTP.Deploy.Enum.DistributeApplyStateEnum _State; 
       

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DistributionApplyDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DistributionApplyDTO dto = srcDTO as DistributionApplyDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.HasIdentity = dto.HasIdentity;
    								
    				 this.RuleId = dto.RuleId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UserCode = dto.UserCode;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.PicturePath = dto.PicturePath;
    								
    				 this.Remarks = dto.Remarks;
    								
    				 this.State = dto.State;
    								
    				 this.RefuseReason = dto.RefuseReason;
    								
    				 this.AuditorId = dto.AuditorId;
    								
    				 this.AuditTime = dto.AuditTime;
    								
    				 this.ParentId = dto.ParentId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DistributionApplyDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DistributionApplyDTO();
                base.ToBEData(ref todto);
    			DistributionApplyDTO dto = todto as DistributionApplyDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.HasIdentity = this.HasIdentity;
    								
    				 dto.RuleId = this.RuleId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UserCode = this.UserCode;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.PicturePath = this.PicturePath;
    								
    				 dto.Remarks = this.Remarks;
    								
    				 dto.State = this.State;
    								
    				 dto.RefuseReason = this.RefuseReason;
    								
    				 dto.AuditorId = this.AuditorId;
    								
    				 dto.AuditTime = this.AuditTime;
    								
    				 dto.ParentId = this.ParentId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 分销商申请审核
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DistributionApplyAudit",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DistributionApplyAuditDTO))]
    public partial class DistributionApplyAudit: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DistributionApplyAudit ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 申请Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyId",DTOPropertyName="ApplyId",IsRequired=true, IsSerializable = true)]
        public System.Guid ApplyId
        {
            get
            {
                return _ApplyId;
            }
            set
            {
    
                if (_ApplyId != value)
                {
                          
                _ApplyId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ApplyId;
        
    
        /// <summary>
        /// 拒绝原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefuseReason",DTOPropertyName="RefuseReason",IsRequired=false, IsSerializable = true)]
        public string RefuseReason
        {
            get
            {
                return _RefuseReason;
            }
            set
            {
    
                if (_RefuseReason != value)
                {
                          
                _RefuseReason = value; 
               
           		}
    		}
     	}
    
     	private string _RefuseReason;
        
    
        /// <summary>
        /// 是否通过审核
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsPass",DTOPropertyName="IsPass",IsRequired=true, IsSerializable = true)]
        public bool IsPass
        {
            get
            {
                return _IsPass;
            }
            set
            {
    
                if (_IsPass != value)
                {
                          
                _IsPass = value; 
               
           		}
    		}
     	}
    
     	private bool _IsPass;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DistributionApplyAuditDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DistributionApplyAuditDTO dto = srcDTO as DistributionApplyAuditDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Details = dto.Details;
    								
    				 this.ApplyId = dto.ApplyId;
    								
    				 this.RefuseReason = dto.RefuseReason;
    								
    				 this.IsPass = dto.IsPass;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DistributionApplyAuditDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DistributionApplyAuditDTO();
                base.ToBEData(ref todto);
    			DistributionApplyAuditDTO dto = todto as DistributionApplyAuditDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.ApplyId = this.ApplyId;
    								
    				 dto.RefuseReason = this.RefuseReason;
    								
    				 dto.IsPass = this.IsPass;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 申请条件
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DistributionIdentity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DistributionIdentityDTO))]
    public partial class DistributionIdentity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DistributionIdentity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 申请设置Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RuleId",DTOPropertyName="RuleId",IsRequired=true, IsSerializable = true)]
        public System.Guid RuleId
        {
            get
            {
                return _RuleId;
            }
            set
            {
    
                if (_RuleId != value)
                {
                          
                _RuleId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _RuleId;
        
    
        /// <summary>
        /// 条件设置Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IdentitySetId",DTOPropertyName="IdentitySetId",IsRequired=true, IsSerializable = true)]
        public System.Guid IdentitySetId
        {
            get
            {
                return _IdentitySetId;
            }
            set
            {
    
                if (_IdentitySetId != value)
                {
                          
                _IdentitySetId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _IdentitySetId;
        
    
        /// <summary>
        /// 申请Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyId",DTOPropertyName="ApplyId",IsRequired=true, IsSerializable = true)]
        public System.Guid ApplyId
        {
            get
            {
                return _ApplyId;
            }
            set
            {
    
                if (_ApplyId != value)
                {
                          
                _ApplyId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ApplyId;
        
    
        /// <summary>
        /// 值
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Value",DTOPropertyName="Value",IsRequired=false, IsSerializable = true)]
        public string Value
        {
            get
            {
                return _Value;
            }
            set
            {
    
                if (_Value != value)
                {
                          
                _Value = value; 
               
           		}
    		}
     	}
    
     	private string _Value;
        
    
        /// <summary>
        /// 字段名类型：姓名，身份证号等
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NameCategory",DTOPropertyName="NameCategory",IsRequired=true, IsSerializable = true)]
        public int NameCategory
        {
            get
            {
                return _NameCategory;
            }
            set
            {
    
                if (_NameCategory != value)
                {
                          
                _NameCategory = value; 
               
           		}
    		}
     	}
    
     	private int _NameCategory;
        

        #endregion
        #region 复杂类型属性
    	/// <summary>
        /// 没有元数据文档可用。
        /// </summary>  
    	//[JHBEProperty(DisplayNameResKey="ValueType",DTOPropertyName="ValueType",IsRequired=true, IsSerializable = true)]
        public Jinher.AMP.BTP.Deploy.Enum.ApplyInfoTypeEnum ValueType
        {
            get
            {            
                return _ValueType;
            }
            set
            {                 
                _ValueType = value;                  
            }
        }
        private Jinher.AMP.BTP.Deploy.Enum.ApplyInfoTypeEnum _ValueType; 
       

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DistributionIdentityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DistributionIdentityDTO dto = srcDTO as DistributionIdentityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.RuleId = dto.RuleId;
    								
    				 this.IdentitySetId = dto.IdentitySetId;
    								
    				 this.ApplyId = dto.ApplyId;
    								
    				 this.Value = dto.Value;
    								
    				 this.ValueType = dto.ValueType;
    								
    				 this.NameCategory = dto.NameCategory;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DistributionIdentityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DistributionIdentityDTO();
                base.ToBEData(ref todto);
    			DistributionIdentityDTO dto = todto as DistributionIdentityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.RuleId = this.RuleId;
    								
    				 dto.IdentitySetId = this.IdentitySetId;
    								
    				 dto.ApplyId = this.ApplyId;
    								
    				 dto.Value = this.Value;
    								
    				 dto.ValueType = this.ValueType;
    								
    				 dto.NameCategory = this.NameCategory;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 分销商申请资料设置
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DistributionIdentitySet",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DistributionIdentitySetDTO))]
    public partial class DistributionIdentitySet: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DistributionIdentitySet ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=true, IsSerializable = true)]
        public System.Guid ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ModifiedId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsRequired",DTOPropertyName="IsRequired",IsRequired=true, IsSerializable = true)]
        public bool IsRequired
        {
            get
            {
                return _IsRequired;
            }
            set
            {
    
                if (_IsRequired != value)
                {
                          
                _IsRequired = value; 
               
           		}
    		}
     	}
    
     	private bool _IsRequired;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RuleId",DTOPropertyName="RuleId",IsRequired=true, IsSerializable = true)]
        public System.Guid RuleId
        {
            get
            {
                return _RuleId;
            }
            set
            {
    
                if (_RuleId != value)
                {
                          
                _RuleId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _RuleId;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 字段名类型：姓名，身份证号等
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NameCategory",DTOPropertyName="NameCategory",IsRequired=true, IsSerializable = true)]
        public int NameCategory
        {
            get
            {
                return _NameCategory;
            }
            set
            {
    
                if (_NameCategory != value)
                {
                          
                _NameCategory = value; 
               
           		}
    		}
     	}
    
     	private int _NameCategory;
        

        #endregion
        #region 复杂类型属性
    	/// <summary>
        /// 字段类型
        /// </summary>  
    	//[JHBEProperty(DisplayNameResKey="ValueType",DTOPropertyName="ValueType",IsRequired=true, IsSerializable = true)]
        public Jinher.AMP.BTP.Deploy.Enum.ApplyInfoTypeEnum ValueType
        {
            get
            {            
                return _ValueType;
            }
            set
            {                 
                _ValueType = value;                  
            }
        }
        private Jinher.AMP.BTP.Deploy.Enum.ApplyInfoTypeEnum _ValueType; 
       

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DistributionIdentitySetDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DistributionIdentitySetDTO dto = srcDTO as DistributionIdentitySetDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.IsRequired = dto.IsRequired;
    								
    				 this.RuleId = dto.RuleId;
    								
    				 this.ValueType = dto.ValueType;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.NameCategory = dto.NameCategory;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DistributionIdentitySetDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DistributionIdentitySetDTO();
                base.ToBEData(ref todto);
    			DistributionIdentitySetDTO dto = todto as DistributionIdentitySetDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ModifiedId = this.ModifiedId;
    								
    				 dto.IsRequired = this.IsRequired;
    								
    				 dto.RuleId = this.RuleId;
    								
    				 dto.ValueType = this.ValueType;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.NameCategory = this.NameCategory;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 分销商申请设置
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DistributionRule",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DistributionRuleDTO))]
    public partial class DistributionRule: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DistributionRule ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=true, IsSerializable = true)]
        public System.Guid ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ModifiedId;
        
    
        /// <summary>
        /// 是否有申请条件
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HasCondition",DTOPropertyName="HasCondition",IsRequired=true, IsSerializable = true)]
        public bool HasCondition
        {
            get
            {
                return _HasCondition;
            }
            set
            {
    
                if (_HasCondition != value)
                {
                          
                _HasCondition = value; 
               
           		}
    		}
     	}
    
     	private bool _HasCondition;
        
    
        /// <summary>
        /// 是否需要身份验证信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NeedIdentity",DTOPropertyName="NeedIdentity",IsRequired=true, IsSerializable = true)]
        public bool NeedIdentity
        {
            get
            {
                return _NeedIdentity;
            }
            set
            {
    
                if (_NeedIdentity != value)
                {
                          
                _NeedIdentity = value; 
               
           		}
    		}
     	}
    
     	private bool _NeedIdentity;
        
    
        /// <summary>
        /// 最小订单购买次数，-1代表不限
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderTimeLimit",DTOPropertyName="OrderTimeLimit",IsRequired=true, IsSerializable = true)]
        public int OrderTimeLimit
        {
            get
            {
                return _OrderTimeLimit;
            }
            set
            {
    
                if (_OrderTimeLimit != value)
                {
                          
                _OrderTimeLimit = value; 
               
           		}
    		}
     	}
    
     	private int _OrderTimeLimit;
        
    
        /// <summary>
        /// 最小购买金额,-1代表不限
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderAmountLimit",DTOPropertyName="OrderAmountLimit",IsRequired=true, IsSerializable = true)]
        public decimal OrderAmountLimit
        {
            get
            {
                return _OrderAmountLimit;
            }
            set
            {
    
                if (_OrderAmountLimit != value)
                {
                          
                _OrderAmountLimit = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderAmountLimit;
        
    
        /// <summary>
        /// 是否包含自订单商品
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HasCustomComs",DTOPropertyName="HasCustomComs",IsRequired=true, IsSerializable = true)]
        public bool HasCustomComs
        {
            get
            {
                return _HasCustomComs;
            }
            set
            {
    
                if (_HasCustomComs != value)
                {
                          
                _HasCustomComs = value; 
               
           		}
    		}
     	}
    
     	private bool _HasCustomComs;
        
    
        /// <summary>
        /// 身份条件标题
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Title",DTOPropertyName="Title",IsRequired=true, IsSerializable = true)]
        public string Title
        {
            get
            {
                return _Title;
            }
            set
            {
    
                if (_Title != value)
                {
                          
                _Title = value; 
               
           		}
    		}
     	}
    
     	private string _Title;
        
    
        /// <summary>
        /// 分销商规则说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RuleDesc",DTOPropertyName="RuleDesc",IsRequired=false, IsSerializable = true)]
        public string RuleDesc
        {
            get
            {
                return _RuleDesc;
            }
            set
            {
    
                if (_RuleDesc != value)
                {
                          
                _RuleDesc = value; 
               
           		}
    		}
     	}
    
     	private string _RuleDesc;
        

        #endregion
        #region 复杂类型属性
    	/// <summary>
        /// 审核类型
        /// </summary>  
    	//[JHBEProperty(DisplayNameResKey="ApprovalType",DTOPropertyName="ApprovalType",IsRequired=true, IsSerializable = true)]
        public Jinher.AMP.BTP.Deploy.Enum.ApprovalTypeEnum ApprovalType
        {
            get
            {            
                return _ApprovalType;
            }
            set
            {                 
                _ApprovalType = value;                  
            }
        }
        private Jinher.AMP.BTP.Deploy.Enum.ApprovalTypeEnum _ApprovalType; 
       
    
        /// <summary>
        /// 有效订单状态
        /// </summary> 
    	//[JHBEProperty(DisplayNameResKey="StartCalcState",DTOPropertyName="StartCalcState",IsRequired=true, IsSerializable = true)]
        public CalcOrderStateVO StartCalcState
        {
            get
            {   
    			if (   _StartCalcState == null)
                 {
    			    _StartCalcState = new CalcOrderStateVO(); 
                 }       
                return _StartCalcState;
            }
            set
            {                 
                _StartCalcState = value;                  
            }
        }
        private CalcOrderStateVO _StartCalcState = null;   
    
     
        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DistributionRuleDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DistributionRuleDTO dto = srcDTO as DistributionRuleDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.HasCondition = dto.HasCondition;
    								
    				 this.NeedIdentity = dto.NeedIdentity;
    								
    				 this.OrderTimeLimit = dto.OrderTimeLimit;
    								
    				 this.OrderAmountLimit = dto.OrderAmountLimit;
    								
    				 this.HasCustomComs = dto.HasCustomComs;
    								
    				 this.Title = dto.Title;
    								
    				 this.ApprovalType = dto.ApprovalType;
    								
    				 this.StartCalcState = dto.StartCalcState;
    								
    				 this.RuleDesc = dto.RuleDesc;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DistributionRuleDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DistributionRuleDTO();
                base.ToBEData(ref todto);
    			DistributionRuleDTO dto = todto as DistributionRuleDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ModifiedId = this.ModifiedId;
    								
    				 dto.HasCondition = this.HasCondition;
    								
    				 dto.NeedIdentity = this.NeedIdentity;
    								
    				 dto.OrderTimeLimit = this.OrderTimeLimit;
    								
    				 dto.OrderAmountLimit = this.OrderAmountLimit;
    								
    				 dto.HasCustomComs = this.HasCustomComs;
    								
    				 dto.Title = this.Title;
    								
    				 dto.ApprovalType = this.ApprovalType;
    								
    				 dto.StartCalcState = this.StartCalcState;
    								
    				 dto.RuleDesc = this.RuleDesc;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 分销商表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Distributor",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DistributorDTO))]
    public partial class Distributor: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Distributor ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 用户昵称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=false, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 用户帐号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=false, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        
    
        /// <summary>
        /// 成为分销商的时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 分销应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 上级分销商Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentId",DTOPropertyName="ParentId",IsRequired=true, IsSerializable = true)]
        public System.Guid ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
    
                if (_ParentId != value)
                {
                          
                _ParentId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ParentId;
        
    
        /// <summary>
        /// 分销商等级
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Level",DTOPropertyName="Level",IsRequired=true, IsSerializable = true)]
        public int Level
        {
            get
            {
                return _Level;
            }
            set
            {
    
                if (_Level != value)
                {
                          
                _Level = value; 
               
           		}
    		}
     	}
    
     	private int _Level;
        
    
        /// <summary>
        /// 分销关系Id，（层级关系从上到下分销商Id以.分割组成的字符串）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Key",DTOPropertyName="Key",IsRequired=true, IsSerializable = true)]
        public string Key
        {
            get
            {
                return _Key;
            }
            set
            {
    
                if (_Key != value)
                {
                          
                _Key = value; 
               
           		}
    		}
     	}
    
     	private string _Key;
        
    
        /// <summary>
        /// 分销商用户Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 注册时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserSubTime",DTOPropertyName="UserSubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime UserSubTime
        {
            get
            {
                return _UserSubTime;
            }
            set
            {
    
                if (_UserSubTime != value)
                {
                          
                _UserSubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _UserSubTime;
        
    
        /// <summary>
        /// 头像Url
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturePath",DTOPropertyName="PicturePath",IsRequired=false, IsSerializable = true)]
        public string PicturePath
        {
            get
            {
                return _PicturePath;
            }
            set
            {
    
                if (_PicturePath != value)
                {
                          
                _PicturePath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturePath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remarks",DTOPropertyName="Remarks",IsRequired=false, IsSerializable = true)]
        public string Remarks
        {
            get
            {
                return _Remarks;
            }
            set
            {
    
                if (_Remarks != value)
                {
                          
                _Remarks = value; 
               
           		}
    		}
     	}
    
     	private string _Remarks;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DistributorDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DistributorDTO dto = srcDTO as DistributorDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserName = dto.UserName;
    								
    				 this.UserCode = dto.UserCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.ParentId = dto.ParentId;
    								
    				 this.Level = dto.Level;
    								
    				 this.Key = dto.Key;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UserSubTime = dto.UserSubTime;
    								
    				 this.PicturePath = dto.PicturePath;
    								
    				 this.Remarks = dto.Remarks;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DistributorDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DistributorDTO();
                base.ToBEData(ref todto);
    			DistributorDTO dto = todto as DistributorDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.UserCode = this.UserCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.ParentId = this.ParentId;
    								
    				 dto.Level = this.Level;
    								
    				 dto.Key = this.Key;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UserSubTime = this.UserSubTime;
    								
    				 dto.PicturePath = this.PicturePath;
    								
    				 dto.Remarks = this.Remarks;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 拼团
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DiyGroup",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DiyGroupDTO))]
    public partial class DiyGroup: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DiyGroup ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 团长id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PromotionId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 超时时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpireTime",DTOPropertyName="ExpireTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ExpireTime
        {
            get
            {
                return _ExpireTime;
            }
            set
            {
    
                if (_ExpireTime != value)
                {
                          
                _ExpireTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ExpireTime;
        
    
        /// <summary>
        /// 组团状态 0：创建团，1：待成团，2：组团成功，3：已成团，4：未成团（组团失败），5：退款已审核，6：已退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 参团人数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JoinNumber",DTOPropertyName="JoinNumber",IsRequired=true, IsSerializable = true)]
        public int JoinNumber
        {
            get
            {
                return _JoinNumber;
            }
            set
            {
    
                if (_JoinNumber != value)
                {
                          
                _JoinNumber = value; 
               
           		}
    		}
     	}
    
     	private int _JoinNumber;
        
    
        /// <summary>
        /// 确认成团审核人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SuccessProcessorId",DTOPropertyName="SuccessProcessorId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> SuccessProcessorId
        {
            get
            {
                return _SuccessProcessorId;
            }
            set
            {
    
                if (_SuccessProcessorId != value)
                {
                          
                _SuccessProcessorId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _SuccessProcessorId;
        
    
        /// <summary>
        /// 确认成团审核时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SuccessTime",DTOPropertyName="SuccessTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> SuccessTime
        {
            get
            {
                return _SuccessTime;
            }
            set
            {
    
                if (_SuccessTime != value)
                {
                          
                _SuccessTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _SuccessTime;
        
    
        /// <summary>
        /// 退款审核人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FailProcessorId",DTOPropertyName="FailProcessorId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FailProcessorId
        {
            get
            {
                return _FailProcessorId;
            }
            set
            {
    
                if (_FailProcessorId != value)
                {
                          
                _FailProcessorId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FailProcessorId;
        
    
        /// <summary>
        /// 退款审核时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FailTime",DTOPropertyName="FailTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> FailTime
        {
            get
            {
                return _FailTime;
            }
            set
            {
    
                if (_FailTime != value)
                {
                          
                _FailTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _FailTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DiyGroupDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DiyGroupDTO dto = srcDTO as DiyGroupDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ExpireTime = dto.ExpireTime;
    								
    				 this.State = dto.State;
    								
    				 this.JoinNumber = dto.JoinNumber;
    								
    				 this.SuccessProcessorId = dto.SuccessProcessorId;
    								
    				 this.SuccessTime = dto.SuccessTime;
    								
    				 this.FailProcessorId = dto.FailProcessorId;
    								
    				 this.FailTime = dto.FailTime;
    								
    				 this.EsAppId = dto.EsAppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DiyGroupDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DiyGroupDTO();
                base.ToBEData(ref todto);
    			DiyGroupDTO dto = todto as DiyGroupDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ExpireTime = this.ExpireTime;
    								
    				 dto.State = this.State;
    								
    				 dto.JoinNumber = this.JoinNumber;
    								
    				 dto.SuccessProcessorId = this.SuccessProcessorId;
    								
    				 dto.SuccessTime = this.SuccessTime;
    								
    				 dto.FailProcessorId = this.FailProcessorId;
    								
    				 dto.FailTime = this.FailTime;
    								
    				 dto.EsAppId = this.EsAppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 拼团订单
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.DiyGroupOrder",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.DiyGroupOrderDTO))]
    public partial class DiyGroupOrder: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  DiyGroupOrder ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 角色 0：团长，1：团员
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Role",DTOPropertyName="Role",IsRequired=true, IsSerializable = true)]
        public int Role
        {
            get
            {
                return _Role;
            }
            set
            {
    
                if (_Role != value)
                {
                          
                _Role = value; 
               
           		}
    		}
     	}
    
     	private int _Role;
        
    
        /// <summary>
        /// 团Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiyGroupId",DTOPropertyName="DiyGroupId",IsRequired=true, IsSerializable = true)]
        public System.Guid DiyGroupId
        {
            get
            {
                return _DiyGroupId;
            }
            set
            {
    
                if (_DiyGroupId != value)
                {
                          
                _DiyGroupId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _DiyGroupId;
        
    
        /// <summary>
        /// 帐号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubCode",DTOPropertyName="SubCode",IsRequired=true, IsSerializable = true)]
        public string SubCode
        {
            get
            {
                return _SubCode;
            }
            set
            {
    
                if (_SubCode != value)
                {
                          
                _SubCode = value; 
               
           		}
    		}
     	}
    
     	private string _SubCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 团订单状态 0：待付款，1付款完成 
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,DiyGroupOrderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                DiyGroupOrderDTO dto = srcDTO as DiyGroupOrderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.Role = dto.Role;
    								
    				 this.DiyGroupId = dto.DiyGroupId;
    								
    				 this.SubCode = dto.SubCode;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.State = dto.State;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，DiyGroupOrderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new DiyGroupOrderDTO();
                base.ToBEData(ref todto);
    			DiyGroupOrderDTO dto = todto as DiyGroupOrderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.Role = this.Role;
    								
    				 dto.DiyGroupId = this.DiyGroupId;
    								
    				 dto.SubCode = this.SubCode;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.State = this.State;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ErrorCommodityOrder",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ErrorCommodityOrderDTO))]
    public partial class ErrorCommodityOrder: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ErrorCommodityOrder ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ErrorOrderId",DTOPropertyName="ErrorOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid ErrorOrderId
        {
            get
            {
                return _ErrorOrderId;
            }
            set
            {
    
                if (_ErrorOrderId != value)
                {
                          
                _ErrorOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ErrorOrderId;
        
    
        /// <summary>
        /// 异常类型：0，二维码生成失败 1，积分回退失败 2，一级分销商分成失败 3，二级分销商分成失败 4，三级分销商分成失败 5，众销分成失败6，渠道分成失败 7，易捷币回退失败8，优惠券回退失败
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ResourceType",DTOPropertyName="ResourceType",IsRequired=true, IsSerializable = true)]
        public int ResourceType
        {
            get
            {
                return _ResourceType;
            }
            set
            {
    
                if (_ResourceType != value)
                {
                          
                _ResourceType = value; 
               
           		}
    		}
     	}
    
     	private int _ResourceType;
        
    
        /// <summary>
        /// 业务来源：0下订单，3订单完结，4商家取消订单，5客户取消订单，6超时交易关闭，7已退款，107售后已退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Source",DTOPropertyName="Source",IsRequired=true, IsSerializable = true)]
        public int Source
        {
            get
            {
                return _Source;
            }
            set
            {
    
                if (_Source != value)
                {
                          
                _Source = value; 
               
           		}
    		}
     	}
    
     	private int _Source;
        
    
        /// <summary>
        /// 处理状态: 0,未处理，1已处理
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 订单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 优惠券id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponId",DTOPropertyName="CouponId",IsRequired=true, IsSerializable = true)]
        public System.Guid CouponId
        {
            get
            {
                return _CouponId;
            }
            set
            {
    
                if (_CouponId != value)
                {
                          
                _CouponId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CouponId;
        
    
        /// <summary>
        /// 积分数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Score",DTOPropertyName="Score",IsRequired=true, IsSerializable = true)]
        public int Score
        {
            get
            {
                return _Score;
            }
            set
            {
    
                if (_Score != value)
                {
                          
                _Score = value; 
               
           		}
    		}
     	}
    
     	private int _Score;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 0无积分，1店铺积分，2通用积分
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreType",DTOPropertyName="ScoreType",IsRequired=true, IsSerializable = true)]
        public int ScoreType
        {
            get
            {
                return _ScoreType;
            }
            set
            {
    
                if (_ScoreType != value)
                {
                          
                _ScoreType = value; 
               
           		}
    		}
     	}
    
     	private int _ScoreType;
        
    
        /// <summary>
        /// 错误描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ErrorCommodityOrderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ErrorCommodityOrderDTO dto = srcDTO as ErrorCommodityOrderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ErrorOrderId = dto.ErrorOrderId;
    								
    				 this.ResourceType = dto.ResourceType;
    								
    				 this.Source = dto.Source;
    								
    				 this.State = dto.State;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.CouponId = dto.CouponId;
    								
    				 this.Score = dto.Score;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ScoreType = dto.ScoreType;
    								
    				 this.Description = dto.Description;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ErrorCommodityOrderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ErrorCommodityOrderDTO();
                base.ToBEData(ref todto);
    			ErrorCommodityOrderDTO dto = todto as ErrorCommodityOrderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ErrorOrderId = this.ErrorOrderId;
    								
    				 dto.ResourceType = this.ResourceType;
    								
    				 dto.Source = this.Source;
    								
    				 dto.State = this.State;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.CouponId = this.CouponId;
    								
    				 dto.Score = this.Score;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ScoreType = this.ScoreType;
    								
    				 dto.Description = this.Description;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ExpressCode",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ExpressCodeDTO))]
    public partial class ExpressCode: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ExpressCode ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 简称（快递公司在快递鸟的简称）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpCode",DTOPropertyName="ExpCode",IsRequired=true, IsSerializable = true)]
        public string ExpCode
        {
            get
            {
                return _ExpCode;
            }
            set
            {
    
                if (_ExpCode != value)
                {
                          
                _ExpCode = value; 
               
           		}
    		}
     	}
    
     	private string _ExpCode;
        
    
        /// <summary>
        /// 快递公司名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpCompanyName",DTOPropertyName="ExpCompanyName",IsRequired=true, IsSerializable = true)]
        public string ExpCompanyName
        {
            get
            {
                return _ExpCompanyName;
            }
            set
            {
    
                if (_ExpCompanyName != value)
                {
                          
                _ExpCompanyName = value; 
               
           		}
    		}
     	}
    
     	private string _ExpCompanyName;
        
    
        /// <summary>
        /// 排序号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderNum",DTOPropertyName="OrderNum",IsRequired=true, IsSerializable = true)]
        public int OrderNum
        {
            get
            {
                return _OrderNum;
            }
            set
            {
    
                if (_OrderNum != value)
                {
                          
                _OrderNum = value; 
               
           		}
    		}
     	}
    
     	private int _OrderNum;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ExpressCodeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ExpressCodeDTO dto = srcDTO as ExpressCodeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ExpCode = dto.ExpCode;
    								
    				 this.ExpCompanyName = dto.ExpCompanyName;
    								
    				 this.OrderNum = dto.OrderNum;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ExpressCodeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ExpressCodeDTO();
                base.ToBEData(ref todto);
    			ExpressCodeDTO dto = todto as ExpressCodeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ExpCode = this.ExpCode;
    								
    				 dto.ExpCompanyName = this.ExpCompanyName;
    								
    				 dto.OrderNum = this.OrderNum;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ExpressCollection",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ExpressCollectionDTO))]
    public partial class ExpressCollection: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ExpressCollection ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpCode",DTOPropertyName="ExpCode",IsRequired=true, IsSerializable = true)]
        public string ExpCode
        {
            get
            {
                return _ExpCode;
            }
            set
            {
    
                if (_ExpCode != value)
                {
                          
                _ExpCode = value; 
               
           		}
    		}
     	}
    
     	private string _ExpCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ExpressCollectionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ExpressCollectionDTO dto = srcDTO as ExpressCollectionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ExpCode = dto.ExpCode;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ExpressCollectionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ExpressCollectionDTO();
                base.ToBEData(ref todto);
    			ExpressCollectionDTO dto = todto as ExpressCollectionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ExpCode = this.ExpCode;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 快递单模板
    /// </summary>
    /// <LongDescription>
    /// 快递单模板
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ExpressOrderTemplate",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ExpressOrderTemplateDTO))]
    public partial class ExpressOrderTemplate: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ExpressOrderTemplate ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 快递公司编号
        /// </summary>
        /// <LongDescription>
        /// 快递公司编号
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ExpressCode",DTOPropertyName="ExpressCode",IsRequired=true, IsSerializable = true)]
        public string ExpressCode
        {
            get
            {
                return _ExpressCode;
            }
            set
            {
    
                if (_ExpressCode != value)
                {
                          
                _ExpressCode = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressCode;
        
    
        /// <summary>
        /// 模板名称
        /// </summary>
        /// <LongDescription>
        /// 模板名称
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="TemplateName",DTOPropertyName="TemplateName",IsRequired=true, IsSerializable = true)]
        public string TemplateName
        {
            get
            {
                return _TemplateName;
            }
            set
            {
    
                if (_TemplateName != value)
                {
                          
                _TemplateName = value; 
               
           		}
    		}
     	}
    
     	private string _TemplateName;
        
    
        /// <summary>
        /// 模板图片，快递单图片
        /// </summary>
        /// <LongDescription>
        /// 模板图片，快递单图片
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ExpressImage",DTOPropertyName="ExpressImage",IsRequired=true, IsSerializable = true)]
        public string ExpressImage
        {
            get
            {
                return _ExpressImage;
            }
            set
            {
    
                if (_ExpressImage != value)
                {
                          
                _ExpressImage = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressImage;
        
    
        /// <summary>
        /// 打印开始的y坐标  px
        /// </summary>
        /// <LongDescription>
        /// 打印开始的y坐标  px
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Top",DTOPropertyName="Top",IsRequired=true, IsSerializable = true)]
        public double Top
        {
            get
            {
                return _Top;
            }
            set
            {
    
                if (_Top != value)
                {
                          
                _Top = value; 
               
           		}
    		}
     	}
    
     	private double _Top;
        
    
        /// <summary>
        /// 打印开始的x坐标
        /// </summary>
        /// <LongDescription>
        /// 打印开始的x坐标
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Left",DTOPropertyName="Left",IsRequired=true, IsSerializable = true)]
        public double Left
        {
            get
            {
                return _Left;
            }
            set
            {
    
                if (_Left != value)
                {
                          
                _Left = value; 
               
           		}
    		}
     	}
    
     	private double _Left;
        
    
        /// <summary>
        /// 打印的快递单的宽度 px
        /// </summary>
        /// <LongDescription>
        /// 打印的快递单的宽度 px
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Width",DTOPropertyName="Width",IsRequired=true, IsSerializable = true)]
        public double Width
        {
            get
            {
                return _Width;
            }
            set
            {
    
                if (_Width != value)
                {
                          
                _Width = value; 
               
           		}
    		}
     	}
    
     	private double _Width;
        
    
        /// <summary>
        /// 打印的快递单的高度 px
        /// </summary>
        /// <LongDescription>
        /// 打印的快递单的高度 px
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Height",DTOPropertyName="Height",IsRequired=true, IsSerializable = true)]
        public double Height
        {
            get
            {
                return _Height;
            }
            set
            {
    
                if (_Height != value)
                {
                          
                _Height = value; 
               
           		}
    		}
     	}
    
     	private double _Height;
        
    
        /// <summary>
        /// 模板类型（0：系统，1：自定义）
        /// </summary>
        /// <LongDescription>
        /// 模板类型（0：系统，1：自定义）
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="TemplateType",DTOPropertyName="TemplateType",IsRequired=true, IsSerializable = true)]
        public int TemplateType
        {
            get
            {
                return _TemplateType;
            }
            set
            {
    
                if (_TemplateType != value)
                {
                          
                _TemplateType = value; 
               
           		}
    		}
     	}
    
     	private int _TemplateType;
        
    
        /// <summary>
        /// 修改时间
        /// </summary>
        /// <LongDescription>
        /// 修改时间
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 所属appId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CreateTime",DTOPropertyName="CreateTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
    
                if (_CreateTime != value)
                {
                          
                _CreateTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _CreateTime;
        
    
        /// <summary>
        /// 状态:0可用,1删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Status",DTOPropertyName="Status",IsRequired=true, IsSerializable = true)]
        public int Status
        {
            get
            {
                return _Status;
            }
            set
            {
    
                if (_Status != value)
                {
                          
                _Status = value; 
               
           		}
    		}
     	}
    
     	private int _Status;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ExpressOrderTemplateDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ExpressOrderTemplateDTO dto = srcDTO as ExpressOrderTemplateDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ExpressCode = dto.ExpressCode;
    								
    				 this.TemplateName = dto.TemplateName;
    								
    				 this.ExpressImage = dto.ExpressImage;
    								
    				 this.Top = dto.Top;
    								
    				 this.Left = dto.Left;
    								
    				 this.Width = dto.Width;
    								
    				 this.Height = dto.Height;
    								
    				 this.TemplateType = dto.TemplateType;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CreateTime = dto.CreateTime;
    								
    				 this.Status = dto.Status;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ExpressOrderTemplateDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ExpressOrderTemplateDTO();
                base.ToBEData(ref todto);
    			ExpressOrderTemplateDTO dto = todto as ExpressOrderTemplateDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ExpressCode = this.ExpressCode;
    								
    				 dto.TemplateName = this.TemplateName;
    								
    				 dto.ExpressImage = this.ExpressImage;
    								
    				 dto.Top = this.Top;
    								
    				 dto.Left = this.Left;
    								
    				 dto.Width = this.Width;
    								
    				 dto.Height = this.Height;
    								
    				 dto.TemplateType = this.TemplateType;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CreateTime = this.CreateTime;
    								
    				 dto.Status = this.Status;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 快递单模板属性
    /// </summary>
    /// <LongDescription>
    /// 快递单模板属性
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ExpressOrderTemplateProperty",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ExpressOrderTemplatePropertyDTO))]
    public partial class ExpressOrderTemplateProperty: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ExpressOrderTemplateProperty ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 模板Id
        /// </summary>
        /// <LongDescription>
        /// 模板Id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="TemplateId",DTOPropertyName="TemplateId",IsRequired=true, IsSerializable = true)]
        public System.Guid TemplateId
        {
            get
            {
                return _TemplateId;
            }
            set
            {
    
                if (_TemplateId != value)
                {
                          
                _TemplateId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _TemplateId;
        
    
        /// <summary>
        /// 属性名称
        /// </summary>
        /// <LongDescription>
        /// 属性名称
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="PropertyName",DTOPropertyName="PropertyName",IsRequired=false, IsSerializable = true)]
        public string PropertyName
        {
            get
            {
                return _PropertyName;
            }
            set
            {
    
                if (_PropertyName != value)
                {
                          
                _PropertyName = value; 
               
           		}
    		}
     	}
    
     	private string _PropertyName;
        
    
        /// <summary>
        /// 属性类型 对应枚举，
        /// </summary>
        /// <LongDescription>
        /// 属性类型 对应枚举，&#xA;决定数据的来源&#xA;
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="PropertyType",DTOPropertyName="PropertyType",IsRequired=true, IsSerializable = true)]
        public int PropertyType
        {
            get
            {
                return _PropertyType;
            }
            set
            {
    
                if (_PropertyType != value)
                {
                          
                _PropertyType = value; 
               
           		}
    		}
     	}
    
     	private int _PropertyType;
        
    
        /// <summary>
        /// y坐标  px
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Top",DTOPropertyName="Top",IsRequired=true, IsSerializable = true)]
        public double Top
        {
            get
            {
                return _Top;
            }
            set
            {
    
                if (_Top != value)
                {
                          
                _Top = value; 
               
           		}
    		}
     	}
    
     	private double _Top;
        
    
        /// <summary>
        /// x坐标
        /// </summary>
        /// <LongDescription>
        /// x坐标
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Left",DTOPropertyName="Left",IsRequired=true, IsSerializable = true)]
        public double Left
        {
            get
            {
                return _Left;
            }
            set
            {
    
                if (_Left != value)
                {
                          
                _Left = value; 
               
           		}
    		}
     	}
    
     	private double _Left;
        
    
        /// <summary>
        /// 宽度 px
        /// </summary>
        /// <LongDescription>
        /// 宽度 px
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Width",DTOPropertyName="Width",IsRequired=true, IsSerializable = true)]
        public double Width
        {
            get
            {
                return _Width;
            }
            set
            {
    
                if (_Width != value)
                {
                          
                _Width = value; 
               
           		}
    		}
     	}
    
     	private double _Width;
        
    
        /// <summary>
        /// 高度 px
        /// </summary>
        /// <LongDescription>
        /// 高度 px
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Height",DTOPropertyName="Height",IsRequired=true, IsSerializable = true)]
        public double Height
        {
            get
            {
                return _Height;
            }
            set
            {
    
                if (_Height != value)
                {
                          
                _Height = value; 
               
           		}
    		}
     	}
    
     	private double _Height;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PropertyText",DTOPropertyName="PropertyText",IsRequired=false, IsSerializable = true)]
        public string PropertyText
        {
            get
            {
                return _PropertyText;
            }
            set
            {
    
                if (_PropertyText != value)
                {
                          
                _PropertyText = value; 
               
           		}
    		}
     	}
    
     	private string _PropertyText;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ExpressOrderTemplatePropertyDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ExpressOrderTemplatePropertyDTO dto = srcDTO as ExpressOrderTemplatePropertyDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.TemplateId = dto.TemplateId;
    								
    				 this.PropertyName = dto.PropertyName;
    								
    				 this.PropertyType = dto.PropertyType;
    								
    				 this.Top = dto.Top;
    								
    				 this.Left = dto.Left;
    								
    				 this.Width = dto.Width;
    								
    				 this.Height = dto.Height;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.PropertyText = dto.PropertyText;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ExpressOrderTemplatePropertyDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ExpressOrderTemplatePropertyDTO();
                base.ToBEData(ref todto);
    			ExpressOrderTemplatePropertyDTO dto = todto as ExpressOrderTemplatePropertyDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.TemplateId = this.TemplateId;
    								
    				 dto.PropertyName = this.PropertyName;
    								
    				 dto.PropertyType = this.PropertyType;
    								
    				 dto.Top = this.Top;
    								
    				 dto.Left = this.Left;
    								
    				 dto.Width = this.Width;
    								
    				 dto.Height = this.Height;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.PropertyText = this.PropertyText;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ExpressTemplateCollection",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ExpressTemplateCollectionDTO))]
    public partial class ExpressTemplateCollection: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ExpressTemplateCollection ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TemplateId",DTOPropertyName="TemplateId",IsRequired=true, IsSerializable = true)]
        public System.Guid TemplateId
        {
            get
            {
                return _TemplateId;
            }
            set
            {
    
                if (_TemplateId != value)
                {
                          
                _TemplateId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _TemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ExpressTemplateCollectionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ExpressTemplateCollectionDTO dto = srcDTO as ExpressTemplateCollectionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.TemplateId = dto.TemplateId;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ExpressTemplateCollectionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ExpressTemplateCollectionDTO();
                base.ToBEData(ref todto);
    			ExpressTemplateCollectionDTO dto = todto as ExpressTemplateCollectionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.TemplateId = this.TemplateId;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ExpressTrace",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ExpressTraceDTO))]
    public partial class ExpressTrace: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ExpressTrace ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// OrderExpressRoute表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpRouteId",DTOPropertyName="ExpRouteId",IsRequired=true, IsSerializable = true)]
        public System.Guid ExpRouteId
        {
            get
            {
                return _ExpRouteId;
            }
            set
            {
    
                if (_ExpRouteId != value)
                {
                          
                _ExpRouteId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ExpRouteId;
        
    
        /// <summary>
        /// 操作时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AcceptTime",DTOPropertyName="AcceptTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime AcceptTime
        {
            get
            {
                return _AcceptTime;
            }
            set
            {
    
                if (_AcceptTime != value)
                {
                          
                _AcceptTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _AcceptTime;
        
    
        /// <summary>
        /// 描述（已经到达哪个转运站）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AcceptStation",DTOPropertyName="AcceptStation",IsRequired=true, IsSerializable = true)]
        public string AcceptStation
        {
            get
            {
                return _AcceptStation;
            }
            set
            {
    
                if (_AcceptStation != value)
                {
                          
                _AcceptStation = value; 
               
           		}
    		}
     	}
    
     	private string _AcceptStation;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=false, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ExpressTraceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ExpressTraceDTO dto = srcDTO as ExpressTraceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ExpRouteId = dto.ExpRouteId;
    								
    				 this.AcceptTime = dto.AcceptTime;
    								
    				 this.AcceptStation = dto.AcceptStation;
    								
    				 this.Remark = dto.Remark;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ExpressTraceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ExpressTraceDTO();
                base.ToBEData(ref todto);
    			ExpressTraceDTO dto = todto as ExpressTraceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ExpRouteId = this.ExpRouteId;
    								
    				 dto.AcceptTime = this.AcceptTime;
    								
    				 dto.AcceptStation = this.AcceptStation;
    								
    				 dto.Remark = this.Remark;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 指定包邮条件
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.FreightPartialFree",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.FreightPartialFreeDTO))]
    public partial class FreightPartialFree: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  FreightPartialFree ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 运送目的区域编码(以,分隔的串)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DestinationCodes",DTOPropertyName="DestinationCodes",IsRequired=true, IsSerializable = true)]
        public string DestinationCodes
        {
            get
            {
                return _DestinationCodes;
            }
            set
            {
    
                if (_DestinationCodes != value)
                {
                          
                _DestinationCodes = value; 
               
           		}
    		}
     	}
    
     	private string _DestinationCodes = "";
        
    
        /// <summary>
        /// 包邮条件:0件数(重量:kg); 1,金额 ; 2件数(重量)+金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreeType",DTOPropertyName="FreeType",IsRequired=true, IsSerializable = true)]
        public byte FreeType
        {
            get
            {
                return _FreeType;
            }
            set
            {
    
                if (_FreeType != value)
                {
                          
                _FreeType = value; 
               
           		}
    		}
     	}
    
     	private byte _FreeType;
        
    
        /// <summary>
        /// 包邮最低金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreePrice",DTOPropertyName="FreePrice",IsRequired=true, IsSerializable = true)]
        public decimal FreePrice
        {
            get
            {
                return _FreePrice;
            }
            set
            {
    
                if (_FreePrice != value)
                {
                          
                _FreePrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _FreePrice;
        
    
        /// <summary>
        /// 包邮最低件数(重量:kg)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreeCount",DTOPropertyName="FreeCount",IsRequired=true, IsSerializable = true)]
        public decimal FreeCount
        {
            get
            {
                return _FreeCount;
            }
            set
            {
    
                if (_FreeCount != value)
                {
                          
                _FreeCount = value; 
               
           		}
    		}
     	}
    
     	private decimal _FreeCount;
        
    
        /// <summary>
        /// 运费模板Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=true, IsSerializable = true)]
        public System.Guid FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _FreightTemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,FreightPartialFreeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                FreightPartialFreeDTO dto = srcDTO as FreightPartialFreeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.DestinationCodes = dto.DestinationCodes;
    								
    				 this.FreeType = dto.FreeType;
    								
    				 this.FreePrice = dto.FreePrice;
    								
    				 this.FreeCount = dto.FreeCount;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，FreightPartialFreeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new FreightPartialFreeDTO();
                base.ToBEData(ref todto);
    			FreightPartialFreeDTO dto = todto as FreightPartialFreeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.DestinationCodes = this.DestinationCodes;
    								
    				 dto.FreeType = this.FreeType;
    								
    				 dto.FreePrice = this.FreePrice;
    								
    				 dto.FreeCount = this.FreeCount;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.FreightRangeDetails",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.FreightRangeDetailsDTO))]
    public partial class FreightRangeDetails: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  FreightRangeDetails ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TemplateId",DTOPropertyName="TemplateId",IsRequired=true, IsSerializable = true)]
        public System.Guid TemplateId
        {
            get
            {
                return _TemplateId;
            }
            set
            {
    
                if (_TemplateId != value)
                {
                          
                _TemplateId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _TemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Min",DTOPropertyName="Min",IsRequired=true, IsSerializable = true)]
        public decimal Min
        {
            get
            {
                return _Min;
            }
            set
            {
    
                if (_Min != value)
                {
                          
                _Min = value; 
               
           		}
    		}
     	}
    
     	private decimal _Min;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Max",DTOPropertyName="Max",IsRequired=true, IsSerializable = true)]
        public decimal Max
        {
            get
            {
                return _Max;
            }
            set
            {
    
                if (_Max != value)
                {
                          
                _Max = value; 
               
           		}
    		}
     	}
    
     	private decimal _Max;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Cost",DTOPropertyName="Cost",IsRequired=true, IsSerializable = true)]
        public decimal Cost
        {
            get
            {
                return _Cost;
            }
            set
            {
    
                if (_Cost != value)
                {
                          
                _Cost = value; 
               
           		}
    		}
     	}
    
     	private decimal _Cost;
        
    
        /// <summary>
        /// 是否特定省份
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsSpecific",DTOPropertyName="IsSpecific",IsRequired=true, IsSerializable = true)]
        public bool IsSpecific
        {
            get
            {
                return _IsSpecific;
            }
            set
            {
    
                if (_IsSpecific != value)
                {
                          
                _IsSpecific = value; 
               
           		}
    		}
     	}
    
     	private bool _IsSpecific;
        
    
        /// <summary>
        /// 应用该区间运费的省份代码列表
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ProvinceCodes",DTOPropertyName="ProvinceCodes",IsRequired=false, IsSerializable = true)]
        public string ProvinceCodes
        {
            get
            {
                return _ProvinceCodes;
            }
            set
            {
    
                if (_ProvinceCodes != value)
                {
                          
                _ProvinceCodes = value; 
               
           		}
    		}
     	}
    
     	private string _ProvinceCodes;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,FreightRangeDetailsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                FreightRangeDetailsDTO dto = srcDTO as FreightRangeDetailsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.TemplateId = dto.TemplateId;
    								
    				 this.Min = dto.Min;
    								
    				 this.Max = dto.Max;
    								
    				 this.Cost = dto.Cost;
    								
    				 this.IsSpecific = dto.IsSpecific;
    								
    				 this.ProvinceCodes = dto.ProvinceCodes;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，FreightRangeDetailsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new FreightRangeDetailsDTO();
                base.ToBEData(ref todto);
    			FreightRangeDetailsDTO dto = todto as FreightRangeDetailsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.TemplateId = this.TemplateId;
    								
    				 dto.Min = this.Min;
    								
    				 dto.Max = this.Max;
    								
    				 dto.Cost = this.Cost;
    								
    				 dto.IsSpecific = this.IsSpecific;
    								
    				 dto.ProvinceCodes = this.ProvinceCodes;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.FreightTemplate",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.FreightTemplateDTO))]
    public partial class FreightTemplate: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  FreightTemplate ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 运送方式：快递=0，EMS=1，平邮=2
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightMethod",DTOPropertyName="FreightMethod",IsRequired=true, IsSerializable = true)]
        public int FreightMethod
        {
            get
            {
                return _FreightMethod;
            }
            set
            {
    
                if (_FreightMethod != value)
                {
                          
                _FreightMethod = value; 
               
           		}
    		}
     	}
    
     	private int _FreightMethod;
        
    
        /// <summary>
        /// 运送到
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTo",DTOPropertyName="FreightTo",IsRequired=true, IsSerializable = true)]
        public string FreightTo
        {
            get
            {
                return _FreightTo;
            }
            set
            {
    
                if (_FreightTo != value)
                {
                          
                _FreightTo = value; 
               
           		}
    		}
     	}
    
     	private string _FreightTo;
        
    
        /// <summary>
        /// 首件
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FirstCount",DTOPropertyName="FirstCount",IsRequired=true, IsSerializable = true)]
        public decimal FirstCount
        {
            get
            {
                return _FirstCount;
            }
            set
            {
    
                if (_FirstCount != value)
                {
                          
                _FirstCount = value; 
               
           		}
    		}
     	}
    
     	private decimal _FirstCount;
        
    
        /// <summary>
        /// 首件运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FirstCountPrice",DTOPropertyName="FirstCountPrice",IsRequired=true, IsSerializable = true)]
        public decimal FirstCountPrice
        {
            get
            {
                return _FirstCountPrice;
            }
            set
            {
    
                if (_FirstCountPrice != value)
                {
                          
                _FirstCountPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _FirstCountPrice;
        
    
        /// <summary>
        /// 续件
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NextCount",DTOPropertyName="NextCount",IsRequired=true, IsSerializable = true)]
        public decimal NextCount
        {
            get
            {
                return _NextCount;
            }
            set
            {
    
                if (_NextCount != value)
                {
                          
                _NextCount = value; 
               
           		}
    		}
     	}
    
     	private decimal _NextCount;
        
    
        /// <summary>
        /// 续件运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NextCountPrice",DTOPropertyName="NextCountPrice",IsRequired=true, IsSerializable = true)]
        public decimal NextCountPrice
        {
            get
            {
                return _NextCountPrice;
            }
            set
            {
    
                if (_NextCountPrice != value)
                {
                          
                _NextCountPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _NextCountPrice;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 是否包邮(0不包邮 1包邮)
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="IsFreeExp",DTOPropertyName="IsFreeExp",IsRequired=true, IsSerializable = true)]
        public bool IsFreeExp
        {
            get
            {
                return _IsFreeExp;
            }
            set
            {
    
                if (_IsFreeExp != value)
                {
                          
                _IsFreeExp = value; 
               
           		}
    		}
     	}
    
     	private bool _IsFreeExp;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 计价方式：0按件数，1按重量，2按体积
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=true, IsSerializable = true)]
        public byte PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private byte _PricingMethod;
        
    
        /// <summary>
        /// 包邮类型：0不包邮，1包邮，2部分包邮
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressType",DTOPropertyName="ExpressType",IsRequired=true, IsSerializable = true)]
        public byte ExpressType
        {
            get
            {
                return _ExpressType;
            }
            set
            {
    
                if (_ExpressType != value)
                {
                          
                _ExpressType = value; 
               
           		}
    		}
     	}
    
     	private byte _ExpressType;
        
    
        /// <summary>
        /// 0  不是   1 是默认模板
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDefault",DTOPropertyName="IsDefault",IsRequired=false, IsSerializable = true)]
        public Nullable<int> IsDefault
        {
            get
            {
                return _IsDefault;
            }
            set
            {
    
                if (_IsDefault != value)
                {
                          
                _IsDefault = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _IsDefault;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,FreightTemplateDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                FreightTemplateDTO dto = srcDTO as FreightTemplateDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.FreightMethod = dto.FreightMethod;
    								
    				 this.FreightTo = dto.FreightTo;
    								
    				 this.FirstCount = dto.FirstCount;
    								
    				 this.FirstCountPrice = dto.FirstCountPrice;
    								
    				 this.NextCount = dto.NextCount;
    								
    				 this.NextCountPrice = dto.NextCountPrice;
    								
    				 this.IsFreeExp = dto.IsFreeExp;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.ExpressType = dto.ExpressType;
    								
    				 this.IsDefault = dto.IsDefault;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，FreightTemplateDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new FreightTemplateDTO();
                base.ToBEData(ref todto);
    			FreightTemplateDTO dto = todto as FreightTemplateDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.FreightMethod = this.FreightMethod;
    								
    				 dto.FreightTo = this.FreightTo;
    								
    				 dto.FirstCount = this.FirstCount;
    								
    				 dto.FirstCountPrice = this.FirstCountPrice;
    								
    				 dto.NextCount = this.NextCount;
    								
    				 dto.NextCountPrice = this.NextCountPrice;
    								
    				 dto.IsFreeExp = this.IsFreeExp;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.ExpressType = this.ExpressType;
    								
    				 dto.IsDefault = this.IsDefault;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.FreightTemplateDetail",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.FreightTemplateDetailDTO))]
    public partial class FreightTemplateDetail: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  FreightTemplateDetail ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 运送到:河南,只包含一个省
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTo",DTOPropertyName="FreightTo",IsRequired=true, IsSerializable = true)]
        public string FreightTo
        {
            get
            {
                return _FreightTo;
            }
            set
            {
    
                if (_FreightTo != value)
                {
                          
                _FreightTo = value; 
               
           		}
    		}
     	}
    
     	private string _FreightTo;
        
    
        /// <summary>
        /// 首件,首重
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FirstCount",DTOPropertyName="FirstCount",IsRequired=true, IsSerializable = true)]
        public decimal FirstCount
        {
            get
            {
                return _FirstCount;
            }
            set
            {
    
                if (_FirstCount != value)
                {
                          
                _FirstCount = value; 
               
           		}
    		}
     	}
    
     	private decimal _FirstCount;
        
    
        /// <summary>
        /// 首件运费,首重运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FirstCountPrice",DTOPropertyName="FirstCountPrice",IsRequired=true, IsSerializable = true)]
        public decimal FirstCountPrice
        {
            get
            {
                return _FirstCountPrice;
            }
            set
            {
    
                if (_FirstCountPrice != value)
                {
                          
                _FirstCountPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _FirstCountPrice;
        
    
        /// <summary>
        /// 续件,续重
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NextCount",DTOPropertyName="NextCount",IsRequired=true, IsSerializable = true)]
        public decimal NextCount
        {
            get
            {
                return _NextCount;
            }
            set
            {
    
                if (_NextCount != value)
                {
                          
                _NextCount = value; 
               
           		}
    		}
     	}
    
     	private decimal _NextCount;
        
    
        /// <summary>
        /// 续件运费,续重运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NextCountPrice",DTOPropertyName="NextCountPrice",IsRequired=true, IsSerializable = true)]
        public decimal NextCountPrice
        {
            get
            {
                return _NextCountPrice;
            }
            set
            {
    
                if (_NextCountPrice != value)
                {
                          
                _NextCountPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _NextCountPrice;
        
    
        /// <summary>
        /// 运费模板ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=true, IsSerializable = true)]
        public System.Guid FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _FreightTemplateId;
        
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 最后修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 运送目的区域编码(以,分隔的串)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DestinationCodes",DTOPropertyName="DestinationCodes",IsRequired=true, IsSerializable = true)]
        public string DestinationCodes
        {
            get
            {
                return _DestinationCodes;
            }
            set
            {
    
                if (_DestinationCodes != value)
                {
                          
                _DestinationCodes = value; 
               
           		}
    		}
     	}
    
     	private string _DestinationCodes = "";
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,FreightTemplateDetailDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                FreightTemplateDetailDTO dto = srcDTO as FreightTemplateDetailDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.FreightTo = dto.FreightTo;
    								
    				 this.FirstCount = dto.FirstCount;
    								
    				 this.FirstCountPrice = dto.FirstCountPrice;
    								
    				 this.NextCount = dto.NextCount;
    								
    				 this.NextCountPrice = dto.NextCountPrice;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.DestinationCodes = dto.DestinationCodes;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，FreightTemplateDetailDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new FreightTemplateDetailDTO();
                base.ToBEData(ref todto);
    			FreightTemplateDetailDTO dto = todto as FreightTemplateDetailDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.FreightTo = this.FreightTo;
    								
    				 dto.FirstCount = this.FirstCount;
    								
    				 dto.FirstCountPrice = this.FirstCountPrice;
    								
    				 dto.NextCount = this.NextCount;
    								
    				 dto.NextCountPrice = this.NextCountPrice;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.DestinationCodes = this.DestinationCodes;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 生成用户获奖记录
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.GenUserPrizeRecord",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.GenUserPrizeRecordDTO))]
    public partial class GenUserPrizeRecord: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  GenUserPrizeRecord ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 用户Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 截止有效时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ValTime",DTOPropertyName="ValTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ValTime
        {
            get
            {
                return _ValTime;
            }
            set
            {
    
                if (_ValTime != value)
                {
                          
                _ValTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ValTime;
        
    
        /// <summary>
        /// 活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PromotionId;
        
    
        /// <summary>
        /// 是否已经购买
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsBuyed",DTOPropertyName="IsBuyed",IsRequired=true, IsSerializable = true)]
        public bool IsBuyed
        {
            get
            {
                return _IsBuyed;
            }
            set
            {
    
                if (_IsBuyed != value)
                {
                          
                _IsBuyed = value; 
               
           		}
    		}
     	}
    
     	private bool _IsBuyed;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,GenUserPrizeRecordDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                GenUserPrizeRecordDTO dto = srcDTO as GenUserPrizeRecordDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.Price = dto.Price;
    								
    				 this.ValTime = dto.ValTime;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.IsBuyed = dto.IsBuyed;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，GenUserPrizeRecordDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new GenUserPrizeRecordDTO();
                base.ToBEData(ref todto);
    			GenUserPrizeRecordDTO dto = todto as GenUserPrizeRecordDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.Price = this.Price;
    								
    				 dto.ValTime = this.ValTime;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.IsBuyed = this.IsBuyed;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-海信mq发送日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.HaiXinMqJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.HaiXinMqJournalDTO))]
    public partial class HaiXinMqJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  HaiXinMqJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 来源
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Source",DTOPropertyName="Source",IsRequired=true, IsSerializable = true)]
        public string Source
        {
            get
            {
                return _Source;
            }
            set
            {
    
                if (_Source != value)
                {
                          
                _Source = value; 
               
           		}
    		}
     	}
    
     	private string _Source;
        
    
        /// <summary>
        /// 结果
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Result",DTOPropertyName="Result",IsRequired=true, IsSerializable = true)]
        public string Result
        {
            get
            {
                return _Result;
            }
            set
            {
    
                if (_Result != value)
                {
                          
                _Result = value; 
               
           		}
    		}
     	}
    
     	private string _Result;
        
    
        /// <summary>
        /// 发送到mq的json
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,HaiXinMqJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                HaiXinMqJournalDTO dto = srcDTO as HaiXinMqJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.Source = dto.Source;
    								
    				 this.Result = dto.Result;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，HaiXinMqJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new HaiXinMqJournalDTO();
                base.ToBEData(ref todto);
    			HaiXinMqJournalDTO dto = todto as HaiXinMqJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.Source = this.Source;
    								
    				 dto.Result = this.Result;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.HotCommodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.HotCommodityDTO))]
    public partial class HotCommodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  HotCommodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 商品id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=true, IsSerializable = true)]
        public int TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private int _TotalReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=true, IsSerializable = true)]
        public int TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private int _TotalCollection;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=true, IsSerializable = true)]
        public int Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private int _Salesvolume;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,HotCommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                HotCommodityDTO dto = srcDTO as HotCommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Price = dto.Price;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.State = dto.State;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，HotCommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new HotCommodityDTO();
                base.ToBEData(ref todto);
    			HotCommodityDTO dto = todto as HotCommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Price = this.Price;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.State = this.State;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.HTJSInvoice",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.HTJSInvoiceDTO))]
    public partial class HTJSInvoice: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  HTJSInvoice ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 开票流水号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SwNo",DTOPropertyName="SwNo",IsRequired=true, IsSerializable = true)]
        public string SwNo
        {
            get
            {
                return _SwNo;
            }
            set
            {
    
                if (_SwNo != value)
                {
                          
                _SwNo = value; 
               
           		}
    		}
     	}
    
     	private string _SwNo;
        
    
        /// <summary>
        /// 开票返回码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FMsgCode",DTOPropertyName="FMsgCode",IsRequired=true, IsSerializable = true)]
        public string FMsgCode
        {
            get
            {
                return _FMsgCode;
            }
            set
            {
    
                if (_FMsgCode != value)
                {
                          
                _FMsgCode = value; 
               
           		}
    		}
     	}
    
     	private string _FMsgCode;
        
    
        /// <summary>
        /// 开票返回信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FMsg",DTOPropertyName="FMsg",IsRequired=true, IsSerializable = true)]
        public string FMsg
        {
            get
            {
                return _FMsg;
            }
            set
            {
    
                if (_FMsg != value)
                {
                          
                _FMsg = value; 
               
           		}
    		}
     	}
    
     	private string _FMsg;
        
    
        /// <summary>
        /// 发票代码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Fpdm",DTOPropertyName="Fpdm",IsRequired=false, IsSerializable = true)]
        public string Fpdm
        {
            get
            {
                return _Fpdm;
            }
            set
            {
    
                if (_Fpdm != value)
                {
                          
                _Fpdm = value; 
               
           		}
    		}
     	}
    
     	private string _Fpdm;
        
    
        /// <summary>
        /// 发票号码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Fphm",DTOPropertyName="Fphm",IsRequired=false, IsSerializable = true)]
        public string Fphm
        {
            get
            {
                return _Fphm;
            }
            set
            {
    
                if (_Fphm != value)
                {
                          
                _Fphm = value; 
               
           		}
    		}
     	}
    
     	private string _Fphm;
        
    
        /// <summary>
        /// 开票日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Kprq",DTOPropertyName="Kprq",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> Kprq
        {
            get
            {
                return _Kprq;
            }
            set
            {
    
                if (_Kprq != value)
                {
                          
                _Kprq = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _Kprq;
        
    
        /// <summary>
        /// 发票PDF流
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PdfContent",DTOPropertyName="PdfContent",IsRequired=false, IsSerializable = true)]
        public string PdfContent
        {
            get
            {
                return _PdfContent;
            }
            set
            {
    
                if (_PdfContent != value)
                {
                          
                _PdfContent = value; 
               
           		}
    		}
     	}
    
     	private string _PdfContent;
        
    
        /// <summary>
        /// MD5加密码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PdfMd5",DTOPropertyName="PdfMd5",IsRequired=false, IsSerializable = true)]
        public string PdfMd5
        {
            get
            {
                return _PdfMd5;
            }
            set
            {
    
                if (_PdfMd5 != value)
                {
                          
                _PdfMd5 = value; 
               
           		}
    		}
     	}
    
     	private string _PdfMd5;
        
    
        /// <summary>
        /// 下载发票返回码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SMsgCode",DTOPropertyName="SMsgCode",IsRequired=false, IsSerializable = true)]
        public string SMsgCode
        {
            get
            {
                return _SMsgCode;
            }
            set
            {
    
                if (_SMsgCode != value)
                {
                          
                _SMsgCode = value; 
               
           		}
    		}
     	}
    
     	private string _SMsgCode;
        
    
        /// <summary>
        /// 下载发票返回信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SMsg",DTOPropertyName="SMsg",IsRequired=false, IsSerializable = true)]
        public string SMsg
        {
            get
            {
                return _SMsg;
            }
            set
            {
    
                if (_SMsg != value)
                {
                          
                _SMsg = value; 
               
           		}
    		}
     	}
    
     	private string _SMsg;
        
    
        /// <summary>
        /// 0正常开票 1全额退款 2部分退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundType",DTOPropertyName="RefundType",IsRequired=true, IsSerializable = true)]
        public int RefundType
        {
            get
            {
                return _RefundType;
            }
            set
            {
    
                if (_RefundType != value)
                {
                          
                _RefundType = value; 
               
           		}
    		}
     	}
    
     	private int _RefundType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,HTJSInvoiceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                HTJSInvoiceDTO dto = srcDTO as HTJSInvoiceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SwNo = dto.SwNo;
    								
    				 this.FMsgCode = dto.FMsgCode;
    								
    				 this.FMsg = dto.FMsg;
    								
    				 this.Fpdm = dto.Fpdm;
    								
    				 this.Fphm = dto.Fphm;
    								
    				 this.Kprq = dto.Kprq;
    								
    				 this.PdfContent = dto.PdfContent;
    								
    				 this.PdfMd5 = dto.PdfMd5;
    								
    				 this.SMsgCode = dto.SMsgCode;
    								
    				 this.SMsg = dto.SMsg;
    								
    				 this.RefundType = dto.RefundType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，HTJSInvoiceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new HTJSInvoiceDTO();
                base.ToBEData(ref todto);
    			HTJSInvoiceDTO dto = todto as HTJSInvoiceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SwNo = this.SwNo;
    								
    				 dto.FMsgCode = this.FMsgCode;
    								
    				 dto.FMsg = this.FMsg;
    								
    				 dto.Fpdm = this.Fpdm;
    								
    				 dto.Fphm = this.Fphm;
    								
    				 dto.Kprq = this.Kprq;
    								
    				 dto.PdfContent = this.PdfContent;
    								
    				 dto.PdfMd5 = this.PdfMd5;
    								
    				 dto.SMsgCode = this.SMsgCode;
    								
    				 dto.SMsg = this.SMsg;
    								
    				 dto.RefundType = this.RefundType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 易捷北京内部商品类目
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.InnerCategory",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.InnerCategoryDTO))]
    public partial class InnerCategory: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  InnerCategory ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 创建时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 创建人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentId",DTOPropertyName="ParentId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
    
                if (_ParentId != value)
                {
                          
                _ParentId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ParentId;
        
    
        /// <summary>
        /// 当前级别
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentLevel",DTOPropertyName="CurrentLevel",IsRequired=true, IsSerializable = true)]
        public int CurrentLevel
        {
            get
            {
                return _CurrentLevel;
            }
            set
            {
    
                if (_CurrentLevel != value)
                {
                          
                _CurrentLevel = value; 
               
           		}
    		}
     	}
    
     	private int _CurrentLevel;
        
    
        /// <summary>
        /// 应用ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 排序标识
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Sort",DTOPropertyName="Sort",IsRequired=true, IsSerializable = true)]
        public int Sort
        {
            get
            {
                return _Sort;
            }
            set
            {
    
                if (_Sort != value)
                {
                          
                _Sort = value; 
               
           		}
    		}
     	}
    
     	private int _Sort;
        
    
        /// <summary>
        /// 是否已删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,InnerCategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                InnerCategoryDTO dto = srcDTO as InnerCategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ParentId = dto.ParentId;
    								
    				 this.CurrentLevel = dto.CurrentLevel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Sort = dto.Sort;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，InnerCategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new InnerCategoryDTO();
                base.ToBEData(ref todto);
    			InnerCategoryDTO dto = todto as InnerCategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ParentId = this.ParentId;
    								
    				 dto.CurrentLevel = this.CurrentLevel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Sort = this.Sort;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Invoice",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.InvoiceDTO))]
    public partial class Invoice: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Invoice ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InvoiceTitle",DTOPropertyName="InvoiceTitle",IsRequired=false, IsSerializable = true)]
        public string InvoiceTitle
        {
            get
            {
                return _InvoiceTitle;
            }
            set
            {
    
                if (_InvoiceTitle != value)
                {
                          
                _InvoiceTitle = value; 
               
           		}
    		}
     	}
    
     	private string _InvoiceTitle;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InvoiceContent",DTOPropertyName="InvoiceContent",IsRequired=false, IsSerializable = true)]
        public string InvoiceContent
        {
            get
            {
                return _InvoiceContent;
            }
            set
            {
    
                if (_InvoiceContent != value)
                {
                          
                _InvoiceContent = value; 
               
           		}
    		}
     	}
    
     	private string _InvoiceContent;
        
    
        /// <summary>
        /// 0不开发票，1个人，2公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InvoiceType",DTOPropertyName="InvoiceType",IsRequired=true, IsSerializable = true)]
        public int InvoiceType
        {
            get
            {
                return _InvoiceType;
            }
            set
            {
    
                if (_InvoiceType != value)
                {
                          
                _InvoiceType = value; 
               
           		}
    		}
     	}
    
     	private int _InvoiceType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 电子发票收票人手机号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiptPhone",DTOPropertyName="ReceiptPhone",IsRequired=false, IsSerializable = true)]
        public string ReceiptPhone
        {
            get
            {
                return _ReceiptPhone;
            }
            set
            {
    
                if (_ReceiptPhone != value)
                {
                          
                _ReceiptPhone = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiptPhone;
        
    
        /// <summary>
        /// 电子发票收票人邮箱
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiptEmail",DTOPropertyName="ReceiptEmail",IsRequired=false, IsSerializable = true)]
        public string ReceiptEmail
        {
            get
            {
                return _ReceiptEmail;
            }
            set
            {
    
                if (_ReceiptEmail != value)
                {
                          
                _ReceiptEmail = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiptEmail;
        
    
        /// <summary>
        /// 发票状态：0:待付款，1:待开票,2:已开票,3:已发出,4:已作废
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=false, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        
    
        /// <summary>
        /// 发票类型 1:增值税专用发票,2:电子发票,4:增值税专用发票
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Category",DTOPropertyName="Category",IsRequired=true, IsSerializable = true)]
        public int Category
        {
            get
            {
                return _Category;
            }
            set
            {
    
                if (_Category != value)
                {
                          
                _Category = value; 
               
           		}
    		}
     	}
    
     	private int _Category;
        
    
        /// <summary>
        /// 提交人Id（即买家）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,InvoiceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                InvoiceDTO dto = srcDTO as InvoiceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.InvoiceTitle = dto.InvoiceTitle;
    								
    				 this.InvoiceContent = dto.InvoiceContent;
    								
    				 this.InvoiceType = dto.InvoiceType;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ReceiptPhone = dto.ReceiptPhone;
    								
    				 this.ReceiptEmail = dto.ReceiptEmail;
    								
    				 this.State = dto.State;
    								
    				 this.Remark = dto.Remark;
    								
    				 this.Category = dto.Category;
    								
    				 this.SubId = dto.SubId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，InvoiceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new InvoiceDTO();
                base.ToBEData(ref todto);
    			InvoiceDTO dto = todto as InvoiceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.InvoiceTitle = this.InvoiceTitle;
    								
    				 dto.InvoiceContent = this.InvoiceContent;
    								
    				 dto.InvoiceType = this.InvoiceType;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ReceiptPhone = this.ReceiptPhone;
    								
    				 dto.ReceiptEmail = this.ReceiptEmail;
    								
    				 dto.State = this.State;
    								
    				 dto.Remark = this.Remark;
    								
    				 dto.Category = this.Category;
    								
    				 dto.SubId = this.SubId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 发票日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.InvoiceJounal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.InvoiceJounalDTO))]
    public partial class InvoiceJounal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  InvoiceJounal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 发票id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InvoiceId",DTOPropertyName="InvoiceId",IsRequired=true, IsSerializable = true)]
        public System.Guid InvoiceId
        {
            get
            {
                return _InvoiceId;
            }
            set
            {
    
                if (_InvoiceId != value)
                {
                          
                _InvoiceId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _InvoiceId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 处理人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 原状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateFrom",DTOPropertyName="StateFrom",IsRequired=true, IsSerializable = true)]
        public int StateFrom
        {
            get
            {
                return _StateFrom;
            }
            set
            {
    
                if (_StateFrom != value)
                {
                          
                _StateFrom = value; 
               
           		}
    		}
     	}
    
     	private int _StateFrom;
        
    
        /// <summary>
        /// 新状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateTo",DTOPropertyName="StateTo",IsRequired=true, IsSerializable = true)]
        public int StateTo
        {
            get
            {
                return _StateTo;
            }
            set
            {
    
                if (_StateTo != value)
                {
                          
                _StateTo = value; 
               
           		}
    		}
     	}
    
     	private int _StateTo;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,InvoiceJounalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                InvoiceJounalDTO dto = srcDTO as InvoiceJounalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.InvoiceId = dto.InvoiceId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.StateFrom = dto.StateFrom;
    								
    				 this.StateTo = dto.StateTo;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，InvoiceJounalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new InvoiceJounalDTO();
                base.ToBEData(ref todto);
    			InvoiceJounalDTO dto = todto as InvoiceJounalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.InvoiceId = this.InvoiceId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.StateFrom = this.StateFrom;
    								
    				 dto.StateTo = this.StateTo;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdAuditCommodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdAuditCommodityDTO))]
    public partial class JdAuditCommodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdAuditCommodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Number",DTOPropertyName="No_Number",IsRequired=true, IsSerializable = true)]
        public int No_Number
        {
            get
            {
                return _No_Number;
            }
            set
            {
    
                if (_No_Number != value)
                {
                          
                _No_Number = value; 
               
           		}
    		}
     	}
    
     	private int _No_Number;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=true, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=true, IsSerializable = true)]
        public int TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private int _TotalCollection;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=true, IsSerializable = true)]
        public int TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private int _TotalReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=true, IsSerializable = true)]
        public int Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private int _Salesvolume;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroundTime",DTOPropertyName="GroundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> GroundTime
        {
            get
            {
                return _GroundTime;
            }
            set
            {
    
                if (_GroundTime != value)
                {
                          
                _GroundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _GroundTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=false, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=false, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SortValue",DTOPropertyName="SortValue",IsRequired=true, IsSerializable = true)]
        public int SortValue
        {
            get
            {
                return _SortValue;
            }
            set
            {
    
                if (_SortValue != value)
                {
                          
                _SortValue = value; 
               
           		}
    		}
     	}
    
     	private int _SortValue;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FreightTemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnableSelfTake",DTOPropertyName="IsEnableSelfTake",IsRequired=true, IsSerializable = true)]
        public int IsEnableSelfTake
        {
            get
            {
                return _IsEnableSelfTake;
            }
            set
            {
    
                if (_IsEnableSelfTake != value)
                {
                          
                _IsEnableSelfTake = value; 
               
           		}
    		}
     	}
    
     	private int _IsEnableSelfTake;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Weight",DTOPropertyName="Weight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
    
                if (_Weight != value)
                {
                          
                _Weight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Weight;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=true, IsSerializable = true)]
        public byte PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private byte _PricingMethod = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleAreas",DTOPropertyName="SaleAreas",IsRequired=false, IsSerializable = true)]
        public string SaleAreas
        {
            get
            {
                return _SaleAreas;
            }
            set
            {
    
                if (_SaleAreas != value)
                {
                          
                _SaleAreas = value; 
               
           		}
    		}
     	}
    
     	private string _SaleAreas;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SharePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityType",DTOPropertyName="CommodityType",IsRequired=true, IsSerializable = true)]
        public int CommodityType
        {
            get
            {
                return _CommodityType;
            }
            set
            {
    
                if (_CommodityType != value)
                {
                          
                _CommodityType = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityType = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HtmlVideoPath",DTOPropertyName="HtmlVideoPath",IsRequired=false, IsSerializable = true)]
        public string HtmlVideoPath
        {
            get
            {
                return _HtmlVideoPath;
            }
            set
            {
    
                if (_HtmlVideoPath != value)
                {
                          
                _HtmlVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _HtmlVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MobileVideoPath",DTOPropertyName="MobileVideoPath",IsRequired=false, IsSerializable = true)]
        public string MobileVideoPath
        {
            get
            {
                return _MobileVideoPath;
            }
            set
            {
    
                if (_MobileVideoPath != value)
                {
                          
                _MobileVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _MobileVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoPic",DTOPropertyName="VideoPic",IsRequired=false, IsSerializable = true)]
        public string VideoPic
        {
            get
            {
                return _VideoPic;
            }
            set
            {
    
                if (_VideoPic != value)
                {
                          
                _VideoPic = value; 
               
           		}
    		}
     	}
    
     	private string _VideoPic;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoName",DTOPropertyName="VideoName",IsRequired=false, IsSerializable = true)]
        public string VideoName
        {
            get
            {
                return _VideoName;
            }
            set
            {
    
                if (_VideoName != value)
                {
                          
                _VideoName = value; 
               
           		}
    		}
     	}
    
     	private string _VideoName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScorePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadPercent",DTOPropertyName="SpreadPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SpreadPercent
        {
            get
            {
                return _SpreadPercent;
            }
            set
            {
    
                if (_SpreadPercent != value)
                {
                          
                _SpreadPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SpreadPercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreScale",DTOPropertyName="ScoreScale",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScoreScale
        {
            get
            {
                return _ScoreScale;
            }
            set
            {
    
                if (_ScoreScale != value)
                {
                          
                _ScoreScale = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScoreScale;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxClassCode",DTOPropertyName="TaxClassCode",IsRequired=false, IsSerializable = true)]
        public string TaxClassCode
        {
            get
            {
                return _TaxClassCode;
            }
            set
            {
    
                if (_TaxClassCode != value)
                {
                          
                _TaxClassCode = value; 
               
           		}
    		}
     	}
    
     	private string _TaxClassCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAssurance",DTOPropertyName="IsAssurance",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsAssurance
        {
            get
            {
                return _IsAssurance;
            }
            set
            {
    
                if (_IsAssurance != value)
                {
                          
                _IsAssurance = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsAssurance;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TechSpecs",DTOPropertyName="TechSpecs",IsRequired=false, IsSerializable = true)]
        public string TechSpecs
        {
            get
            {
                return _TechSpecs;
            }
            set
            {
    
                if (_TechSpecs != value)
                {
                          
                _TechSpecs = value; 
               
           		}
    		}
     	}
    
     	private string _TechSpecs;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleService",DTOPropertyName="SaleService",IsRequired=false, IsSerializable = true)]
        public string SaleService
        {
            get
            {
                return _SaleService;
            }
            set
            {
    
                if (_SaleService != value)
                {
                          
                _SaleService = value; 
               
           		}
    		}
     	}
    
     	private string _SaleService;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsReturns",DTOPropertyName="IsReturns",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsReturns
        {
            get
            {
                return _IsReturns;
            }
            set
            {
    
                if (_IsReturns != value)
                {
                          
                _IsReturns = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsReturns;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ServiceSettingId",DTOPropertyName="ServiceSettingId",IsRequired=false, IsSerializable = true)]
        public string ServiceSettingId
        {
            get
            {
                return _ServiceSettingId;
            }
            set
            {
    
                if (_ServiceSettingId != value)
                {
                          
                _ServiceSettingId = value; 
               
           		}
    		}
     	}
    
     	private string _ServiceSettingId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifieId",DTOPropertyName="ModifieId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifieId
        {
            get
            {
                return _ModifieId;
            }
            set
            {
    
                if (_ModifieId != value)
                {
                          
                _ModifieId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifieId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FieldName",DTOPropertyName="FieldName",IsRequired=false, IsSerializable = true)]
        public string FieldName
        {
            get
            {
                return _FieldName;
            }
            set
            {
    
                if (_FieldName != value)
                {
                          
                _FieldName = value; 
               
           		}
    		}
     	}
    
     	private string _FieldName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RowNo",DTOPropertyName="RowNo",IsRequired=true, IsSerializable = true)]
        public int RowNo
        {
            get
            {
                return _RowNo;
            }
            set
            {
    
                if (_RowNo != value)
                {
                          
                _RowNo = value; 
               
           		}
    		}
     	}
    
     	private int _RowNo;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdAuditCommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdAuditCommodityDTO dto = srcDTO as JdAuditCommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.No_Number = dto.No_Number;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Description = dto.Description;
    								
    				 this.State = dto.State;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroundTime = dto.GroundTime;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SortValue = dto.SortValue;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.IsEnableSelfTake = dto.IsEnableSelfTake;
    								
    				 this.Weight = dto.Weight;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.SaleAreas = dto.SaleAreas;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.CommodityType = dto.CommodityType;
    								
    				 this.HtmlVideoPath = dto.HtmlVideoPath;
    								
    				 this.MobileVideoPath = dto.MobileVideoPath;
    								
    				 this.VideoPic = dto.VideoPic;
    								
    				 this.VideoName = dto.VideoName;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.SpreadPercent = dto.SpreadPercent;
    								
    				 this.ScoreScale = dto.ScoreScale;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.TaxClassCode = dto.TaxClassCode;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.IsAssurance = dto.IsAssurance;
    								
    				 this.TechSpecs = dto.TechSpecs;
    								
    				 this.SaleService = dto.SaleService;
    								
    				 this.IsReturns = dto.IsReturns;
    								
    				 this.ServiceSettingId = dto.ServiceSettingId;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.ModifieId = dto.ModifieId;
    								
    				 this.FieldName = dto.FieldName;
    								
    				 this.RowNo = dto.RowNo;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdAuditCommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdAuditCommodityDTO();
                base.ToBEData(ref todto);
    			JdAuditCommodityDTO dto = todto as JdAuditCommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.No_Number = this.No_Number;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Description = this.Description;
    								
    				 dto.State = this.State;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroundTime = this.GroundTime;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SortValue = this.SortValue;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.IsEnableSelfTake = this.IsEnableSelfTake;
    								
    				 dto.Weight = this.Weight;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.SaleAreas = this.SaleAreas;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.CommodityType = this.CommodityType;
    								
    				 dto.HtmlVideoPath = this.HtmlVideoPath;
    								
    				 dto.MobileVideoPath = this.MobileVideoPath;
    								
    				 dto.VideoPic = this.VideoPic;
    								
    				 dto.VideoName = this.VideoName;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.SpreadPercent = this.SpreadPercent;
    								
    				 dto.ScoreScale = this.ScoreScale;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.TaxClassCode = this.TaxClassCode;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.IsAssurance = this.IsAssurance;
    								
    				 dto.TechSpecs = this.TechSpecs;
    								
    				 dto.SaleService = this.SaleService;
    								
    				 dto.IsReturns = this.IsReturns;
    								
    				 dto.ServiceSettingId = this.ServiceSettingId;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.ModifieId = this.ModifieId;
    								
    				 dto.FieldName = this.FieldName;
    								
    				 dto.RowNo = this.RowNo;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdAuditCommodityStock",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdAuditCommodityStockDTO))]
    public partial class JdAuditCommodityStock: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdAuditCommodityStock ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityStockId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=true, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=true, IsSerializable = true)]
        public decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private decimal _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=false, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ThumImg",DTOPropertyName="ThumImg",IsRequired=false, IsSerializable = true)]
        public string ThumImg
        {
            get
            {
                return _ThumImg;
            }
            set
            {
    
                if (_ThumImg != value)
                {
                          
                _ThumImg = value; 
               
           		}
    		}
     	}
    
     	private string _ThumImg;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CarouselImgs",DTOPropertyName="CarouselImgs",IsRequired=false, IsSerializable = true)]
        public string CarouselImgs
        {
            get
            {
                return _CarouselImgs;
            }
            set
            {
    
                if (_CarouselImgs != value)
                {
                          
                _CarouselImgs = value; 
               
           		}
    		}
     	}
    
     	private string _CarouselImgs;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JdPrice",DTOPropertyName="JdPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> JdPrice
        {
            get
            {
                return _JdPrice;
            }
            set
            {
    
                if (_JdPrice != value)
                {
                          
                _JdPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _JdPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JdCostPrice",DTOPropertyName="JdCostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> JdCostPrice
        {
            get
            {
                return _JdCostPrice;
            }
            set
            {
    
                if (_JdCostPrice != value)
                {
                          
                _JdCostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _JdCostPrice;
        
    
        /// <summary>
        /// 京东状态（1-已下架 2-已上架 3-无货 4-有货）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JdStatus",DTOPropertyName="JdStatus",IsRequired=true, IsSerializable = true)]
        public int JdStatus
        {
            get
            {
                return _JdStatus;
            }
            set
            {
    
                if (_JdStatus != value)
                {
                          
                _JdStatus = value; 
               
           		}
    		}
     	}
    
     	private int _JdStatus;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JdAuditCommodityId",DTOPropertyName="JdAuditCommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid JdAuditCommodityId
        {
            get
            {
                return _JdAuditCommodityId;
            }
            set
            {
    
                if (_JdAuditCommodityId != value)
                {
                          
                _JdAuditCommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _JdAuditCommodityId;
        
    
        /// <summary>
        /// 审核类型（1-进货价 2-售价 3-下架 4-库存）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditType",DTOPropertyName="AuditType",IsRequired=true, IsSerializable = true)]
        public int AuditType
        {
            get
            {
                return _AuditType;
            }
            set
            {
    
                if (_AuditType != value)
                {
                          
                _AuditType = value; 
               
           		}
    		}
     	}
    
     	private int _AuditType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdAuditCommodityStockDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdAuditCommodityStockDTO dto = srcDTO as JdAuditCommodityStockDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.ThumImg = dto.ThumImg;
    								
    				 this.CarouselImgs = dto.CarouselImgs;
    								
    				 this.JdPrice = dto.JdPrice;
    								
    				 this.JdCostPrice = dto.JdCostPrice;
    								
    				 this.JdStatus = dto.JdStatus;
    								
    				 this.JdAuditCommodityId = dto.JdAuditCommodityId;
    								
    				 this.AuditType = dto.AuditType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdAuditCommodityStockDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdAuditCommodityStockDTO();
                base.ToBEData(ref todto);
    			JdAuditCommodityStockDTO dto = todto as JdAuditCommodityStockDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.ThumImg = this.ThumImg;
    								
    				 dto.CarouselImgs = this.CarouselImgs;
    								
    				 dto.JdPrice = this.JdPrice;
    								
    				 dto.JdCostPrice = this.JdCostPrice;
    								
    				 dto.JdStatus = this.JdStatus;
    								
    				 dto.JdAuditCommodityId = this.JdAuditCommodityId;
    								
    				 dto.AuditType = this.AuditType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDAuditMode",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDAuditModeDTO))]
    public partial class JDAuditMode: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDAuditMode ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 现价审核状态（0-自动 1-手动）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PriceModeState",DTOPropertyName="PriceModeState",IsRequired=true, IsSerializable = true)]
        public int PriceModeState
        {
            get
            {
                return _PriceModeState;
            }
            set
            {
    
                if (_PriceModeState != value)
                {
                          
                _PriceModeState = value; 
               
           		}
    		}
     	}
    
     	private int _PriceModeState;
        
    
        /// <summary>
        /// 进货价审核方式（0-自动 1-手动）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostModeState",DTOPropertyName="CostModeState",IsRequired=true, IsSerializable = true)]
        public int CostModeState
        {
            get
            {
                return _CostModeState;
            }
            set
            {
    
                if (_CostModeState != value)
                {
                          
                _CostModeState = value; 
               
           		}
    		}
     	}
    
     	private int _CostModeState;
        
    
        /// <summary>
        /// 商铺编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifiedId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ModifiedOn;
        
    
        /// <summary>
        /// 下架无货商品审核方式（0-自动 1-手动）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StockModeState",DTOPropertyName="StockModeState",IsRequired=true, IsSerializable = true)]
        public int StockModeState
        {
            get
            {
                return _StockModeState;
            }
            set
            {
    
                if (_StockModeState != value)
                {
                          
                _StockModeState = value; 
               
           		}
    		}
     	}
    
     	private int _StockModeState;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDAuditModeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDAuditModeDTO dto = srcDTO as JDAuditModeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.PriceModeState = dto.PriceModeState;
    								
    				 this.CostModeState = dto.CostModeState;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.StockModeState = dto.StockModeState;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDAuditModeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDAuditModeDTO();
                base.ToBEData(ref todto);
    			JDAuditModeDTO dto = todto as JDAuditModeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.PriceModeState = this.PriceModeState;
    								
    				 dto.CostModeState = this.CostModeState;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedId = (Guid)this.ModifiedId;
    								
    				 dto.ModifiedOn = (DateTime)this.ModifiedOn;
    								
    				 dto.StockModeState = this.StockModeState;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdCommodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdCommodityDTO))]
    public partial class JdCommodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdCommodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Number",DTOPropertyName="No_Number",IsRequired=false, IsSerializable = true)]
        public Nullable<int> No_Number
        {
            get
            {
                return _No_Number;
            }
            set
            {
    
                if (_No_Number != value)
                {
                          
                _No_Number = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _No_Number;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Price;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Stock",DTOPropertyName="Stock",IsRequired=true, IsSerializable = true)]
        public int Stock
        {
            get
            {
                return _Stock;
            }
            set
            {
    
                if (_Stock != value)
                {
                          
                _Stock = value; 
               
           		}
    		}
     	}
    
     	private int _Stock;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=false, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=true, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalCollection",DTOPropertyName="TotalCollection",IsRequired=false, IsSerializable = true)]
        public Nullable<int> TotalCollection
        {
            get
            {
                return _TotalCollection;
            }
            set
            {
    
                if (_TotalCollection != value)
                {
                          
                _TotalCollection = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _TotalCollection;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalReview",DTOPropertyName="TotalReview",IsRequired=false, IsSerializable = true)]
        public Nullable<int> TotalReview
        {
            get
            {
                return _TotalReview;
            }
            set
            {
    
                if (_TotalReview != value)
                {
                          
                _TotalReview = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _TotalReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Salesvolume",DTOPropertyName="Salesvolume",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Salesvolume
        {
            get
            {
                return _Salesvolume;
            }
            set
            {
    
                if (_Salesvolume != value)
                {
                          
                _Salesvolume = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Salesvolume;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroundTime",DTOPropertyName="GroundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> GroundTime
        {
            get
            {
                return _GroundTime;
            }
            set
            {
    
                if (_GroundTime != value)
                {
                          
                _GroundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _GroundTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttribute",DTOPropertyName="ComAttribute",IsRequired=false, IsSerializable = true)]
        public string ComAttribute
        {
            get
            {
                return _ComAttribute;
            }
            set
            {
    
                if (_ComAttribute != value)
                {
                          
                _ComAttribute = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=false, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SortValue",DTOPropertyName="SortValue",IsRequired=false, IsSerializable = true)]
        public Nullable<int> SortValue
        {
            get
            {
                return _SortValue;
            }
            set
            {
    
                if (_SortValue != value)
                {
                          
                _SortValue = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _SortValue;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightTemplateId",DTOPropertyName="FreightTemplateId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> FreightTemplateId
        {
            get
            {
                return _FreightTemplateId;
            }
            set
            {
    
                if (_FreightTemplateId != value)
                {
                          
                _FreightTemplateId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _FreightTemplateId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MarketPrice",DTOPropertyName="MarketPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> MarketPrice
        {
            get
            {
                return _MarketPrice;
            }
            set
            {
    
                if (_MarketPrice != value)
                {
                          
                _MarketPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _MarketPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnableSelfTake",DTOPropertyName="IsEnableSelfTake",IsRequired=false, IsSerializable = true)]
        public Nullable<int> IsEnableSelfTake
        {
            get
            {
                return _IsEnableSelfTake;
            }
            set
            {
    
                if (_IsEnableSelfTake != value)
                {
                          
                _IsEnableSelfTake = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _IsEnableSelfTake;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Weight",DTOPropertyName="Weight",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
    
                if (_Weight != value)
                {
                          
                _Weight = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Weight;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PricingMethod",DTOPropertyName="PricingMethod",IsRequired=false, IsSerializable = true)]
        public Nullable<byte> PricingMethod
        {
            get
            {
                return _PricingMethod;
            }
            set
            {
    
                if (_PricingMethod != value)
                {
                          
                _PricingMethod = value; 
               
           		}
    		}
     	}
    
     	private Nullable<byte> _PricingMethod = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleAreas",DTOPropertyName="SaleAreas",IsRequired=false, IsSerializable = true)]
        public string SaleAreas
        {
            get
            {
                return _SaleAreas;
            }
            set
            {
    
                if (_SaleAreas != value)
                {
                          
                _SaleAreas = value; 
               
           		}
    		}
     	}
    
     	private string _SaleAreas;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SharePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityType",DTOPropertyName="CommodityType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> CommodityType
        {
            get
            {
                return _CommodityType;
            }
            set
            {
    
                if (_CommodityType != value)
                {
                          
                _CommodityType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _CommodityType = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HtmlVideoPath",DTOPropertyName="HtmlVideoPath",IsRequired=false, IsSerializable = true)]
        public string HtmlVideoPath
        {
            get
            {
                return _HtmlVideoPath;
            }
            set
            {
    
                if (_HtmlVideoPath != value)
                {
                          
                _HtmlVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _HtmlVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MobileVideoPath",DTOPropertyName="MobileVideoPath",IsRequired=false, IsSerializable = true)]
        public string MobileVideoPath
        {
            get
            {
                return _MobileVideoPath;
            }
            set
            {
    
                if (_MobileVideoPath != value)
                {
                          
                _MobileVideoPath = value; 
               
           		}
    		}
     	}
    
     	private string _MobileVideoPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoPic",DTOPropertyName="VideoPic",IsRequired=false, IsSerializable = true)]
        public string VideoPic
        {
            get
            {
                return _VideoPic;
            }
            set
            {
    
                if (_VideoPic != value)
                {
                          
                _VideoPic = value; 
               
           		}
    		}
     	}
    
     	private string _VideoPic;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VideoName",DTOPropertyName="VideoName",IsRequired=false, IsSerializable = true)]
        public string VideoName
        {
            get
            {
                return _VideoName;
            }
            set
            {
    
                if (_VideoName != value)
                {
                          
                _VideoName = value; 
               
           		}
    		}
     	}
    
     	private string _VideoName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePercent",DTOPropertyName="ScorePercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScorePercent
        {
            get
            {
                return _ScorePercent;
            }
            set
            {
    
                if (_ScorePercent != value)
                {
                          
                _ScorePercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScorePercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Duty;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadPercent",DTOPropertyName="SpreadPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SpreadPercent
        {
            get
            {
                return _SpreadPercent;
            }
            set
            {
    
                if (_SpreadPercent != value)
                {
                          
                _SpreadPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SpreadPercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreScale",DTOPropertyName="ScoreScale",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ScoreScale
        {
            get
            {
                return _ScoreScale;
            }
            set
            {
    
                if (_ScoreScale != value)
                {
                          
                _ScoreScale = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ScoreScale;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxClassCode",DTOPropertyName="TaxClassCode",IsRequired=false, IsSerializable = true)]
        public string TaxClassCode
        {
            get
            {
                return _TaxClassCode;
            }
            set
            {
    
                if (_TaxClassCode != value)
                {
                          
                _TaxClassCode = value; 
               
           		}
    		}
     	}
    
     	private string _TaxClassCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAssurance",DTOPropertyName="IsAssurance",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsAssurance
        {
            get
            {
                return _IsAssurance;
            }
            set
            {
    
                if (_IsAssurance != value)
                {
                          
                _IsAssurance = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsAssurance;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TechSpecs",DTOPropertyName="TechSpecs",IsRequired=false, IsSerializable = true)]
        public string TechSpecs
        {
            get
            {
                return _TechSpecs;
            }
            set
            {
    
                if (_TechSpecs != value)
                {
                          
                _TechSpecs = value; 
               
           		}
    		}
     	}
    
     	private string _TechSpecs;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleService",DTOPropertyName="SaleService",IsRequired=false, IsSerializable = true)]
        public string SaleService
        {
            get
            {
                return _SaleService;
            }
            set
            {
    
                if (_SaleService != value)
                {
                          
                _SaleService = value; 
               
           		}
    		}
     	}
    
     	private string _SaleService;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsReturns",DTOPropertyName="IsReturns",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsReturns
        {
            get
            {
                return _IsReturns;
            }
            set
            {
    
                if (_IsReturns != value)
                {
                          
                _IsReturns = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsReturns;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ServiceSettingId",DTOPropertyName="ServiceSettingId",IsRequired=false, IsSerializable = true)]
        public string ServiceSettingId
        {
            get
            {
                return _ServiceSettingId;
            }
            set
            {
    
                if (_ServiceSettingId != value)
                {
                          
                _ServiceSettingId = value; 
               
           		}
    		}
     	}
    
     	private string _ServiceSettingId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifieId",DTOPropertyName="ModifieId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifieId
        {
            get
            {
                return _ModifieId;
            }
            set
            {
    
                if (_ModifieId != value)
                {
                          
                _ModifieId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifieId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Isnsupport",DTOPropertyName="Isnsupport",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> Isnsupport
        {
            get
            {
                return _Isnsupport;
            }
            set
            {
    
                if (_Isnsupport != value)
                {
                          
                _Isnsupport = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _Isnsupport;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ErQiCode",DTOPropertyName="ErQiCode",IsRequired=false, IsSerializable = true)]
        public string ErQiCode
        {
            get
            {
                return _ErQiCode;
            }
            set
            {
    
                if (_ErQiCode != value)
                {
                          
                _ErQiCode = value; 
               
           		}
    		}
     	}
    
     	private string _ErQiCode;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdCommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdCommodityDTO dto = srcDTO as JdCommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.No_Number = dto.No_Number;
    								
    				 this.Price = dto.Price;
    								
    				 this.Stock = dto.Stock;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Description = dto.Description;
    								
    				 this.State = dto.State;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.TotalCollection = dto.TotalCollection;
    								
    				 this.TotalReview = dto.TotalReview;
    								
    				 this.Salesvolume = dto.Salesvolume;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroundTime = dto.GroundTime;
    								
    				 this.ComAttribute = dto.ComAttribute;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.SortValue = dto.SortValue;
    								
    				 this.FreightTemplateId = dto.FreightTemplateId;
    								
    				 this.MarketPrice = dto.MarketPrice;
    								
    				 this.IsEnableSelfTake = dto.IsEnableSelfTake;
    								
    				 this.Weight = dto.Weight;
    								
    				 this.PricingMethod = dto.PricingMethod;
    								
    				 this.SaleAreas = dto.SaleAreas;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.CommodityType = dto.CommodityType;
    								
    				 this.HtmlVideoPath = dto.HtmlVideoPath;
    								
    				 this.MobileVideoPath = dto.MobileVideoPath;
    								
    				 this.VideoPic = dto.VideoPic;
    								
    				 this.VideoName = dto.VideoName;
    								
    				 this.ScorePercent = dto.ScorePercent;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.SpreadPercent = dto.SpreadPercent;
    								
    				 this.ScoreScale = dto.ScoreScale;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.TaxClassCode = dto.TaxClassCode;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.IsAssurance = dto.IsAssurance;
    								
    				 this.TechSpecs = dto.TechSpecs;
    								
    				 this.SaleService = dto.SaleService;
    								
    				 this.IsReturns = dto.IsReturns;
    								
    				 this.ServiceSettingId = dto.ServiceSettingId;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.ModifieId = dto.ModifieId;
    								
    				 this.Isnsupport = dto.Isnsupport;
    								
    				 this.ErQiCode = dto.ErQiCode;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdCommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdCommodityDTO();
                base.ToBEData(ref todto);
    			JdCommodityDTO dto = todto as JdCommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.No_Number = this.No_Number;
    								
    				 dto.Price = this.Price;
    								
    				 dto.Stock = this.Stock;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Description = this.Description;
    								
    				 dto.State = this.State;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.TotalCollection = this.TotalCollection;
    								
    				 dto.TotalReview = this.TotalReview;
    								
    				 dto.Salesvolume = this.Salesvolume;
    								
    				 dto.ModifiedOn = (DateTime)this.ModifiedOn;
    								
    				 dto.GroundTime = this.GroundTime;
    								
    				 dto.ComAttribute = this.ComAttribute;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.SortValue = this.SortValue;
    								
    				 dto.FreightTemplateId = this.FreightTemplateId;
    								
    				 dto.MarketPrice = this.MarketPrice;
    								
    				 dto.IsEnableSelfTake = this.IsEnableSelfTake;
    								
    				 dto.Weight = this.Weight;
    								
    				 dto.PricingMethod = this.PricingMethod;
    								
    				 dto.SaleAreas = this.SaleAreas;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.CommodityType = this.CommodityType;
    								
    				 dto.HtmlVideoPath = this.HtmlVideoPath;
    								
    				 dto.MobileVideoPath = this.MobileVideoPath;
    								
    				 dto.VideoPic = this.VideoPic;
    								
    				 dto.VideoName = this.VideoName;
    								
    				 dto.ScorePercent = this.ScorePercent;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.SpreadPercent = this.SpreadPercent;
    								
    				 dto.ScoreScale = this.ScoreScale;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.TaxClassCode = this.TaxClassCode;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.IsAssurance = this.IsAssurance;
    								
    				 dto.TechSpecs = this.TechSpecs;
    								
    				 dto.SaleService = this.SaleService;
    								
    				 dto.IsReturns = this.IsReturns;
    								
    				 dto.ServiceSettingId = this.ServiceSettingId;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.ModifieId = this.ModifieId;
    								
    				 dto.Isnsupport = this.Isnsupport;
    								
    				 dto.ErQiCode = this.ErQiCode;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-京东订单
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDEclpOrder",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDEclpOrderDTO))]
    public partial class JDEclpOrder: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDEclpOrder ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 京东订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpOrderNo",DTOPropertyName="EclpOrderNo",IsRequired=true, IsSerializable = true)]
        public string EclpOrderNo
        {
            get
            {
                return _EclpOrderNo;
            }
            set
            {
    
                if (_EclpOrderNo != value)
                {
                          
                _EclpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _EclpOrderNo;
        
    
        /// <summary>
        /// 京东订单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpOrderState",DTOPropertyName="EclpOrderState",IsRequired=true, IsSerializable = true)]
        public int EclpOrderState
        {
            get
            {
                return _EclpOrderState;
            }
            set
            {
    
                if (_EclpOrderState != value)
                {
                          
                _EclpOrderState = value; 
               
           		}
    		}
     	}
    
     	private int _EclpOrderState;
        
    
        /// <summary>
        /// 京东订单状态描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpOrderStateName",DTOPropertyName="EclpOrderStateName",IsRequired=true, IsSerializable = true)]
        public string EclpOrderStateName
        {
            get
            {
                return _EclpOrderStateName;
            }
            set
            {
    
                if (_EclpOrderStateName != value)
                {
                          
                _EclpOrderStateName = value; 
               
           		}
    		}
     	}
    
     	private string _EclpOrderStateName;
        
    
        /// <summary>
        /// 下单时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderSubTime",DTOPropertyName="OrderSubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime OrderSubTime
        {
            get
            {
                return _OrderSubTime;
            }
            set
            {
    
                if (_OrderSubTime != value)
                {
                          
                _OrderSubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _OrderSubTime;
        
    
        /// <summary>
        /// 支付时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayTime",DTOPropertyName="PayTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime PayTime
        {
            get
            {
                return _PayTime;
            }
            set
            {
    
                if (_PayTime != value)
                {
                          
                _PayTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _PayTime;
        
    
        /// <summary>
        /// 取消订单时间
        /// </summary>
        /// <LongDescription>
        /// 暂时用不到
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="CancelTime",DTOPropertyName="CancelTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> CancelTime
        {
            get
            {
                return _CancelTime;
            }
            set
            {
    
                if (_CancelTime != value)
                {
                          
                _CancelTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _CancelTime;
        
    
        /// <summary>
        /// 发货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipTime",DTOPropertyName="ShipTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ShipTime
        {
            get
            {
                return _ShipTime;
            }
            set
            {
    
                if (_ShipTime != value)
                {
                          
                _ShipTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ShipTime;
        
    
        /// <summary>
        /// 妥投时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiveTime",DTOPropertyName="ReceiveTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ReceiveTime
        {
            get
            {
                return _ReceiveTime;
            }
            set
            {
    
                if (_ReceiveTime != value)
                {
                          
                _ReceiveTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ReceiveTime;
        
    
        /// <summary>
        /// 拒收时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RejectTime",DTOPropertyName="RejectTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> RejectTime
        {
            get
            {
                return _RejectTime;
            }
            set
            {
    
                if (_RejectTime != value)
                {
                          
                _RejectTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _RejectTime;
        
    
        /// <summary>
        /// 下单用户id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 商家名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 商家类型（0-自营他配；1-第三方；2-自营自配自采；3-自营自配统采）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppType",DTOPropertyName="AppType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> AppType
        {
            get
            {
                return _AppType;
            }
            set
            {
    
                if (_AppType != value)
                {
                          
                _AppType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _AppType;
        
    
        /// <summary>
        /// 供应商名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierName",DTOPropertyName="SupplierName",IsRequired=false, IsSerializable = true)]
        public string SupplierName
        {
            get
            {
                return _SupplierName;
            }
            set
            {
    
                if (_SupplierName != value)
                {
                          
                _SupplierName = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierName;
        
    
        /// <summary>
        /// 供应商编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierCode",DTOPropertyName="SupplierCode",IsRequired=false, IsSerializable = true)]
        public string SupplierCode
        {
            get
            {
                return _SupplierCode;
            }
            set
            {
    
                if (_SupplierCode != value)
                {
                          
                _SupplierCode = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierCode;
        
    
        /// <summary>
        /// 供应商类型（0-自营他配；1-第三方；2-自营自配自采；3-自营自配统采）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierType",DTOPropertyName="SupplierType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> SupplierType
        {
            get
            {
                return _SupplierType;
            }
            set
            {
    
                if (_SupplierType != value)
                {
                          
                _SupplierType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _SupplierType;
        
    
        /// <summary>
        /// 供应商发货方类型（0-商家自选物流 1-京东发货）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipperType",DTOPropertyName="ShipperType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> ShipperType
        {
            get
            {
                return _ShipperType;
            }
            set
            {
    
                if (_ShipperType != value)
                {
                          
                _ShipperType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _ShipperType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDEclpOrderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDEclpOrderDTO dto = srcDTO as JDEclpOrderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.EclpOrderNo = dto.EclpOrderNo;
    								
    				 this.EclpOrderState = dto.EclpOrderState;
    								
    				 this.EclpOrderStateName = dto.EclpOrderStateName;
    								
    				 this.OrderSubTime = dto.OrderSubTime;
    								
    				 this.PayTime = dto.PayTime;
    								
    				 this.CancelTime = dto.CancelTime;
    								
    				 this.ShipTime = dto.ShipTime;
    								
    				 this.ReceiveTime = dto.ReceiveTime;
    								
    				 this.RejectTime = dto.RejectTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppType = dto.AppType;
    								
    				 this.SupplierName = dto.SupplierName;
    								
    				 this.SupplierCode = dto.SupplierCode;
    								
    				 this.SupplierType = dto.SupplierType;
    								
    				 this.ShipperType = dto.ShipperType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDEclpOrderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDEclpOrderDTO();
                base.ToBEData(ref todto);
    			JDEclpOrderDTO dto = todto as JDEclpOrderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.EclpOrderNo = this.EclpOrderNo;
    								
    				 dto.EclpOrderState = this.EclpOrderState;
    								
    				 dto.EclpOrderStateName = this.EclpOrderStateName;
    								
    				 dto.OrderSubTime = this.OrderSubTime;
    								
    				 dto.PayTime = this.PayTime;
    								
    				 dto.CancelTime = this.CancelTime;
    								
    				 dto.ShipTime = this.ShipTime;
    								
    				 dto.ReceiveTime = this.ReceiveTime;
    								
    				 dto.RejectTime = this.RejectTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppType = this.AppType;
    								
    				 dto.SupplierName = this.SupplierName;
    								
    				 dto.SupplierCode = this.SupplierCode;
    								
    				 dto.SupplierType = this.SupplierType;
    								
    				 dto.ShipperType = this.ShipperType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-京东订单日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDEclpOrderJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDEclpOrderJournalDTO))]
    public partial class JDEclpOrderJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDEclpOrderJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 京东订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpOrderNo",DTOPropertyName="EclpOrderNo",IsRequired=true, IsSerializable = true)]
        public string EclpOrderNo
        {
            get
            {
                return _EclpOrderNo;
            }
            set
            {
    
                if (_EclpOrderNo != value)
                {
                          
                _EclpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _EclpOrderNo;
        
    
        /// <summary>
        /// 操作时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 操作详情
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 操作前订单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateFrom",DTOPropertyName="StateFrom",IsRequired=false, IsSerializable = true)]
        public Nullable<int> StateFrom
        {
            get
            {
                return _StateFrom;
            }
            set
            {
    
                if (_StateFrom != value)
                {
                          
                _StateFrom = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _StateFrom;
        
    
        /// <summary>
        /// 操作后订单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateTo",DTOPropertyName="StateTo",IsRequired=true, IsSerializable = true)]
        public int StateTo
        {
            get
            {
                return _StateTo;
            }
            set
            {
    
                if (_StateTo != value)
                {
                          
                _StateTo = value; 
               
           		}
    		}
     	}
    
     	private int _StateTo = 0;
        
    
        /// <summary>
        /// 同步数据json
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDEclpOrderJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDEclpOrderJournalDTO dto = srcDTO as JDEclpOrderJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.EclpOrderNo = dto.EclpOrderNo;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Details = dto.Details;
    								
    				 this.StateFrom = dto.StateFrom;
    								
    				 this.StateTo = dto.StateTo;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDEclpOrderJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDEclpOrderJournalDTO();
                base.ToBEData(ref todto);
    			JDEclpOrderJournalDTO dto = todto as JDEclpOrderJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.EclpOrderNo = this.EclpOrderNo;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.StateFrom = this.StateFrom;
    								
    				 dto.StateTo = this.StateTo;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-京东售后服务单
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDEclpOrderRefundAfterSales",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDEclpOrderRefundAfterSalesDTO))]
    public partial class JDEclpOrderRefundAfterSales: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDEclpOrderRefundAfterSales ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundAfterSalesId",DTOPropertyName="OrderRefundAfterSalesId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderRefundAfterSalesId
        {
            get
            {
                return _OrderRefundAfterSalesId;
            }
            set
            {
    
                if (_OrderRefundAfterSalesId != value)
                {
                          
                _OrderRefundAfterSalesId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderRefundAfterSalesId;
        
    
        /// <summary>
        /// 京东订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpOrderNo",DTOPropertyName="EclpOrderNo",IsRequired=true, IsSerializable = true)]
        public string EclpOrderNo
        {
            get
            {
                return _EclpOrderNo;
            }
            set
            {
    
                if (_EclpOrderNo != value)
                {
                          
                _EclpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _EclpOrderNo;
        
    
        /// <summary>
        /// 京东服务单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpServicesNo",DTOPropertyName="EclpServicesNo",IsRequired=true, IsSerializable = true)]
        public string EclpServicesNo
        {
            get
            {
                return _EclpServicesNo;
            }
            set
            {
    
                if (_EclpServicesNo != value)
                {
                          
                _EclpServicesNo = value; 
               
           		}
    		}
     	}
    
     	private string _EclpServicesNo;
        
    
        /// <summary>
        /// 京东服务单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpServicesState",DTOPropertyName="EclpServicesState",IsRequired=true, IsSerializable = true)]
        public int EclpServicesState
        {
            get
            {
                return _EclpServicesState;
            }
            set
            {
    
                if (_EclpServicesState != value)
                {
                          
                _EclpServicesState = value; 
               
           		}
    		}
     	}
    
     	private int _EclpServicesState;
        
    
        /// <summary>
        /// 京东服务单状态描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpServicesStateName",DTOPropertyName="EclpServicesStateName",IsRequired=true, IsSerializable = true)]
        public string EclpServicesStateName
        {
            get
            {
                return _EclpServicesStateName;
            }
            set
            {
    
                if (_EclpServicesStateName != value)
                {
                          
                _EclpServicesStateName = value; 
               
           		}
    		}
     	}
    
     	private string _EclpServicesStateName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 上门取件联系人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CustomerContactName",DTOPropertyName="CustomerContactName",IsRequired=false, IsSerializable = true)]
        public string CustomerContactName
        {
            get
            {
                return _CustomerContactName;
            }
            set
            {
    
                if (_CustomerContactName != value)
                {
                          
                _CustomerContactName = value; 
               
           		}
    		}
     	}
    
     	private string _CustomerContactName;
        
    
        /// <summary>
        /// 上门取件联系电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CustomerTel",DTOPropertyName="CustomerTel",IsRequired=false, IsSerializable = true)]
        public string CustomerTel
        {
            get
            {
                return _CustomerTel;
            }
            set
            {
    
                if (_CustomerTel != value)
                {
                          
                _CustomerTel = value; 
               
           		}
    		}
     	}
    
     	private string _CustomerTel;
        
    
        /// <summary>
        /// 上门取件地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickwareAddress",DTOPropertyName="PickwareAddress",IsRequired=false, IsSerializable = true)]
        public string PickwareAddress
        {
            get
            {
                return _PickwareAddress;
            }
            set
            {
    
                if (_PickwareAddress != value)
                {
                          
                _PickwareAddress = value; 
               
           		}
    		}
     	}
    
     	private string _PickwareAddress;
        
    
        /// <summary>
        /// 取件类型(1上门取件，2客户发货)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickwareType",DTOPropertyName="PickwareType",IsRequired=true, IsSerializable = true)]
        public int PickwareType
        {
            get
            {
                return _PickwareType;
            }
            set
            {
    
                if (_PickwareType != value)
                {
                          
                _PickwareType = value; 
               
           		}
    		}
     	}
    
     	private int _PickwareType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDEclpOrderRefundAfterSalesDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDEclpOrderRefundAfterSalesDTO dto = srcDTO as JDEclpOrderRefundAfterSalesDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.OrderRefundAfterSalesId = dto.OrderRefundAfterSalesId;
    								
    				 this.EclpOrderNo = dto.EclpOrderNo;
    								
    				 this.EclpServicesNo = dto.EclpServicesNo;
    								
    				 this.EclpServicesState = dto.EclpServicesState;
    								
    				 this.EclpServicesStateName = dto.EclpServicesStateName;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.CustomerContactName = dto.CustomerContactName;
    								
    				 this.CustomerTel = dto.CustomerTel;
    								
    				 this.PickwareAddress = dto.PickwareAddress;
    								
    				 this.PickwareType = dto.PickwareType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDEclpOrderRefundAfterSalesDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDEclpOrderRefundAfterSalesDTO();
                base.ToBEData(ref todto);
    			JDEclpOrderRefundAfterSalesDTO dto = todto as JDEclpOrderRefundAfterSalesDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.OrderRefundAfterSalesId = this.OrderRefundAfterSalesId;
    								
    				 dto.EclpOrderNo = this.EclpOrderNo;
    								
    				 dto.EclpServicesNo = this.EclpServicesNo;
    								
    				 dto.EclpServicesState = this.EclpServicesState;
    								
    				 dto.EclpServicesStateName = this.EclpServicesStateName;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.CustomerContactName = this.CustomerContactName;
    								
    				 dto.CustomerTel = this.CustomerTel;
    								
    				 dto.PickwareAddress = this.PickwareAddress;
    								
    				 dto.PickwareType = this.PickwareType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-京东售后服务单商品验收信息
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDEclpOrderRefundAfterSalesItem",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDEclpOrderRefundAfterSalesItemDTO))]
    public partial class JDEclpOrderRefundAfterSalesItem: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDEclpOrderRefundAfterSalesItem ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDEclpOrderRefundAfterSalesId",DTOPropertyName="JDEclpOrderRefundAfterSalesId",IsRequired=true, IsSerializable = true)]
        public System.Guid JDEclpOrderRefundAfterSalesId
        {
            get
            {
                return _JDEclpOrderRefundAfterSalesId;
            }
            set
            {
    
                if (_JDEclpOrderRefundAfterSalesId != value)
                {
                          
                _JDEclpOrderRefundAfterSalesId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _JDEclpOrderRefundAfterSalesId;
        
    
        /// <summary>
        /// 商品编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsvGoodsNo",DTOPropertyName="IsvGoodsNo",IsRequired=true, IsSerializable = true)]
        public string IsvGoodsNo
        {
            get
            {
                return _IsvGoodsNo;
            }
            set
            {
    
                if (_IsvGoodsNo != value)
                {
                          
                _IsvGoodsNo = value; 
               
           		}
    		}
     	}
    
     	private string _IsvGoodsNo;
        
    
        /// <summary>
        /// 备件条码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpareCode",DTOPropertyName="SpareCode",IsRequired=true, IsSerializable = true)]
        public string SpareCode
        {
            get
            {
                return _SpareCode;
            }
            set
            {
    
                if (_SpareCode != value)
                {
                          
                _SpareCode = value; 
               
           		}
    		}
     	}
    
     	private string _SpareCode;
        
    
        /// <summary>
        /// 登记类型(1:正常登记；2：异常登记)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PartReceiveType",DTOPropertyName="PartReceiveType",IsRequired=true, IsSerializable = true)]
        public int PartReceiveType
        {
            get
            {
                return _PartReceiveType;
            }
            set
            {
    
                if (_PartReceiveType != value)
                {
                          
                _PartReceiveType = value; 
               
           		}
    		}
     	}
    
     	private int _PartReceiveType;
        
    
        /// <summary>
        /// 商品状态(1：良品；2：残品；3：待再生)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GoodsStatus",DTOPropertyName="GoodsStatus",IsRequired=true, IsSerializable = true)]
        public int GoodsStatus
        {
            get
            {
                return _GoodsStatus;
            }
            set
            {
    
                if (_GoodsStatus != value)
                {
                          
                _GoodsStatus = value; 
               
           		}
    		}
     	}
    
     	private int _GoodsStatus;
        
    
        /// <summary>
        /// 商品类别(1：主商品；2：赠品)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WareType",DTOPropertyName="WareType",IsRequired=true, IsSerializable = true)]
        public int WareType
        {
            get
            {
                return _WareType;
            }
            set
            {
    
                if (_WareType != value)
                {
                          
                _WareType = value; 
               
           		}
    		}
     	}
    
     	private int _WareType;
        
    
        /// <summary>
        /// 售后审核意见
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApproveNotes",DTOPropertyName="ApproveNotes",IsRequired=true, IsSerializable = true)]
        public string ApproveNotes
        {
            get
            {
                return _ApproveNotes;
            }
            set
            {
    
                if (_ApproveNotes != value)
                {
                          
                _ApproveNotes = value; 
               
           		}
    		}
     	}
    
     	private string _ApproveNotes;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDEclpOrderRefundAfterSalesItemDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDEclpOrderRefundAfterSalesItemDTO dto = srcDTO as JDEclpOrderRefundAfterSalesItemDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.JDEclpOrderRefundAfterSalesId = dto.JDEclpOrderRefundAfterSalesId;
    								
    				 this.IsvGoodsNo = dto.IsvGoodsNo;
    								
    				 this.SpareCode = dto.SpareCode;
    								
    				 this.PartReceiveType = dto.PartReceiveType;
    								
    				 this.GoodsStatus = dto.GoodsStatus;
    								
    				 this.WareType = dto.WareType;
    								
    				 this.ApproveNotes = dto.ApproveNotes;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDEclpOrderRefundAfterSalesItemDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDEclpOrderRefundAfterSalesItemDTO();
                base.ToBEData(ref todto);
    			JDEclpOrderRefundAfterSalesItemDTO dto = todto as JDEclpOrderRefundAfterSalesItemDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.JDEclpOrderRefundAfterSalesId = this.JDEclpOrderRefundAfterSalesId;
    								
    				 dto.IsvGoodsNo = this.IsvGoodsNo;
    								
    				 dto.SpareCode = this.SpareCode;
    								
    				 dto.PartReceiveType = this.PartReceiveType;
    								
    				 dto.GoodsStatus = this.GoodsStatus;
    								
    				 dto.WareType = this.WareType;
    								
    				 dto.ApproveNotes = this.ApproveNotes;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-京东售后服务单日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDEclpOrderRefundAfterSalesJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDEclpOrderRefundAfterSalesJournalDTO))]
    public partial class JDEclpOrderRefundAfterSalesJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDEclpOrderRefundAfterSalesJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundAfterSalesId",DTOPropertyName="OrderRefundAfterSalesId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderRefundAfterSalesId
        {
            get
            {
                return _OrderRefundAfterSalesId;
            }
            set
            {
    
                if (_OrderRefundAfterSalesId != value)
                {
                          
                _OrderRefundAfterSalesId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderRefundAfterSalesId;
        
    
        /// <summary>
        /// 京东订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpOrderNo",DTOPropertyName="EclpOrderNo",IsRequired=true, IsSerializable = true)]
        public string EclpOrderNo
        {
            get
            {
                return _EclpOrderNo;
            }
            set
            {
    
                if (_EclpOrderNo != value)
                {
                          
                _EclpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _EclpOrderNo;
        
    
        /// <summary>
        /// 京东服务单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EclpServicesNo",DTOPropertyName="EclpServicesNo",IsRequired=true, IsSerializable = true)]
        public string EclpServicesNo
        {
            get
            {
                return _EclpServicesNo;
            }
            set
            {
    
                if (_EclpServicesNo != value)
                {
                          
                _EclpServicesNo = value; 
               
           		}
    		}
     	}
    
     	private string _EclpServicesNo;
        
    
        /// <summary>
        /// 操作时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 操作详情
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 操作前服务单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateFrom",DTOPropertyName="StateFrom",IsRequired=false, IsSerializable = true)]
        public Nullable<int> StateFrom
        {
            get
            {
                return _StateFrom;
            }
            set
            {
    
                if (_StateFrom != value)
                {
                          
                _StateFrom = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _StateFrom;
        
    
        /// <summary>
        /// 操作后服务单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateTo",DTOPropertyName="StateTo",IsRequired=true, IsSerializable = true)]
        public int StateTo
        {
            get
            {
                return _StateTo;
            }
            set
            {
    
                if (_StateTo != value)
                {
                          
                _StateTo = value; 
               
           		}
    		}
     	}
    
     	private int _StateTo = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDEclpOrderRefundAfterSalesId",DTOPropertyName="JDEclpOrderRefundAfterSalesId",IsRequired=true, IsSerializable = true)]
        public System.Guid JDEclpOrderRefundAfterSalesId
        {
            get
            {
                return _JDEclpOrderRefundAfterSalesId;
            }
            set
            {
    
                if (_JDEclpOrderRefundAfterSalesId != value)
                {
                          
                _JDEclpOrderRefundAfterSalesId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _JDEclpOrderRefundAfterSalesId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WarehouseName",DTOPropertyName="WarehouseName",IsRequired=false, IsSerializable = true)]
        public string WarehouseName
        {
            get
            {
                return _WarehouseName;
            }
            set
            {
    
                if (_WarehouseName != value)
                {
                          
                _WarehouseName = value; 
               
           		}
    		}
     	}
    
     	private string _WarehouseName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WarehouseNo",DTOPropertyName="WarehouseNo",IsRequired=false, IsSerializable = true)]
        public string WarehouseNo
        {
            get
            {
                return _WarehouseNo;
            }
            set
            {
    
                if (_WarehouseNo != value)
                {
                          
                _WarehouseNo = value; 
               
           		}
    		}
     	}
    
     	private string _WarehouseNo;
        
    
        /// <summary>
        /// 同步数据json
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDEclpOrderRefundAfterSalesJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDEclpOrderRefundAfterSalesJournalDTO dto = srcDTO as JDEclpOrderRefundAfterSalesJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.OrderRefundAfterSalesId = dto.OrderRefundAfterSalesId;
    								
    				 this.EclpOrderNo = dto.EclpOrderNo;
    								
    				 this.EclpServicesNo = dto.EclpServicesNo;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Details = dto.Details;
    								
    				 this.StateFrom = dto.StateFrom;
    								
    				 this.StateTo = dto.StateTo;
    								
    				 this.JDEclpOrderRefundAfterSalesId = dto.JDEclpOrderRefundAfterSalesId;
    								
    				 this.WarehouseName = dto.WarehouseName;
    								
    				 this.WarehouseNo = dto.WarehouseNo;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDEclpOrderRefundAfterSalesJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDEclpOrderRefundAfterSalesJournalDTO();
                base.ToBEData(ref todto);
    			JDEclpOrderRefundAfterSalesJournalDTO dto = todto as JDEclpOrderRefundAfterSalesJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.OrderRefundAfterSalesId = this.OrderRefundAfterSalesId;
    								
    				 dto.EclpOrderNo = this.EclpOrderNo;
    								
    				 dto.EclpServicesNo = this.EclpServicesNo;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.StateFrom = this.StateFrom;
    								
    				 dto.StateTo = this.StateTo;
    								
    				 dto.JDEclpOrderRefundAfterSalesId = this.JDEclpOrderRefundAfterSalesId;
    								
    				 dto.WarehouseName = this.WarehouseName;
    								
    				 dto.WarehouseNo = this.WarehouseNo;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdExpressTrace",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdExpressTraceDTO))]
    public partial class JdExpressTrace: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdExpressTrace ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// JdOrderItem表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpRouteId",DTOPropertyName="ExpRouteId",IsRequired=true, IsSerializable = true)]
        public System.Guid ExpRouteId
        {
            get
            {
                return _ExpRouteId;
            }
            set
            {
    
                if (_ExpRouteId != value)
                {
                          
                _ExpRouteId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ExpRouteId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AcceptTime",DTOPropertyName="AcceptTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime AcceptTime
        {
            get
            {
                return _AcceptTime;
            }
            set
            {
    
                if (_AcceptTime != value)
                {
                          
                _AcceptTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _AcceptTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AcceptStation",DTOPropertyName="AcceptStation",IsRequired=false, IsSerializable = true)]
        public string AcceptStation
        {
            get
            {
                return _AcceptStation;
            }
            set
            {
    
                if (_AcceptStation != value)
                {
                          
                _AcceptStation = value; 
               
           		}
    		}
     	}
    
     	private string _AcceptStation;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=false, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdExpressTraceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdExpressTraceDTO dto = srcDTO as JdExpressTraceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ExpRouteId = dto.ExpRouteId;
    								
    				 this.AcceptTime = dto.AcceptTime;
    								
    				 this.AcceptStation = dto.AcceptStation;
    								
    				 this.Remark = dto.Remark;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdExpressTraceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdExpressTraceDTO();
                base.ToBEData(ref todto);
    			JdExpressTraceDTO dto = todto as JdExpressTraceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ExpRouteId = this.ExpRouteId;
    								
    				 dto.AcceptTime = this.AcceptTime;
    								
    				 dto.AcceptStation = this.AcceptStation;
    								
    				 dto.Remark = this.Remark;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdJournalDTO))]
    public partial class JdJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 京东主订单id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="JdPorderId",DTOPropertyName="JdPorderId",IsRequired=true, IsSerializable = true)]
        public string JdPorderId
        {
            get
            {
                return _JdPorderId;
            }
            set
            {
    
                if (_JdPorderId != value)
                {
                          
                _JdPorderId = value; 
               
           		}
    		}
     	}
    
     	private string _JdPorderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 传给京东的零时id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="TempId",DTOPropertyName="TempId",IsRequired=true, IsSerializable = true)]
        public System.Guid TempId
        {
            get
            {
                return _TempId;
            }
            set
            {
    
                if (_TempId != value)
                {
                          
                _TempId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _TempId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 京东子订单
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="JdOrderId",DTOPropertyName="JdOrderId",IsRequired=false, IsSerializable = true)]
        public string JdOrderId
        {
            get
            {
                return _JdOrderId;
            }
            set
            {
    
                if (_JdOrderId != value)
                {
                          
                _JdOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _JdOrderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 我方主订单
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="MainOrderId",DTOPropertyName="MainOrderId",IsRequired=false, IsSerializable = true)]
        public string MainOrderId
        {
            get
            {
                return _MainOrderId;
            }
            set
            {
    
                if (_MainOrderId != value)
                {
                          
                _MainOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _MainOrderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 我方子订单
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=false, IsSerializable = true)]
        public string CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityOrderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 状态的改变说明
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdJournalDTO dto = srcDTO as JdJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.JdPorderId = dto.JdPorderId;
    								
    				 this.TempId = dto.TempId;
    								
    				 this.JdOrderId = dto.JdOrderId;
    								
    				 this.MainOrderId = dto.MainOrderId;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.Details = dto.Details;
    								
    				 this.SubTime = dto.SubTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdJournalDTO();
                base.ToBEData(ref todto);
    			JdJournalDTO dto = todto as JdJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.JdPorderId = this.JdPorderId;
    								
    				 dto.TempId = this.TempId;
    								
    				 dto.JdOrderId = this.JdOrderId;
    								
    				 dto.MainOrderId = this.MainOrderId;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.SubTime = this.SubTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Jdlogs",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdlogsDTO))]
    public partial class Jdlogs: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Jdlogs ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 日志内容
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=false, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 日志备注
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=false, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 删除标记
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Isdisable",DTOPropertyName="Isdisable",IsRequired=true, IsSerializable = true)]
        public bool Isdisable
        {
            get
            {
                return _Isdisable;
            }
            set
            {
    
                if (_Isdisable != value)
                {
                          
                _Isdisable = value; 
               
           		}
    		}
     	}
    
     	private bool _Isdisable;
        
    
        /// <summary>
        /// 第三方电商类型
        /// </summary>
        /// <LongDescription>
        /// 参考枚举ThirdECommerceTypeEnum
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ThirdECommerceType",DTOPropertyName="ThirdECommerceType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> ThirdECommerceType
        {
            get
            {
                return _ThirdECommerceType;
            }
            set
            {
    
                if (_ThirdECommerceType != value)
                {
                          
                _ThirdECommerceType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _ThirdECommerceType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdlogsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdlogsDTO dto = srcDTO as JdlogsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Content = dto.Content;
    								
    				 this.Remark = dto.Remark;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Isdisable = dto.Isdisable;
    								
    				 this.ThirdECommerceType = dto.ThirdECommerceType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdlogsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdlogsDTO();
                base.ToBEData(ref todto);
    			JdlogsDTO dto = todto as JdlogsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Content = this.Content;
    								
    				 dto.Remark = this.Remark;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Isdisable = this.Isdisable;
    								
    				 dto.ThirdECommerceType = this.ThirdECommerceType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdOrderItem",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdOrderItemDTO))]
    public partial class JdOrderItem: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdOrderItem ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 京东父订单id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="JdPorderId",DTOPropertyName="JdPorderId",IsRequired=true, IsSerializable = true)]
        public string JdPorderId
        {
            get
            {
                return _JdPorderId;
            }
            set
            {
    
                if (_JdPorderId != value)
                {
                          
                _JdPorderId = value; 
               
           		}
    		}
     	}
    
     	private string _JdPorderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 给京东的零时id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="TempId",DTOPropertyName="TempId",IsRequired=true, IsSerializable = true)]
        public System.Guid TempId
        {
            get
            {
                return _TempId;
            }
            set
            {
    
                if (_TempId != value)
                {
                          
                _TempId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _TempId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 京东子订单id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="JdOrderId",DTOPropertyName="JdOrderId",IsRequired=false, IsSerializable = true)]
        public string JdOrderId
        {
            get
            {
                return _JdOrderId;
            }
            set
            {
    
                if (_JdOrderId != value)
                {
                          
                _JdOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _JdOrderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 我方主订单id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="MainOrderId",DTOPropertyName="MainOrderId",IsRequired=false, IsSerializable = true)]
        public string MainOrderId
        {
            get
            {
                return _MainOrderId;
            }
            set
            {
    
                if (_MainOrderId != value)
                {
                          
                _MainOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _MainOrderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 我方子订单Id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=false, IsSerializable = true)]
        public string CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityOrderId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 跟踪状态
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 状态说明
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="StateContent",DTOPropertyName="StateContent",IsRequired=true, IsSerializable = true)]
        public string StateContent
        {
            get
            {
                return _StateContent;
            }
            set
            {
    
                if (_StateContent != value)
                {
                          
                _StateContent = value; 
               
           		}
    		}
     	}
    
     	private string _StateContent;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 提交时间
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 修改时间
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 京东商品SKUId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySkuId",DTOPropertyName="CommoditySkuId",IsRequired=false, IsSerializable = true)]
        public string CommoditySkuId
        {
            get
            {
                return _CommoditySkuId;
            }
            set
            {
    
                if (_CommoditySkuId != value)
                {
                          
                _CommoditySkuId = value; 
               
           		}
    		}
     	}
    
     	private string _CommoditySkuId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderItemId",DTOPropertyName="CommodityOrderItemId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> CommodityOrderItemId
        {
            get
            {
                return _CommodityOrderItemId;
            }
            set
            {
    
                if (_CommodityOrderItemId != value)
                {
                          
                _CommodityOrderItemId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _CommodityOrderItemId;
        
    
        /// <summary>
        /// 是否已退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsRefund",DTOPropertyName="IsRefund",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsRefund
        {
            get
            {
                return _IsRefund;
            }
            set
            {
    
                if (_IsRefund != value)
                {
                          
                _IsRefund = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsRefund;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdOrderItemDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdOrderItemDTO dto = srcDTO as JdOrderItemDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.JdPorderId = dto.JdPorderId;
    								
    				 this.TempId = dto.TempId;
    								
    				 this.JdOrderId = dto.JdOrderId;
    								
    				 this.MainOrderId = dto.MainOrderId;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.State = dto.State;
    								
    				 this.StateContent = dto.StateContent;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.CommoditySkuId = dto.CommoditySkuId;
    								
    				 this.CommodityOrderItemId = dto.CommodityOrderItemId;
    								
    				 this.IsRefund = dto.IsRefund;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdOrderItemDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdOrderItemDTO();
                base.ToBEData(ref todto);
    			JdOrderItemDTO dto = todto as JdOrderItemDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.JdPorderId = this.JdPorderId;
    								
    				 dto.TempId = this.TempId;
    								
    				 dto.JdOrderId = this.JdOrderId;
    								
    				 dto.MainOrderId = this.MainOrderId;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.State = this.State;
    								
    				 dto.StateContent = this.StateContent;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.CommoditySkuId = this.CommoditySkuId;
    								
    				 dto.CommodityOrderItemId = this.CommodityOrderItemId;
    								
    				 dto.IsRefund = this.IsRefund;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 京东售后退款表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JdOrderRefundAfterSales",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JdOrderRefundAfterSalesDTO))]
    public partial class JdOrderRefundAfterSales: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JdOrderRefundAfterSales ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 售后退款Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundAfterSalesId",DTOPropertyName="OrderRefundAfterSalesId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderRefundAfterSalesId
        {
            get
            {
                return _OrderRefundAfterSalesId;
            }
            set
            {
    
                if (_OrderRefundAfterSalesId != value)
                {
                          
                _OrderRefundAfterSalesId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderRefundAfterSalesId;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 京东订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JdOrderId",DTOPropertyName="JdOrderId",IsRequired=true, IsSerializable = true)]
        public string JdOrderId
        {
            get
            {
                return _JdOrderId;
            }
            set
            {
    
                if (_JdOrderId != value)
                {
                          
                _JdOrderId = value; 
               
           		}
    		}
     	}
    
     	private string _JdOrderId;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品SkuId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SkuId",DTOPropertyName="SkuId",IsRequired=true, IsSerializable = true)]
        public string SkuId
        {
            get
            {
                return _SkuId;
            }
            set
            {
    
                if (_SkuId != value)
                {
                          
                _SkuId = value; 
               
           		}
    		}
     	}
    
     	private string _SkuId;
        
    
        /// <summary>
        /// 服务单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AfsServiceId",DTOPropertyName="AfsServiceId",IsRequired=false, IsSerializable = true)]
        public string AfsServiceId
        {
            get
            {
                return _AfsServiceId;
            }
            set
            {
    
                if (_AfsServiceId != value)
                {
                          
                _AfsServiceId = value; 
               
           		}
    		}
     	}
    
     	private string _AfsServiceId;
        
    
        /// <summary>
        /// 服务单环节(申请阶段(10),审核不通过(20),客服审核(21),商家审核(22),京东收货(31),商家收货(32), 京东处理(33) 商家处理(34), 用户确认(40),完成(50), 取消(60))
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AfsServiceStep",DTOPropertyName="AfsServiceStep",IsRequired=true, IsSerializable = true)]
        public int AfsServiceStep
        {
            get
            {
                return _AfsServiceStep;
            }
            set
            {
    
                if (_AfsServiceStep != value)
                {
                          
                _AfsServiceStep = value; 
               
           		}
    		}
     	}
    
     	private int _AfsServiceStep;
        
    
        /// <summary>
        /// 服务单环节名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AfsServiceStepName",DTOPropertyName="AfsServiceStepName",IsRequired=true, IsSerializable = true)]
        public string AfsServiceStepName
        {
            get
            {
                return _AfsServiceStepName;
            }
            set
            {
    
                if (_AfsServiceStepName != value)
                {
                          
                _AfsServiceStepName = value; 
               
           		}
    		}
     	}
    
     	private string _AfsServiceStepName;
        
    
        /// <summary>
        /// 是否可取消(0代表否，1代表是)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Cancel",DTOPropertyName="Cancel",IsRequired=true, IsSerializable = true)]
        public short Cancel
        {
            get
            {
                return _Cancel;
            }
            set
            {
    
                if (_Cancel != value)
                {
                          
                _Cancel = value; 
               
           		}
    		}
     	}
    
     	private short _Cancel;
        
    
        /// <summary>
        /// 取件方式(必填 4 上门取件 7 客户送货 40客户发货)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickwareType",DTOPropertyName="PickwareType",IsRequired=true, IsSerializable = true)]
        public int PickwareType
        {
            get
            {
                return _PickwareType;
            }
            set
            {
    
                if (_PickwareType != value)
                {
                          
                _PickwareType = value; 
               
           		}
    		}
     	}
    
     	private int _PickwareType;
        
    
        /// <summary>
        /// 联系人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CustomerContactName",DTOPropertyName="CustomerContactName",IsRequired=true, IsSerializable = true)]
        public string CustomerContactName
        {
            get
            {
                return _CustomerContactName;
            }
            set
            {
    
                if (_CustomerContactName != value)
                {
                          
                _CustomerContactName = value; 
               
           		}
    		}
     	}
    
     	private string _CustomerContactName;
        
    
        /// <summary>
        /// 联系电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CustomerTel",DTOPropertyName="CustomerTel",IsRequired=true, IsSerializable = true)]
        public string CustomerTel
        {
            get
            {
                return _CustomerTel;
            }
            set
            {
    
                if (_CustomerTel != value)
                {
                          
                _CustomerTel = value; 
               
           		}
    		}
     	}
    
     	private string _CustomerTel;
        
    
        /// <summary>
        /// 取件地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickwareAddress",DTOPropertyName="PickwareAddress",IsRequired=true, IsSerializable = true)]
        public string PickwareAddress
        {
            get
            {
                return _PickwareAddress;
            }
            set
            {
    
                if (_PickwareAddress != value)
                {
                          
                _PickwareAddress = value; 
               
           		}
    		}
     	}
    
     	private string _PickwareAddress;
        
    
        /// <summary>
        /// 商品数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityNum",DTOPropertyName="CommodityNum",IsRequired=false, IsSerializable = true)]
        public Nullable<int> CommodityNum
        {
            get
            {
                return _CommodityNum;
            }
            set
            {
    
                if (_CommodityNum != value)
                {
                          
                _CommodityNum = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _CommodityNum;
        
    
        /// <summary>
        /// 多服务单号（,分割）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AfsServiceIds",DTOPropertyName="AfsServiceIds",IsRequired=false, IsSerializable = true)]
        public string AfsServiceIds
        {
            get
            {
                return _AfsServiceIds;
            }
            set
            {
    
                if (_AfsServiceIds != value)
                {
                          
                _AfsServiceIds = value; 
               
           		}
    		}
     	}
    
     	private string _AfsServiceIds;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JdOrderRefundAfterSalesDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JdOrderRefundAfterSalesDTO dto = srcDTO as JdOrderRefundAfterSalesDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.OrderRefundAfterSalesId = dto.OrderRefundAfterSalesId;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.JdOrderId = dto.JdOrderId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.SkuId = dto.SkuId;
    								
    				 this.AfsServiceId = dto.AfsServiceId;
    								
    				 this.AfsServiceStep = dto.AfsServiceStep;
    								
    				 this.AfsServiceStepName = dto.AfsServiceStepName;
    								
    				 this.Cancel = dto.Cancel;
    								
    				 this.PickwareType = dto.PickwareType;
    								
    				 this.CustomerContactName = dto.CustomerContactName;
    								
    				 this.CustomerTel = dto.CustomerTel;
    								
    				 this.PickwareAddress = dto.PickwareAddress;
    								
    				 this.CommodityNum = dto.CommodityNum;
    								
    				 this.AfsServiceIds = dto.AfsServiceIds;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JdOrderRefundAfterSalesDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JdOrderRefundAfterSalesDTO();
                base.ToBEData(ref todto);
    			JdOrderRefundAfterSalesDTO dto = todto as JdOrderRefundAfterSalesDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.OrderRefundAfterSalesId = this.OrderRefundAfterSalesId;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.JdOrderId = this.JdOrderId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.SkuId = this.SkuId;
    								
    				 dto.AfsServiceId = this.AfsServiceId;
    								
    				 dto.AfsServiceStep = this.AfsServiceStep;
    								
    				 dto.AfsServiceStepName = this.AfsServiceStepName;
    								
    				 dto.Cancel = this.Cancel;
    								
    				 dto.PickwareType = this.PickwareType;
    								
    				 dto.CustomerContactName = this.CustomerContactName;
    								
    				 dto.CustomerTel = this.CustomerTel;
    								
    				 dto.PickwareAddress = this.PickwareAddress;
    								
    				 dto.CommodityNum = this.CommodityNum;
    								
    				 dto.AfsServiceIds = this.AfsServiceIds;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-京东实时库存同步日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.JDStockJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JDStockJournalDTO))]
    public partial class JDStockJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  JDStockJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品属性Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityStockId;
        
    
        /// <summary>
        /// 商品二期编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityErQiCode",DTOPropertyName="CommodityErQiCode",IsRequired=false, IsSerializable = true)]
        public string CommodityErQiCode
        {
            get
            {
                return _CommodityErQiCode;
            }
            set
            {
    
                if (_CommodityErQiCode != value)
                {
                          
                _CommodityErQiCode = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityErQiCode;
        
    
        /// <summary>
        /// 商品属性二期编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockErQiCode",DTOPropertyName="CommodityStockErQiCode",IsRequired=false, IsSerializable = true)]
        public string CommodityStockErQiCode
        {
            get
            {
                return _CommodityStockErQiCode;
            }
            set
            {
    
                if (_CommodityStockErQiCode != value)
                {
                          
                _CommodityStockErQiCode = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityStockErQiCode;
        
    
        /// <summary>
        /// 商品原库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOldStock",DTOPropertyName="CommodityOldStock",IsRequired=true, IsSerializable = true)]
        public int CommodityOldStock
        {
            get
            {
                return _CommodityOldStock;
            }
            set
            {
    
                if (_CommodityOldStock != value)
                {
                          
                _CommodityOldStock = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityOldStock;
        
    
        /// <summary>
        /// 商品新库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityNewStock",DTOPropertyName="CommodityNewStock",IsRequired=true, IsSerializable = true)]
        public int CommodityNewStock
        {
            get
            {
                return _CommodityNewStock;
            }
            set
            {
    
                if (_CommodityNewStock != value)
                {
                          
                _CommodityNewStock = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityNewStock;
        
    
        /// <summary>
        /// 商品属性原库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockOldStock",DTOPropertyName="CommodityStockOldStock",IsRequired=true, IsSerializable = true)]
        public int CommodityStockOldStock
        {
            get
            {
                return _CommodityStockOldStock;
            }
            set
            {
    
                if (_CommodityStockOldStock != value)
                {
                          
                _CommodityStockOldStock = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityStockOldStock;
        
    
        /// <summary>
        /// 商品属性新库存
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockNewStock",DTOPropertyName="CommodityStockNewStock",IsRequired=true, IsSerializable = true)]
        public int CommodityStockNewStock
        {
            get
            {
                return _CommodityStockNewStock;
            }
            set
            {
    
                if (_CommodityStockNewStock != value)
                {
                          
                _CommodityStockNewStock = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityStockNewStock;
        
    
        /// <summary>
        /// 同步数据json
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JDStockJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JDStockJournalDTO dto = srcDTO as JDStockJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.CommodityErQiCode = dto.CommodityErQiCode;
    								
    				 this.CommodityStockErQiCode = dto.CommodityStockErQiCode;
    								
    				 this.CommodityOldStock = dto.CommodityOldStock;
    								
    				 this.CommodityNewStock = dto.CommodityNewStock;
    								
    				 this.CommodityStockOldStock = dto.CommodityStockOldStock;
    								
    				 this.CommodityStockNewStock = dto.CommodityStockNewStock;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JDStockJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JDStockJournalDTO();
                base.ToBEData(ref todto);
    			JDStockJournalDTO dto = todto as JDStockJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.CommodityErQiCode = this.CommodityErQiCode;
    								
    				 dto.CommodityStockErQiCode = this.CommodityStockErQiCode;
    								
    				 dto.CommodityOldStock = this.CommodityOldStock;
    								
    				 dto.CommodityNewStock = this.CommodityNewStock;
    								
    				 dto.CommodityStockOldStock = this.CommodityStockOldStock;
    								
    				 dto.CommodityStockNewStock = this.CommodityStockNewStock;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Journal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.JournalDTO))]
    public partial class Journal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Journal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 操作内容
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=true, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 订单ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 订单变化之前的状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateFrom",DTOPropertyName="StateFrom",IsRequired=false, IsSerializable = true)]
        public Nullable<int> StateFrom
        {
            get
            {
                return _StateFrom;
            }
            set
            {
    
                if (_StateFrom != value)
                {
                          
                _StateFrom = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _StateFrom;
        
    
        /// <summary>
        /// 订单变化目标状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateTo",DTOPropertyName="StateTo",IsRequired=true, IsSerializable = true)]
        public int StateTo
        {
            get
            {
                return _StateTo;
            }
            set
            {
    
                if (_StateTo != value)
                {
                          
                _StateTo = value; 
               
           		}
    		}
     	}
    
     	private int _StateTo = 0;
        
    
        /// <summary>
        /// 是否已将状态推送出去
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsPush",DTOPropertyName="IsPush",IsRequired=true, IsSerializable = true)]
        public bool IsPush
        {
            get
            {
                return _IsPush;
            }
            set
            {
    
                if (_IsPush != value)
                {
                          
                _IsPush = value; 
               
           		}
    		}
     	}
    
     	private bool _IsPush = false;
        
    
        /// <summary>
        /// 订单类型：0普通订单；1服务订单。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderType",DTOPropertyName="OrderType",IsRequired=true, IsSerializable = true)]
        public int OrderType
        {
            get
            {
                return _OrderType;
            }
            set
            {
    
                if (_OrderType != value)
                {
                          
                _OrderType = value; 
               
           		}
    		}
     	}
    
     	private int _OrderType = 0;
        
    
        /// <summary>
        /// 订单详情项id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderItemId",DTOPropertyName="CommodityOrderItemId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> CommodityOrderItemId
        {
            get
            {
                return _CommodityOrderItemId;
            }
            set
            {
    
                if (_CommodityOrderItemId != value)
                {
                          
                _CommodityOrderItemId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _CommodityOrderItemId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,JournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                JournalDTO dto = srcDTO as JournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Details = dto.Details;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.StateFrom = dto.StateFrom;
    								
    				 this.StateTo = dto.StateTo;
    								
    				 this.IsPush = dto.IsPush;
    								
    				 this.OrderType = dto.OrderType;
    								
    				 this.CommodityOrderItemId = dto.CommodityOrderItemId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，JournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new JournalDTO();
                base.ToBEData(ref todto);
    			JournalDTO dto = todto as JournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.StateFrom = this.StateFrom;
    								
    				 dto.StateTo = this.StateTo;
    								
    				 dto.IsPush = this.IsPush;
    								
    				 dto.OrderType = this.OrderType;
    								
    				 dto.CommodityOrderItemId = this.CommodityOrderItemId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 物流跟踪表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.LongisticsTrack",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.LongisticsTrackDTO))]
    public partial class LongisticsTrack: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  LongisticsTrack ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// AppName
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 供应商
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierName",DTOPropertyName="SupplierName",IsRequired=false, IsSerializable = true)]
        public string SupplierName
        {
            get
            {
                return _SupplierName;
            }
            set
            {
    
                if (_SupplierName != value)
                {
                          
                _SupplierName = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierName;
        
    
        /// <summary>
        /// 配送类型
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierType",DTOPropertyName="SupplierType",IsRequired=false, IsSerializable = true)]
        public string SupplierType
        {
            get
            {
                return _SupplierType;
            }
            set
            {
    
                if (_SupplierType != value)
                {
                          
                _SupplierType = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierType;
        
    
        /// <summary>
        /// 商品详情
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityDetail",DTOPropertyName="CommodityDetail",IsRequired=false, IsSerializable = true)]
        public string CommodityDetail
        {
            get
            {
                return _CommodityDetail;
            }
            set
            {
    
                if (_CommodityDetail != value)
                {
                          
                _CommodityDetail = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityDetail;
        
    
        /// <summary>
        /// 下订单时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Ordertime",DTOPropertyName="Ordertime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> Ordertime
        {
            get
            {
                return _Ordertime;
            }
            set
            {
    
                if (_Ordertime != value)
                {
                          
                _Ordertime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _Ordertime;
        
    
        /// <summary>
        /// 上传快递单号时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UploadExpresstime",DTOPropertyName="UploadExpresstime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> UploadExpresstime
        {
            get
            {
                return _UploadExpresstime;
            }
            set
            {
    
                if (_UploadExpresstime != value)
                {
                          
                _UploadExpresstime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _UploadExpresstime;
        
    
        /// <summary>
        /// 快递揽收时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Expressdeliverytime",DTOPropertyName="Expressdeliverytime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> Expressdeliverytime
        {
            get
            {
                return _Expressdeliverytime;
            }
            set
            {
    
                if (_Expressdeliverytime != value)
                {
                          
                _Expressdeliverytime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _Expressdeliverytime;
        
    
        /// <summary>
        /// 快递送达时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressSdtime",DTOPropertyName="ExpressSdtime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ExpressSdtime
        {
            get
            {
                return _ExpressSdtime;
            }
            set
            {
    
                if (_ExpressSdtime != value)
                {
                          
                _ExpressSdtime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ExpressSdtime;
        
    
        /// <summary>
        /// 确认收货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Confirmtime",DTOPropertyName="Confirmtime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> Confirmtime
        {
            get
            {
                return _Confirmtime;
            }
            set
            {
    
                if (_Confirmtime != value)
                {
                          
                _Confirmtime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _Confirmtime;
        
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 供应商编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierCode",DTOPropertyName="SupplierCode",IsRequired=false, IsSerializable = true)]
        public string SupplierCode
        {
            get
            {
                return _SupplierCode;
            }
            set
            {
    
                if (_SupplierCode != value)
                {
                          
                _SupplierCode = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierCode;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,LongisticsTrackDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                LongisticsTrackDTO dto = srcDTO as LongisticsTrackDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppName = dto.AppName;
    								
    				 this.SupplierName = dto.SupplierName;
    								
    				 this.SupplierType = dto.SupplierType;
    								
    				 this.CommodityDetail = dto.CommodityDetail;
    								
    				 this.Ordertime = dto.Ordertime;
    								
    				 this.UploadExpresstime = dto.UploadExpresstime;
    								
    				 this.Expressdeliverytime = dto.Expressdeliverytime;
    								
    				 this.ExpressSdtime = dto.ExpressSdtime;
    								
    				 this.Confirmtime = dto.Confirmtime;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.SupplierCode = dto.SupplierCode;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，LongisticsTrackDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new LongisticsTrackDTO();
                base.ToBEData(ref todto);
    			LongisticsTrackDTO dto = todto as LongisticsTrackDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.SupplierName = this.SupplierName;
    								
    				 dto.SupplierType = this.SupplierType;
    								
    				 dto.CommodityDetail = this.CommodityDetail;
    								
    				 dto.Ordertime = this.Ordertime;
    								
    				 dto.UploadExpresstime = this.UploadExpresstime;
    								
    				 dto.Expressdeliverytime = this.Expressdeliverytime;
    								
    				 dto.ExpressSdtime = this.ExpressSdtime;
    								
    				 dto.Confirmtime = this.Confirmtime;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.SupplierCode = this.SupplierCode;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.MainOrder",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.MainOrderDTO))]
    public partial class MainOrder: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  MainOrder ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MainOrderId",DTOPropertyName="MainOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid MainOrderId
        {
            get
            {
                return _MainOrderId;
            }
            set
            {
    
                if (_MainOrderId != value)
                {
                          
                _MainOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _MainOrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubOrderId",DTOPropertyName="SubOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubOrderId
        {
            get
            {
                return _SubOrderId;
            }
            set
            {
    
                if (_SubOrderId != value)
                {
                          
                _SubOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubOrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,MainOrderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                MainOrderDTO dto = srcDTO as MainOrderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.MainOrderId = dto.MainOrderId;
    								
    				 this.SubOrderId = dto.SubOrderId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，MainOrderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new MainOrderDTO();
                base.ToBEData(ref todto);
    			MainOrderDTO dto = todto as MainOrderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.MainOrderId = this.MainOrderId;
    								
    				 dto.SubOrderId = this.SubOrderId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.MallApply",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.MallApplyDTO))]
    public partial class MallApply: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  MallApply ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 创建时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 商户id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 申请入驻商城id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 申请人Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 商户名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 商城名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppName",DTOPropertyName="EsAppName",IsRequired=true, IsSerializable = true)]
        public string EsAppName
        {
            get
            {
                return _EsAppName;
            }
            set
            {
    
                if (_EsAppName != value)
                {
                          
                _EsAppName = value; 
               
           		}
    		}
     	}
    
     	private string _EsAppName;
        
    
        /// <summary>
        /// 审核意见
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyContent",DTOPropertyName="ApplyContent",IsRequired=false, IsSerializable = true)]
        public string ApplyContent
        {
            get
            {
                return _ApplyContent;
            }
            set
            {
    
                if (_ApplyContent != value)
                {
                          
                _ApplyContent = value; 
               
           		}
    		}
     	}
    
     	private string _ApplyContent;
        
    
        /// <summary>
        /// 商家类型（0-自营他配；1-第三方；2-自营自配自采；3-自营自配统采）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=true, IsSerializable = true)]
        public short Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private short _Type;
        

        #endregion
        #region 复杂类型属性
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 0、审核中【入驻申请】1、审核中【取消入驻】2、已审核【通过】3、已审核【不通过】4、已审核【挂起】5、取消入驻
        /// </LongDescription> 
    	//[JHBEProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public ApplyStateVO State
        {
            get
            {   
    			if (   _State == null)
                 {
    			    _State = new ApplyStateVO(); 
                 }       
                return _State;
            }
            set
            {                 
                _State = value;                  
            }
        }
        private ApplyStateVO _State = null;   
    
     
        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,MallApplyDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                MallApplyDTO dto = srcDTO as MallApplyDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.EsAppName = dto.EsAppName;
    								
    				 this.ApplyContent = dto.ApplyContent;
    								
    				 this.State = dto.State;
    								
    				 this.Type = dto.Type;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，MallApplyDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new MallApplyDTO();
                base.ToBEData(ref todto);
    			MallApplyDTO dto = todto as MallApplyDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.EsAppName = this.EsAppName;
    								
    				 dto.ApplyContent = this.ApplyContent;
    								
    				 dto.State = this.State;
    								
    				 dto.Type = this.Type;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 消息
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Message",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.MessageDTO))]
    public partial class Message: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Message ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 消息内容
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=true, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 发送状态:0-未发送,1-已发送
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Status",DTOPropertyName="Status",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Status
        {
            get
            {
                return _Status;
            }
            set
            {
    
                if (_Status != value)
                {
                          
                _Status = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Status;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,MessageDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                MessageDTO dto = srcDTO as MessageDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Content = dto.Content;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Status = dto.Status;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，MessageDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new MessageDTO();
                base.ToBEData(ref todto);
    			MessageDTO dto = todto as MessageDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Content = this.Content;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Status = this.Status;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 微小店
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Microshop",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.MicroshopDTO))]
    public partial class Microshop: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Microshop ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 用户logo
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Logo",DTOPropertyName="Logo",IsRequired=false, IsSerializable = true)]
        public string Logo
        {
            get
            {
                return _Logo;
            }
            set
            {
    
                if (_Logo != value)
                {
                          
                _Logo = value; 
               
           		}
    		}
     	}
    
     	private string _Logo;
        
    
        /// <summary>
        /// 二维码地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="QRCodeUrl",DTOPropertyName="QRCodeUrl",IsRequired=false, IsSerializable = true)]
        public string QRCodeUrl
        {
            get
            {
                return _QRCodeUrl;
            }
            set
            {
    
                if (_QRCodeUrl != value)
                {
                          
                _QRCodeUrl = value; 
               
           		}
    		}
     	}
    
     	private string _QRCodeUrl;
        
    
        /// <summary>
        /// 短地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Url",DTOPropertyName="Url",IsRequired=false, IsSerializable = true)]
        public string Url
        {
            get
            {
                return _Url;
            }
            set
            {
    
                if (_Url != value)
                {
                          
                _Url = value; 
               
           		}
    		}
     	}
    
     	private string _Url;
        
    
        /// <summary>
        /// 微小店key,分销商微小店代表分销商Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Key",DTOPropertyName="Key",IsRequired=true, IsSerializable = true)]
        public System.Guid Key
        {
            get
            {
                return _Key;
            }
            set
            {
    
                if (_Key != value)
                {
                          
                _Key = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _Key;
        

        #endregion
        #region 复杂类型属性
    	/// <summary>
        /// 微小店类型
        /// </summary>  
    	//[JHBEProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=true, IsSerializable = true)]
        public Jinher.AMP.BTP.Deploy.Enum.MicroshopTypeEnum Type
        {
            get
            {            
                return _Type;
            }
            set
            {                 
                _Type = value;                  
            }
        }
        private Jinher.AMP.BTP.Deploy.Enum.MicroshopTypeEnum _Type; 
       

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,MicroshopDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                MicroshopDTO dto = srcDTO as MicroshopDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.Logo = dto.Logo;
    								
    				 this.QRCodeUrl = dto.QRCodeUrl;
    								
    				 this.Url = dto.Url;
    								
    				 this.Type = dto.Type;
    								
    				 this.Key = dto.Key;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，MicroshopDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new MicroshopDTO();
                base.ToBEData(ref todto);
    			MicroshopDTO dto = todto as MicroshopDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.Logo = this.Logo;
    								
    				 dto.QRCodeUrl = this.QRCodeUrl;
    								
    				 dto.Url = this.Url;
    								
    				 dto.Type = this.Type;
    								
    				 dto.Key = this.Key;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 微小店商品(目前只保存下架商品)
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.MicroshopCom",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.MicroshopComDTO))]
    public partial class MicroshopCom: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  MicroshopCom ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="MicroshopId",DTOPropertyName="MicroshopId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> MicroshopId
        {
            get
            {
                return _MicroshopId;
            }
            set
            {
    
                if (_MicroshopId != value)
                {
                          
                _MicroshopId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _MicroshopId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,MicroshopComDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                MicroshopComDTO dto = srcDTO as MicroshopComDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.MicroshopId = dto.MicroshopId;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，MicroshopComDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new MicroshopComDTO();
                base.ToBEData(ref todto);
    			MicroshopComDTO dto = todto as MicroshopComDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.MicroshopId = this.MicroshopId;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单未支付过期
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderExpirePay",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderExpirePayDTO))]
    public partial class OrderExpirePay: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderExpirePay ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单未支付作废时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpirePayTime",DTOPropertyName="ExpirePayTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ExpirePayTime
        {
            get
            {
                return _ExpirePayTime;
            }
            set
            {
    
                if (_ExpirePayTime != value)
                {
                          
                _ExpirePayTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ExpirePayTime;
        
    
        /// <summary>
        /// 0：未处理，1：已处理
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _PromotionId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderExpirePayDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderExpirePayDTO dto = srcDTO as OrderExpirePayDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.ExpirePayTime = dto.ExpirePayTime;
    								
    				 this.State = dto.State;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderExpirePayDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderExpirePayDTO();
                base.ToBEData(ref todto);
    			OrderExpirePayDTO dto = todto as OrderExpirePayDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.ExpirePayTime = this.ExpirePayTime;
    								
    				 dto.State = this.State;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 物流运单信息
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderExpressRoute",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderExpressRouteDTO))]
    public partial class OrderExpressRoute: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderExpressRoute ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交用户
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 最后修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 物流公司名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipExpCo",DTOPropertyName="ShipExpCo",IsRequired=true, IsSerializable = true)]
        public string ShipExpCo
        {
            get
            {
                return _ShipExpCo;
            }
            set
            {
    
                if (_ShipExpCo != value)
                {
                          
                _ShipExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _ShipExpCo;
        
    
        /// <summary>
        /// 运单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpOrderNo",DTOPropertyName="ExpOrderNo",IsRequired=true, IsSerializable = true)]
        public string ExpOrderNo
        {
            get
            {
                return _ExpOrderNo;
            }
            set
            {
    
                if (_ExpOrderNo != value)
                {
                          
                _ExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpOrderNo;
        
    
        /// <summary>
        /// 物流公司简称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipperCode",DTOPropertyName="ShipperCode",IsRequired=true, IsSerializable = true)]
        public string ShipperCode
        {
            get
            {
                return _ShipperCode;
            }
            set
            {
    
                if (_ShipperCode != value)
                {
                          
                _ShipperCode = value; 
               
           		}
    		}
     	}
    
     	private string _ShipperCode;
        
    
        /// <summary>
        /// 状态：1、未订阅；2、已订阅；3、订阅失败
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public byte State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private byte _State = 0;
        
    
        /// <summary>
        /// 物流状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Deliverystatus",DTOPropertyName="Deliverystatus",IsRequired=false, IsSerializable = true)]
        public string Deliverystatus
        {
            get
            {
                return _Deliverystatus;
            }
            set
            {
    
                if (_Deliverystatus != value)
                {
                          
                _Deliverystatus = value; 
               
           		}
    		}
     	}
    
     	private string _Deliverystatus;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderExpressRouteDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderExpressRouteDTO dto = srcDTO as OrderExpressRouteDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ShipExpCo = dto.ShipExpCo;
    								
    				 this.ExpOrderNo = dto.ExpOrderNo;
    								
    				 this.ShipperCode = dto.ShipperCode;
    								
    				 this.State = dto.State;
    								
    				 this.Deliverystatus = dto.Deliverystatus;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderExpressRouteDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderExpressRouteDTO();
                base.ToBEData(ref todto);
    			OrderExpressRouteDTO dto = todto as OrderExpressRouteDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ShipExpCo = this.ShipExpCo;
    								
    				 dto.ExpOrderNo = this.ExpOrderNo;
    								
    				 dto.ShipperCode = this.ShipperCode;
    								
    				 dto.State = this.State;
    								
    				 dto.Deliverystatus = this.Deliverystatus;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderField",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderFieldDTO))]
    public partial class OrderField: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderField ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FirstField",DTOPropertyName="FirstField",IsRequired=false, IsSerializable = true)]
        public string FirstField
        {
            get
            {
                return _FirstField;
            }
            set
            {
    
                if (_FirstField != value)
                {
                          
                _FirstField = value; 
               
           		}
    		}
     	}
    
     	private string _FirstField;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SecondField",DTOPropertyName="SecondField",IsRequired=false, IsSerializable = true)]
        public string SecondField
        {
            get
            {
                return _SecondField;
            }
            set
            {
    
                if (_SecondField != value)
                {
                          
                _SecondField = value; 
               
           		}
    		}
     	}
    
     	private string _SecondField;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ThirdField",DTOPropertyName="ThirdField",IsRequired=false, IsSerializable = true)]
        public string ThirdField
        {
            get
            {
                return _ThirdField;
            }
            set
            {
    
                if (_ThirdField != value)
                {
                          
                _ThirdField = value; 
               
           		}
    		}
     	}
    
     	private string _ThirdField;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderFieldDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderFieldDTO dto = srcDTO as OrderFieldDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.FirstField = dto.FirstField;
    								
    				 this.SecondField = dto.SecondField;
    								
    				 this.ThirdField = dto.ThirdField;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderFieldDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderFieldDTO();
                base.ToBEData(ref todto);
    			OrderFieldDTO dto = todto as OrderFieldDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.FirstField = this.FirstField;
    								
    				 dto.SecondField = this.SecondField;
    								
    				 dto.ThirdField = this.ThirdField;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单商品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderItem",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderItemDTO))]
    public partial class OrderItem: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderItem ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 商品数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Number",DTOPropertyName="Number",IsRequired=true, IsSerializable = true)]
        public int Number
        {
            get
            {
                return _Number;
            }
            set
            {
    
                if (_Number != value)
                {
                          
                _Number = value; 
               
           		}
    		}
     	}
    
     	private int _Number;
        
    
        /// <summary>
        /// 成交价格（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentPrice",DTOPropertyName="CurrentPrice",IsRequired=true, IsSerializable = true)]
        public decimal CurrentPrice
        {
            get
            {
                return _CurrentPrice;
            }
            set
            {
    
                if (_CurrentPrice != value)
                {
                          
                _CurrentPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _CurrentPrice;
        
    
        /// <summary>
        /// 商品图片路径（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 订单ID（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 商品ID（必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 促销ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _PromotionId;
        
    
        /// <summary>
        /// 商品全属性ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttributeIds",DTOPropertyName="ComAttributeIds",IsRequired=false, IsSerializable = true)]
        public string ComAttributeIds
        {
            get
            {
                return _ComAttributeIds;
            }
            set
            {
    
                if (_ComAttributeIds != value)
                {
                          
                _ComAttributeIds = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttributeIds;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryNames",DTOPropertyName="CategoryNames",IsRequired=false, IsSerializable = true)]
        public string CategoryNames
        {
            get
            {
                return _CategoryNames;
            }
            set
            {
    
                if (_CategoryNames != value)
                {
                          
                _CategoryNames = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryNames;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityAttributes",DTOPropertyName="CommodityAttributes",IsRequired=false, IsSerializable = true)]
        public string CommodityAttributes
        {
            get
            {
                return _CommodityAttributes;
            }
            set
            {
    
                if (_CommodityAttributes != value)
                {
                          
                _CommodityAttributes = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityAttributes;
        
    
        /// <summary>
        /// 实际支付价格
        /// </summary>
        /// <LongDescription>
        /// 订单支付成功后设置此价格(订单项总价：单价*数量)
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="RealPrice",DTOPropertyName="RealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RealPrice
        {
            get
            {
                return _RealPrice;
            }
            set
            {
    
                if (_RealPrice != value)
                {
                          
                _RealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RealPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Intensity",DTOPropertyName="Intensity",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Intensity
        {
            get
            {
                return _Intensity;
            }
            set
            {
    
                if (_Intensity != value)
                {
                          
                _Intensity = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Intensity;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AlreadyReview",DTOPropertyName="AlreadyReview",IsRequired=true, IsSerializable = true)]
        public bool AlreadyReview
        {
            get
            {
                return _AlreadyReview;
            }
            set
            {
    
                if (_AlreadyReview != value)
                {
                          
                _AlreadyReview = value; 
               
           		}
    		}
     	}
    
     	private bool _AlreadyReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiscountPrice",DTOPropertyName="DiscountPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DiscountPrice
        {
            get
            {
                return _DiscountPrice;
            }
            set
            {
    
                if (_DiscountPrice != value)
                {
                          
                _DiscountPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DiscountPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _CommodityStockId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 订单项众销分成金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareMoney",DTOPropertyName="ShareMoney",IsRequired=true, IsSerializable = true)]
        public decimal ShareMoney
        {
            get
            {
                return _ShareMoney;
            }
            set
            {
    
                if (_ShareMoney != value)
                {
                          
                _ShareMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _ShareMoney = 0m;
        
    
        /// <summary>
        /// 活动描述(活动类型、或者会员等级)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionDesc",DTOPropertyName="PromotionDesc",IsRequired=false, IsSerializable = true)]
        public string PromotionDesc
        {
            get
            {
                return _PromotionDesc;
            }
            set
            {
    
                if (_PromotionDesc != value)
                {
                          
                _PromotionDesc = value; 
               
           		}
    		}
     	}
    
     	private string _PromotionDesc;
        
    
        /// <summary>
        /// 活动类型：0，限时打折；1，秒杀；2，预约，3，拼团；200，会员价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionType",DTOPropertyName="PromotionType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> PromotionType
        {
            get
            {
                return _PromotionType;
            }
            set
            {
    
                if (_PromotionType != value)
                {
                          
                _PromotionType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _PromotionType;
        
    
        /// <summary>
        /// 会员等级id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VipLevelId",DTOPropertyName="VipLevelId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> VipLevelId
        {
            get
            {
                return _VipLevelId;
            }
            set
            {
    
                if (_VipLevelId != value)
                {
                          
                _VipLevelId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _VipLevelId;
        
    
        /// <summary>
        /// 下单商品分类
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComCategoryId",DTOPropertyName="ComCategoryId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ComCategoryId
        {
            get
            {
                return _ComCategoryId;
            }
            set
            {
    
                if (_ComCategoryId != value)
                {
                          
                _ComCategoryId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ComCategoryId;
        
    
        /// <summary>
        /// 下单商品分类名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComCategoryName",DTOPropertyName="ComCategoryName",IsRequired=false, IsSerializable = true)]
        public string ComCategoryName
        {
            get
            {
                return _ComCategoryName;
            }
            set
            {
    
                if (_ComCategoryName != value)
                {
                          
                _ComCategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _ComCategoryName;
        
    
        /// <summary>
        /// 积分话费抵现
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePrice",DTOPropertyName="ScorePrice",IsRequired=true, IsSerializable = true)]
        public decimal ScorePrice
        {
            get
            {
                return _ScorePrice;
            }
            set
            {
    
                if (_ScorePrice != value)
                {
                          
                _ScorePrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _ScorePrice;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=true, IsSerializable = true)]
        public decimal Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private decimal _Duty;
        
    
        /// <summary>
        /// 销项税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 进项税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 商品进货价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 商品条码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 商品编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=false, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 商城品类Id（多个用,分割）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InnerCatetoryIds",DTOPropertyName="InnerCatetoryIds",IsRequired=false, IsSerializable = true)]
        public string InnerCatetoryIds
        {
            get
            {
                return _InnerCatetoryIds;
            }
            set
            {
    
                if (_InnerCatetoryIds != value)
                {
                          
                _InnerCatetoryIds = value; 
               
           		}
    		}
     	}
    
     	private string _InnerCatetoryIds;
        
    
        /// <summary>
        /// 商品单位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 油卡兑换券额度
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YouKaPercent",DTOPropertyName="YouKaPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> YouKaPercent
        {
            get
            {
                return _YouKaPercent;
            }
            set
            {
    
                if (_YouKaPercent != value)
                {
                          
                _YouKaPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _YouKaPercent;
        
    
        /// <summary>
        /// 预售发货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryTime",DTOPropertyName="DeliveryTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> DeliveryTime
        {
            get
            {
                return _DeliveryTime;
            }
            set
            {
    
                if (_DeliveryTime != value)
                {
                          
                _DeliveryTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _DeliveryTime;
        
    
        /// <summary>
        /// 预售发货天数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryDays",DTOPropertyName="DeliveryDays",IsRequired=false, IsSerializable = true)]
        public Nullable<int> DeliveryDays
        {
            get
            {
                return _DeliveryDays;
            }
            set
            {
    
                if (_DeliveryDays != value)
                {
                          
                _DeliveryDays = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _DeliveryDays;
        
    
        /// <summary>
        /// 0实物商品，1(虚拟商品)易捷卡密
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 易捷电子券活动编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 易捷电子券类型编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 是否有赠品
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HasPresent",DTOPropertyName="HasPresent",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> HasPresent
        {
            get
            {
                return _HasPresent;
            }
            set
            {
    
                if (_HasPresent != value)
                {
                          
                _HasPresent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _HasPresent;
        
    
        /// <summary>
        /// 优惠券拆分金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponPrice",DTOPropertyName="CouponPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CouponPrice
        {
            get
            {
                return _CouponPrice;
            }
            set
            {
    
                if (_CouponPrice != value)
                {
                          
                _CouponPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CouponPrice;
        
    
        /// <summary>
        /// 运费拆分价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightPrice",DTOPropertyName="FreightPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> FreightPrice
        {
            get
            {
                return _FreightPrice;
            }
            set
            {
    
                if (_FreightPrice != value)
                {
                          
                _FreightPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _FreightPrice;
        
    
        /// <summary>
        /// 易捷币拆分金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YjbPrice",DTOPropertyName="YjbPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> YjbPrice
        {
            get
            {
                return _YjbPrice;
            }
            set
            {
    
                if (_YjbPrice != value)
                {
                          
                _YjbPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _YjbPrice;
        
    
        /// <summary>
        /// 改价运费金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChangeFreightPrice",DTOPropertyName="ChangeFreightPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ChangeFreightPrice
        {
            get
            {
                return _ChangeFreightPrice;
            }
            set
            {
    
                if (_ChangeFreightPrice != value)
                {
                          
                _ChangeFreightPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ChangeFreightPrice;
        
    
        /// <summary>
        /// 订单改价金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChangeRealPrice",DTOPropertyName="ChangeRealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ChangeRealPrice
        {
            get
            {
                return _ChangeRealPrice;
            }
            set
            {
    
                if (_ChangeRealPrice != value)
                {
                          
                _ChangeRealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ChangeRealPrice;
        
    
        /// <summary>
        /// 退款状态
        /// </summary>
        /// <LongDescription>
        /// 0未退款 1退款中 2已退款 3售后-退货达成协议 4售后-拒绝退款申请 5售后-拒绝收货
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=false, IsSerializable = true)]
        public Nullable<int> State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _State;
        
    
        /// <summary>
        /// 退货物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpCo",DTOPropertyName="RefundExpCo",IsRequired=false, IsSerializable = true)]
        public string RefundExpCo
        {
            get
            {
                return _RefundExpCo;
            }
            set
            {
    
                if (_RefundExpCo != value)
                {
                          
                _RefundExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpCo;
        
    
        /// <summary>
        /// 退货物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpOrderNo",DTOPropertyName="RefundExpOrderNo",IsRequired=false, IsSerializable = true)]
        public string RefundExpOrderNo
        {
            get
            {
                return _RefundExpOrderNo;
            }
            set
            {
    
                if (_RefundExpOrderNo != value)
                {
                          
                _RefundExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpOrderNo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Specifications",DTOPropertyName="Specifications",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Specifications
        {
            get
            {
                return _Specifications;
            }
            set
            {
    
                if (_Specifications != value)
                {
                          
                _Specifications = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Specifications;
        
    
        /// <summary>
        /// 石化二期系统商品编号
        /// </summary>
        /// <LongDescription>
        /// 进销存对接
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ErQiCode",DTOPropertyName="ErQiCode",IsRequired=false, IsSerializable = true)]
        public string ErQiCode
        {
            get
            {
                return _ErQiCode;
            }
            set
            {
    
                if (_ErQiCode != value)
                {
                          
                _ErQiCode = value; 
               
           		}
    		}
     	}
    
     	private string _ErQiCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponPrice",DTOPropertyName="YJCouponPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> YJCouponPrice
        {
            get
            {
                return _YJCouponPrice;
            }
            set
            {
    
                if (_YJCouponPrice != value)
                {
                          
                _YJCouponPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _YJCouponPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        
    
        /// <summary>
        /// 商品备注编码
        /// </summary>
        /// <LongDescription>
        /// 京东、网易skuId
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="JDCode",DTOPropertyName="JDCode",IsRequired=false, IsSerializable = true)]
        public string JDCode
        {
            get
            {
                return _JDCode;
            }
            set
            {
    
                if (_JDCode != value)
                {
                          
                _JDCode = value; 
               
           		}
    		}
     	}
    
     	private string _JDCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State_Value",DTOPropertyName="State_Value",IsRequired=false, IsSerializable = true)]
        public string State_Value
        {
            get
            {
                return _State_Value;
            }
            set
            {
    
                if (_State_Value != value)
                {
                          
                _State_Value = value; 
               
           		}
    		}
     	}
    
     	private string _State_Value;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderItemDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderItemDTO dto = srcDTO as OrderItemDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Number = dto.Number;
    								
    				 this.CurrentPrice = dto.CurrentPrice;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.ComAttributeIds = dto.ComAttributeIds;
    								
    				 this.CategoryNames = dto.CategoryNames;
    								
    				 this.CommodityAttributes = dto.CommodityAttributes;
    								
    				 this.RealPrice = dto.RealPrice;
    								
    				 this.Intensity = dto.Intensity;
    								
    				 this.AlreadyReview = dto.AlreadyReview;
    								
    				 this.DiscountPrice = dto.DiscountPrice;
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ShareMoney = dto.ShareMoney;
    								
    				 this.PromotionDesc = dto.PromotionDesc;
    								
    				 this.PromotionType = dto.PromotionType;
    								
    				 this.VipLevelId = dto.VipLevelId;
    								
    				 this.ComCategoryId = dto.ComCategoryId;
    								
    				 this.ComCategoryName = dto.ComCategoryName;
    								
    				 this.ScorePrice = dto.ScorePrice;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.InnerCatetoryIds = dto.InnerCatetoryIds;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.YouKaPercent = dto.YouKaPercent;
    								
    				 this.DeliveryTime = dto.DeliveryTime;
    								
    				 this.DeliveryDays = dto.DeliveryDays;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.HasPresent = dto.HasPresent;
    								
    				 this.CouponPrice = dto.CouponPrice;
    								
    				 this.FreightPrice = dto.FreightPrice;
    								
    				 this.YjbPrice = dto.YjbPrice;
    								
    				 this.ChangeFreightPrice = dto.ChangeFreightPrice;
    								
    				 this.ChangeRealPrice = dto.ChangeRealPrice;
    								
    				 this.State = dto.State;
    								
    				 this.RefundExpCo = dto.RefundExpCo;
    								
    				 this.RefundExpOrderNo = dto.RefundExpOrderNo;
    								
    				 this.Specifications = dto.Specifications;
    								
    				 this.ErQiCode = dto.ErQiCode;
    								
    				 this.YJCouponPrice = dto.YJCouponPrice;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.JDCode = dto.JDCode;
    								
    				 this.State_Value = dto.State_Value;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderItemDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderItemDTO();
                base.ToBEData(ref todto);
    			OrderItemDTO dto = todto as OrderItemDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Number = this.Number;
    								
    				 dto.CurrentPrice = this.CurrentPrice;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.ComAttributeIds = this.ComAttributeIds;
    								
    				 dto.CategoryNames = this.CategoryNames;
    								
    				 dto.CommodityAttributes = this.CommodityAttributes;
    								
    				 dto.RealPrice = this.RealPrice;
    								
    				 dto.Intensity = this.Intensity;
    								
    				 dto.AlreadyReview = this.AlreadyReview;
    								
    				 dto.DiscountPrice = this.DiscountPrice;
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ShareMoney = this.ShareMoney;
    								
    				 dto.PromotionDesc = this.PromotionDesc;
    								
    				 dto.PromotionType = this.PromotionType;
    								
    				 dto.VipLevelId = this.VipLevelId;
    								
    				 dto.ComCategoryId = this.ComCategoryId;
    								
    				 dto.ComCategoryName = this.ComCategoryName;
    								
    				 dto.ScorePrice = this.ScorePrice;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.InnerCatetoryIds = this.InnerCatetoryIds;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.YouKaPercent = this.YouKaPercent;
    								
    				 dto.DeliveryTime = this.DeliveryTime;
    								
    				 dto.DeliveryDays = this.DeliveryDays;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.HasPresent = this.HasPresent;
    								
    				 dto.CouponPrice = this.CouponPrice;
    								
    				 dto.FreightPrice = this.FreightPrice;
    								
    				 dto.YjbPrice = this.YjbPrice;
    								
    				 dto.ChangeFreightPrice = this.ChangeFreightPrice;
    								
    				 dto.ChangeRealPrice = this.ChangeRealPrice;
    								
    				 dto.State = this.State;
    								
    				 dto.RefundExpCo = this.RefundExpCo;
    								
    				 dto.RefundExpOrderNo = this.RefundExpOrderNo;
    								
    				 dto.Specifications = this.Specifications;
    								
    				 dto.ErQiCode = this.ErQiCode;
    								
    				 dto.YJCouponPrice = this.YJCouponPrice;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.JDCode = this.JDCode;
    								
    				 dto.State_Value = this.State_Value;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单赠品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderItemPresent",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderItemPresentDTO))]
    public partial class OrderItemPresent: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderItemPresent ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 商品数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Number",DTOPropertyName="Number",IsRequired=true, IsSerializable = true)]
        public int Number
        {
            get
            {
                return _Number;
            }
            set
            {
    
                if (_Number != value)
                {
                          
                _Number = value; 
               
           		}
    		}
     	}
    
     	private int _Number;
        
    
        /// <summary>
        /// 成交价格（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentPrice",DTOPropertyName="CurrentPrice",IsRequired=true, IsSerializable = true)]
        public decimal CurrentPrice
        {
            get
            {
                return _CurrentPrice;
            }
            set
            {
    
                if (_CurrentPrice != value)
                {
                          
                _CurrentPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _CurrentPrice;
        
    
        /// <summary>
        /// 商品图片路径（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 订单ID（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 商品ID（必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 促销ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _PromotionId;
        
    
        /// <summary>
        /// 商品全属性ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttributeIds",DTOPropertyName="ComAttributeIds",IsRequired=false, IsSerializable = true)]
        public string ComAttributeIds
        {
            get
            {
                return _ComAttributeIds;
            }
            set
            {
    
                if (_ComAttributeIds != value)
                {
                          
                _ComAttributeIds = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttributeIds;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryNames",DTOPropertyName="CategoryNames",IsRequired=false, IsSerializable = true)]
        public string CategoryNames
        {
            get
            {
                return _CategoryNames;
            }
            set
            {
    
                if (_CategoryNames != value)
                {
                          
                _CategoryNames = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryNames;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityAttributes",DTOPropertyName="CommodityAttributes",IsRequired=false, IsSerializable = true)]
        public string CommodityAttributes
        {
            get
            {
                return _CommodityAttributes;
            }
            set
            {
    
                if (_CommodityAttributes != value)
                {
                          
                _CommodityAttributes = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityAttributes;
        
    
        /// <summary>
        /// 实际支付价格
        /// </summary>
        /// <LongDescription>
        /// 订单支付成功后设置此价格(订单项总价：单价*数量)
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="RealPrice",DTOPropertyName="RealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RealPrice
        {
            get
            {
                return _RealPrice;
            }
            set
            {
    
                if (_RealPrice != value)
                {
                          
                _RealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RealPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Intensity",DTOPropertyName="Intensity",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Intensity
        {
            get
            {
                return _Intensity;
            }
            set
            {
    
                if (_Intensity != value)
                {
                          
                _Intensity = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Intensity;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AlreadyReview",DTOPropertyName="AlreadyReview",IsRequired=true, IsSerializable = true)]
        public bool AlreadyReview
        {
            get
            {
                return _AlreadyReview;
            }
            set
            {
    
                if (_AlreadyReview != value)
                {
                          
                _AlreadyReview = value; 
               
           		}
    		}
     	}
    
     	private bool _AlreadyReview;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiscountPrice",DTOPropertyName="DiscountPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DiscountPrice
        {
            get
            {
                return _DiscountPrice;
            }
            set
            {
    
                if (_DiscountPrice != value)
                {
                          
                _DiscountPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DiscountPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _CommodityStockId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 订单项众销分成金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareMoney",DTOPropertyName="ShareMoney",IsRequired=true, IsSerializable = true)]
        public decimal ShareMoney
        {
            get
            {
                return _ShareMoney;
            }
            set
            {
    
                if (_ShareMoney != value)
                {
                          
                _ShareMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _ShareMoney = 0m;
        
    
        /// <summary>
        /// 活动描述(活动类型、或者会员等级)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionDesc",DTOPropertyName="PromotionDesc",IsRequired=false, IsSerializable = true)]
        public string PromotionDesc
        {
            get
            {
                return _PromotionDesc;
            }
            set
            {
    
                if (_PromotionDesc != value)
                {
                          
                _PromotionDesc = value; 
               
           		}
    		}
     	}
    
     	private string _PromotionDesc;
        
    
        /// <summary>
        /// 活动类型：0，限时打折；1，秒杀；2，预约，3，拼团；200，会员价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionType",DTOPropertyName="PromotionType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> PromotionType
        {
            get
            {
                return _PromotionType;
            }
            set
            {
    
                if (_PromotionType != value)
                {
                          
                _PromotionType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _PromotionType;
        
    
        /// <summary>
        /// 会员等级id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="VipLevelId",DTOPropertyName="VipLevelId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> VipLevelId
        {
            get
            {
                return _VipLevelId;
            }
            set
            {
    
                if (_VipLevelId != value)
                {
                          
                _VipLevelId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _VipLevelId;
        
    
        /// <summary>
        /// 下单商品分类
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComCategoryId",DTOPropertyName="ComCategoryId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ComCategoryId
        {
            get
            {
                return _ComCategoryId;
            }
            set
            {
    
                if (_ComCategoryId != value)
                {
                          
                _ComCategoryId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ComCategoryId;
        
    
        /// <summary>
        /// 下单商品分类名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComCategoryName",DTOPropertyName="ComCategoryName",IsRequired=false, IsSerializable = true)]
        public string ComCategoryName
        {
            get
            {
                return _ComCategoryName;
            }
            set
            {
    
                if (_ComCategoryName != value)
                {
                          
                _ComCategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _ComCategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScorePrice",DTOPropertyName="ScorePrice",IsRequired=true, IsSerializable = true)]
        public decimal ScorePrice
        {
            get
            {
                return _ScorePrice;
            }
            set
            {
    
                if (_ScorePrice != value)
                {
                          
                _ScorePrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _ScorePrice;
        
    
        /// <summary>
        /// 关税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Duty",DTOPropertyName="Duty",IsRequired=true, IsSerializable = true)]
        public decimal Duty
        {
            get
            {
                return _Duty;
            }
            set
            {
    
                if (_Duty != value)
                {
                          
                _Duty = value; 
               
           		}
    		}
     	}
    
     	private decimal _Duty;
        
    
        /// <summary>
        /// 销项税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _TaxRate;
        
    
        /// <summary>
        /// 进项税
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InputRax",DTOPropertyName="InputRax",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> InputRax
        {
            get
            {
                return _InputRax;
            }
            set
            {
    
                if (_InputRax != value)
                {
                          
                _InputRax = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _InputRax;
        
    
        /// <summary>
        /// 商品进货价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 商品条码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Barcode",DTOPropertyName="Barcode",IsRequired=false, IsSerializable = true)]
        public string Barcode
        {
            get
            {
                return _Barcode;
            }
            set
            {
    
                if (_Barcode != value)
                {
                          
                _Barcode = value; 
               
           		}
    		}
     	}
    
     	private string _Barcode;
        
    
        /// <summary>
        /// 商品编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=false, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 商城品类Id（多个用,分割）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="InnerCatetoryIds",DTOPropertyName="InnerCatetoryIds",IsRequired=false, IsSerializable = true)]
        public string InnerCatetoryIds
        {
            get
            {
                return _InnerCatetoryIds;
            }
            set
            {
    
                if (_InnerCatetoryIds != value)
                {
                          
                _InnerCatetoryIds = value; 
               
           		}
    		}
     	}
    
     	private string _InnerCatetoryIds;
        
    
        /// <summary>
        /// 商品单位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Unit",DTOPropertyName="Unit",IsRequired=false, IsSerializable = true)]
        public string Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
    
                if (_Unit != value)
                {
                          
                _Unit = value; 
               
           		}
    		}
     	}
    
     	private string _Unit;
        
    
        /// <summary>
        /// 油卡兑换券额度
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YouKaPercent",DTOPropertyName="YouKaPercent",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> YouKaPercent
        {
            get
            {
                return _YouKaPercent;
            }
            set
            {
    
                if (_YouKaPercent != value)
                {
                          
                _YouKaPercent = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _YouKaPercent;
        
    
        /// <summary>
        /// 预售发货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryTime",DTOPropertyName="DeliveryTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> DeliveryTime
        {
            get
            {
                return _DeliveryTime;
            }
            set
            {
    
                if (_DeliveryTime != value)
                {
                          
                _DeliveryTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _DeliveryTime;
        
    
        /// <summary>
        /// 预售发货天数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DeliveryDays",DTOPropertyName="DeliveryDays",IsRequired=false, IsSerializable = true)]
        public Nullable<int> DeliveryDays
        {
            get
            {
                return _DeliveryDays;
            }
            set
            {
    
                if (_DeliveryDays != value)
                {
                          
                _DeliveryDays = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _DeliveryDays;
        
    
        /// <summary>
        /// 0实物商品，1(虚拟商品)易捷卡密
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 易捷电子券活动编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponActivityId",DTOPropertyName="YJCouponActivityId",IsRequired=false, IsSerializable = true)]
        public string YJCouponActivityId
        {
            get
            {
                return _YJCouponActivityId;
            }
            set
            {
    
                if (_YJCouponActivityId != value)
                {
                          
                _YJCouponActivityId = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponActivityId;
        
    
        /// <summary>
        /// 易捷电子券类型编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YJCouponType",DTOPropertyName="YJCouponType",IsRequired=false, IsSerializable = true)]
        public string YJCouponType
        {
            get
            {
                return _YJCouponType;
            }
            set
            {
    
                if (_YJCouponType != value)
                {
                          
                _YJCouponType = value; 
               
           		}
    		}
     	}
    
     	private string _YJCouponType;
        
    
        /// <summary>
        /// 订单项ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderItemPresentDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderItemPresentDTO dto = srcDTO as OrderItemPresentDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Number = dto.Number;
    								
    				 this.CurrentPrice = dto.CurrentPrice;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.ComAttributeIds = dto.ComAttributeIds;
    								
    				 this.CategoryNames = dto.CategoryNames;
    								
    				 this.CommodityAttributes = dto.CommodityAttributes;
    								
    				 this.RealPrice = dto.RealPrice;
    								
    				 this.Intensity = dto.Intensity;
    								
    				 this.AlreadyReview = dto.AlreadyReview;
    								
    				 this.DiscountPrice = dto.DiscountPrice;
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ShareMoney = dto.ShareMoney;
    								
    				 this.PromotionDesc = dto.PromotionDesc;
    								
    				 this.PromotionType = dto.PromotionType;
    								
    				 this.VipLevelId = dto.VipLevelId;
    								
    				 this.ComCategoryId = dto.ComCategoryId;
    								
    				 this.ComCategoryName = dto.ComCategoryName;
    								
    				 this.ScorePrice = dto.ScorePrice;
    								
    				 this.Duty = dto.Duty;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.InputRax = dto.InputRax;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.Barcode = dto.Barcode;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.InnerCatetoryIds = dto.InnerCatetoryIds;
    								
    				 this.Unit = dto.Unit;
    								
    				 this.YouKaPercent = dto.YouKaPercent;
    								
    				 this.DeliveryTime = dto.DeliveryTime;
    								
    				 this.DeliveryDays = dto.DeliveryDays;
    								
    				 this.Type = dto.Type;
    								
    				 this.YJCouponActivityId = dto.YJCouponActivityId;
    								
    				 this.YJCouponType = dto.YJCouponType;
    								
    				 this.OrderItemId = dto.OrderItemId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderItemPresentDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderItemPresentDTO();
                base.ToBEData(ref todto);
    			OrderItemPresentDTO dto = todto as OrderItemPresentDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Number = this.Number;
    								
    				 dto.CurrentPrice = this.CurrentPrice;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.ComAttributeIds = this.ComAttributeIds;
    								
    				 dto.CategoryNames = this.CategoryNames;
    								
    				 dto.CommodityAttributes = this.CommodityAttributes;
    								
    				 dto.RealPrice = this.RealPrice;
    								
    				 dto.Intensity = this.Intensity;
    								
    				 dto.AlreadyReview = this.AlreadyReview;
    								
    				 dto.DiscountPrice = this.DiscountPrice;
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ShareMoney = this.ShareMoney;
    								
    				 dto.PromotionDesc = this.PromotionDesc;
    								
    				 dto.PromotionType = this.PromotionType;
    								
    				 dto.VipLevelId = this.VipLevelId;
    								
    				 dto.ComCategoryId = this.ComCategoryId;
    								
    				 dto.ComCategoryName = this.ComCategoryName;
    								
    				 dto.ScorePrice = this.ScorePrice;
    								
    				 dto.Duty = this.Duty;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.InputRax = this.InputRax;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.Barcode = this.Barcode;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.InnerCatetoryIds = this.InnerCatetoryIds;
    								
    				 dto.Unit = this.Unit;
    								
    				 dto.YouKaPercent = this.YouKaPercent;
    								
    				 dto.DeliveryTime = this.DeliveryTime;
    								
    				 dto.DeliveryDays = this.DeliveryDays;
    								
    				 dto.Type = this.Type;
    								
    				 dto.YJCouponActivityId = this.YJCouponActivityId;
    								
    				 dto.YJCouponType = this.YJCouponType;
    								
    				 dto.OrderItemId = this.OrderItemId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单项分成表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderItemShare",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderItemShareDTO))]
    public partial class OrderItemShare: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderItemShare ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 参加分成的金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePrice",DTOPropertyName="SharePrice",IsRequired=true, IsSerializable = true)]
        public decimal SharePrice
        {
            get
            {
                return _SharePrice;
            }
            set
            {
    
                if (_SharePrice != value)
                {
                          
                _SharePrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _SharePrice;
        
    
        /// <summary>
        /// 分成佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Commission",DTOPropertyName="Commission",IsRequired=true, IsSerializable = true)]
        public decimal Commission
        {
            get
            {
                return _Commission;
            }
            set
            {
    
                if (_Commission != value)
                {
                          
                _Commission = value; 
               
           		}
    		}
     	}
    
     	private decimal _Commission;
        
    
        /// <summary>
        /// 分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=true, IsSerializable = true)]
        public decimal SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _SharePercent;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单项id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 分成类型（同收款人角色）,1:商家，2：金和众销（给金和分的钱），3：商贸众销（给分享者分的钱），4：商贸众筹，5：推广主分成，6：应用主分成，7金和分润，8买家,9一级分销,10二级分销,11三级分销,12渠道推广
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayeeType",DTOPropertyName="PayeeType",IsRequired=true, IsSerializable = true)]
        public int PayeeType
        {
            get
            {
                return _PayeeType;
            }
            set
            {
    
                if (_PayeeType != value)
                {
                          
                _PayeeType = value; 
               
           		}
    		}
     	}
    
     	private int _PayeeType;
        
    
        /// <summary>
        /// 收款人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayeeId",DTOPropertyName="PayeeId",IsRequired=true, IsSerializable = true)]
        public System.Guid PayeeId
        {
            get
            {
                return _PayeeId;
            }
            set
            {
    
                if (_PayeeId != value)
                {
                          
                _PayeeId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PayeeId;
        
    
        /// <summary>
        /// 分成标识：(如Distributor.Id)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareKey",DTOPropertyName="ShareKey",IsRequired=false, IsSerializable = true)]
        public string ShareKey
        {
            get
            {
                return _ShareKey;
            }
            set
            {
    
                if (_ShareKey != value)
                {
                          
                _ShareKey = value; 
               
           		}
    		}
     	}
    
     	private string _ShareKey;
        
    
        /// <summary>
        /// 应发佣金
        /// </summary>
        /// <LongDescription>
        /// 佣金发积分，可能存在积分除不尽的问题，如积分汇率1：1，应发佣金为0.45元，此时应发佣金0.45，实发佣金0、
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ShouldCommission",DTOPropertyName="ShouldCommission",IsRequired=true, IsSerializable = true)]
        public decimal ShouldCommission
        {
            get
            {
                return _ShouldCommission;
            }
            set
            {
    
                if (_ShouldCommission != value)
                {
                          
                _ShouldCommission = value; 
               
           		}
    		}
     	}
    
     	private decimal _ShouldCommission;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderItemShareDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderItemShareDTO dto = srcDTO as OrderItemShareDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SharePrice = dto.SharePrice;
    								
    				 this.Commission = dto.Commission;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.PayeeType = dto.PayeeType;
    								
    				 this.PayeeId = dto.PayeeId;
    								
    				 this.ShareKey = dto.ShareKey;
    								
    				 this.ShouldCommission = dto.ShouldCommission;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderItemShareDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderItemShareDTO();
                base.ToBEData(ref todto);
    			OrderItemShareDTO dto = todto as OrderItemShareDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SharePrice = this.SharePrice;
    								
    				 dto.Commission = this.Commission;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.PayeeType = this.PayeeType;
    								
    				 dto.PayeeId = this.PayeeId;
    								
    				 dto.ShareKey = this.ShareKey;
    								
    				 dto.ShouldCommission = this.ShouldCommission;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单支付详情
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderPayDetail",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderPayDetailDTO))]
    public partial class OrderPayDetail: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderPayDetail ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 商品Id（如果优惠券作用在店铺上，该字段为空）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _CommodityId;
        
    
        /// <summary>
        /// 抵扣资源类型（1、优惠券，2、积分抵现，3、运费折扣优惠，4、满减免运费）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ObjectType",DTOPropertyName="ObjectType",IsRequired=true, IsSerializable = true)]
        public byte ObjectType
        {
            get
            {
                return _ObjectType;
            }
            set
            {
    
                if (_ObjectType != value)
                {
                          
                _ObjectType = value; 
               
           		}
    		}
     	}
    
     	private byte _ObjectType;
        
    
        /// <summary>
        /// 抵用金额(单位：元)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Amount",DTOPropertyName="Amount",IsRequired=true, IsSerializable = true)]
        public decimal Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
    
                if (_Amount != value)
                {
                          
                _Amount = value; 
               
           		}
    		}
     	}
    
     	private decimal _Amount;
        
    
        /// <summary>
        /// 使用的券id串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ObjectId",DTOPropertyName="ObjectId",IsRequired=true, IsSerializable = true)]
        public System.Guid ObjectId
        {
            get
            {
                return _ObjectId;
            }
            set
            {
    
                if (_ObjectId != value)
                {
                          
                _ObjectId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ObjectId;
        
    
        /// <summary>
        /// 使用类型。0：app使用；1：金和使用；
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UseType",DTOPropertyName="UseType",IsRequired=true, IsSerializable = true)]
        public int UseType
        {
            get
            {
                return _UseType;
            }
            set
            {
    
                if (_UseType != value)
                {
                          
                _UseType = value; 
               
           		}
    		}
     	}
    
     	private int _UseType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 0,店铺通用,1:商品
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponType",DTOPropertyName="CouponType",IsRequired=true, IsSerializable = true)]
        public int CouponType
        {
            get
            {
                return _CouponType;
            }
            set
            {
    
                if (_CouponType != value)
                {
                          
                _CouponType = value; 
               
           		}
    		}
     	}
    
     	private int _CouponType;
        
    
        /// <summary>
        /// 优惠券作用商品,如果多个商品,以逗号分割
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityIds",DTOPropertyName="CommodityIds",IsRequired=false, IsSerializable = true)]
        public string CommodityIds
        {
            get
            {
                return _CommodityIds;
            }
            set
            {
    
                if (_CommodityIds != value)
                {
                          
                _CommodityIds = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityIds;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreCost",DTOPropertyName="ScoreCost",IsRequired=true, IsSerializable = true)]
        public int ScoreCost
        {
            get
            {
                return _ScoreCost;
            }
            set
            {
    
                if (_ScoreCost != value)
                {
                          
                _ScoreCost = value; 
               
           		}
    		}
     	}
    
     	private int _ScoreCost;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderPayDetailDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderPayDetailDTO dto = srcDTO as OrderPayDetailDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ObjectType = dto.ObjectType;
    								
    				 this.Amount = dto.Amount;
    								
    				 this.ObjectId = dto.ObjectId;
    								
    				 this.UseType = dto.UseType;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.CouponType = dto.CouponType;
    								
    				 this.CommodityIds = dto.CommodityIds;
    								
    				 this.ScoreCost = dto.ScoreCost;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderPayDetailDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderPayDetailDTO();
                base.ToBEData(ref todto);
    			OrderPayDetailDTO dto = todto as OrderPayDetailDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ObjectType = this.ObjectType;
    								
    				 dto.Amount = this.Amount;
    								
    				 dto.ObjectId = this.ObjectId;
    								
    				 dto.UseType = this.UseType;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.CouponType = this.CouponType;
    								
    				 dto.CommodityIds = this.CommodityIds;
    								
    				 dto.ScoreCost = this.ScoreCost;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单钱款去向
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderPayee",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderPayeeDTO))]
    public partial class OrderPayee: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderPayee ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 收款账户
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayeeId",DTOPropertyName="PayeeId",IsRequired=true, IsSerializable = true)]
        public System.Guid PayeeId
        {
            get
            {
                return _PayeeId;
            }
            set
            {
    
                if (_PayeeId != value)
                {
                          
                _PayeeId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PayeeId;
        
    
        /// <summary>
        /// 收款人角色,1:商家，2：金和众销（给金和分的钱），3：商贸众销（给分享者分的钱），4：商贸众筹，5：推广主分成，6：应用主分成，7金和分润，8买家,9一级分销,10二级分销,11三级分销,12渠道推广, 30：商城分润
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayeeType",DTOPropertyName="PayeeType",IsRequired=true, IsSerializable = true)]
        public int PayeeType
        {
            get
            {
                return _PayeeType;
            }
            set
            {
    
                if (_PayeeType != value)
                {
                          
                _PayeeType = value; 
               
           		}
    		}
     	}
    
     	private int _PayeeType;
        
    
        /// <summary>
        /// 收款人角色描述,1:商家，2：金和众销（给金和分的钱），3：商贸众销（给分享者分的钱），4：商贸众筹，5：推广主分成，6：应用主分成，7金和分润，8买家
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 是否金和自用账户
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsJHSelfUseAccount",DTOPropertyName="IsJHSelfUseAccount",IsRequired=true, IsSerializable = true)]
        public bool IsJHSelfUseAccount
        {
            get
            {
                return _IsJHSelfUseAccount;
            }
            set
            {
    
                if (_IsJHSelfUseAccount != value)
                {
                          
                _IsJHSelfUseAccount = value; 
               
           		}
    		}
     	}
    
     	private bool _IsJHSelfUseAccount;
        
    
        /// <summary>
        /// 是否需要代金券换购金币
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsVoucherBuyGold",DTOPropertyName="IsVoucherBuyGold",IsRequired=true, IsSerializable = true)]
        public bool IsVoucherBuyGold
        {
            get
            {
                return _IsVoucherBuyGold;
            }
            set
            {
    
                if (_IsVoucherBuyGold != value)
                {
                          
                _IsVoucherBuyGold = value; 
               
           		}
    		}
     	}
    
     	private bool _IsVoucherBuyGold;
        
    
        /// <summary>
        /// 支付金额(单位:元)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayMoney",DTOPropertyName="PayMoney",IsRequired=true, IsSerializable = true)]
        public decimal PayMoney
        {
            get
            {
                return _PayMoney;
            }
            set
            {
    
                if (_PayMoney != value)
                {
                          
                _PayMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _PayMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 1、未重新检查；2、已重新检查
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReCheckFlag",DTOPropertyName="ReCheckFlag",IsRequired=true, IsSerializable = true)]
        public int ReCheckFlag
        {
            get
            {
                return _ReCheckFlag;
            }
            set
            {
    
                if (_ReCheckFlag != value)
                {
                          
                _ReCheckFlag = value; 
               
           		}
    		}
     	}
    
     	private int _ReCheckFlag;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderPayeeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderPayeeDTO dto = srcDTO as OrderPayeeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.PayeeId = dto.PayeeId;
    								
    				 this.PayeeType = dto.PayeeType;
    								
    				 this.Description = dto.Description;
    								
    				 this.IsJHSelfUseAccount = dto.IsJHSelfUseAccount;
    								
    				 this.IsVoucherBuyGold = dto.IsVoucherBuyGold;
    								
    				 this.PayMoney = dto.PayMoney;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.ReCheckFlag = dto.ReCheckFlag;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderPayeeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderPayeeDTO();
                base.ToBEData(ref todto);
    			OrderPayeeDTO dto = todto as OrderPayeeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.PayeeId = this.PayeeId;
    								
    				 dto.PayeeType = this.PayeeType;
    								
    				 dto.Description = this.Description;
    								
    				 dto.IsJHSelfUseAccount = this.IsJHSelfUseAccount;
    								
    				 dto.IsVoucherBuyGold = this.IsVoucherBuyGold;
    								
    				 dto.PayMoney = this.PayMoney;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.ReCheckFlag = this.ReCheckFlag;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderPickUp",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderPickUpDTO))]
    public partial class OrderPickUp: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderPickUp ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 自提点Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeStationId",DTOPropertyName="SelfTakeStationId",IsRequired=true, IsSerializable = true)]
        public System.Guid SelfTakeStationId
        {
            get
            {
                return _SelfTakeStationId;
            }
            set
            {
    
                if (_SelfTakeStationId != value)
                {
                          
                _SelfTakeStationId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SelfTakeStationId;
        
    
        /// <summary>
        /// 自提地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeAddress",DTOPropertyName="SelfTakeAddress",IsRequired=true, IsSerializable = true)]
        public string SelfTakeAddress
        {
            get
            {
                return _SelfTakeAddress;
            }
            set
            {
    
                if (_SelfTakeAddress != value)
                {
                          
                _SelfTakeAddress = value; 
               
           		}
    		}
     	}
    
     	private string _SelfTakeAddress;
        
    
        /// <summary>
        /// 提货码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpCode",DTOPropertyName="PickUpCode",IsRequired=true, IsSerializable = true)]
        public string PickUpCode
        {
            get
            {
                return _PickUpCode;
            }
            set
            {
    
                if (_PickUpCode != value)
                {
                          
                _PickUpCode = value; 
               
           		}
    		}
     	}
    
     	private string _PickUpCode;
        
    
        /// <summary>
        /// 提货二维码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpQrCodeUrl",DTOPropertyName="PickUpQrCodeUrl",IsRequired=true, IsSerializable = true)]
        public string PickUpQrCodeUrl
        {
            get
            {
                return _PickUpQrCodeUrl;
            }
            set
            {
    
                if (_PickUpQrCodeUrl != value)
                {
                          
                _PickUpQrCodeUrl = value; 
               
           		}
    		}
     	}
    
     	private string _PickUpQrCodeUrl;
        
    
        /// <summary>
        /// 发货人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpManagerId",DTOPropertyName="PickUpManagerId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> PickUpManagerId
        {
            get
            {
                return _PickUpManagerId;
            }
            set
            {
    
                if (_PickUpManagerId != value)
                {
                          
                _PickUpManagerId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _PickUpManagerId;
        
    
        /// <summary>
        /// 提货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpTime",DTOPropertyName="PickUpTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PickUpTime
        {
            get
            {
                return _PickUpTime;
            }
            set
            {
    
                if (_PickUpTime != value)
                {
                          
                _PickUpTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PickUpTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeProvince",DTOPropertyName="SelfTakeProvince",IsRequired=false, IsSerializable = true)]
        public string SelfTakeProvince
        {
            get
            {
                return _SelfTakeProvince;
            }
            set
            {
    
                if (_SelfTakeProvince != value)
                {
                          
                _SelfTakeProvince = value; 
               
           		}
    		}
     	}
    
     	private string _SelfTakeProvince;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeCity",DTOPropertyName="SelfTakeCity",IsRequired=false, IsSerializable = true)]
        public string SelfTakeCity
        {
            get
            {
                return _SelfTakeCity;
            }
            set
            {
    
                if (_SelfTakeCity != value)
                {
                          
                _SelfTakeCity = value; 
               
           		}
    		}
     	}
    
     	private string _SelfTakeCity;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderPickUpDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderPickUpDTO dto = srcDTO as OrderPickUpDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.SelfTakeStationId = dto.SelfTakeStationId;
    								
    				 this.SelfTakeAddress = dto.SelfTakeAddress;
    								
    				 this.PickUpCode = dto.PickUpCode;
    								
    				 this.PickUpQrCodeUrl = dto.PickUpQrCodeUrl;
    								
    				 this.PickUpManagerId = dto.PickUpManagerId;
    								
    				 this.PickUpTime = dto.PickUpTime;
    								
    				 this.SelfTakeProvince = dto.SelfTakeProvince;
    								
    				 this.SelfTakeCity = dto.SelfTakeCity;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderPickUpDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderPickUpDTO();
                base.ToBEData(ref todto);
    			OrderPickUpDTO dto = todto as OrderPickUpDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.SelfTakeStationId = this.SelfTakeStationId;
    								
    				 dto.SelfTakeAddress = this.SelfTakeAddress;
    								
    				 dto.PickUpCode = this.PickUpCode;
    								
    				 dto.PickUpQrCodeUrl = this.PickUpQrCodeUrl;
    								
    				 dto.PickUpManagerId = this.PickUpManagerId;
    								
    				 dto.PickUpTime = this.PickUpTime;
    								
    				 dto.SelfTakeProvince = this.SelfTakeProvince;
    								
    				 dto.SelfTakeCity = this.SelfTakeCity;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单打印日志表
    /// </summary>
    /// <LongDescription>
    /// 订单打印日志表
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderPrintDetailLog",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderPrintDetailLogDTO))]
    public partial class OrderPrintDetailLog: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderPrintDetailLog ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 打印Id
        /// </summary>
        /// <LongDescription>
        /// 打印Id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="PrintId",DTOPropertyName="PrintId",IsRequired=true, IsSerializable = true)]
        public System.Guid PrintId
        {
            get
            {
                return _PrintId;
            }
            set
            {
    
                if (_PrintId != value)
                {
                          
                _PrintId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PrintId;
        
    
        /// <summary>
        /// 订单Id
        /// </summary>
        /// <LongDescription>
        /// 订单Id
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 快递单（可空）
        /// </summary>
        /// <LongDescription>
        /// 快递单（可空）
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ExpressNo",DTOPropertyName="ExpressNo",IsRequired=false, IsSerializable = true)]
        public string ExpressNo
        {
            get
            {
                return _ExpressNo;
            }
            set
            {
    
                if (_ExpressNo != value)
                {
                          
                _ExpressNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressNo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderPrintDetailLogDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderPrintDetailLogDTO dto = srcDTO as OrderPrintDetailLogDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.PrintId = dto.PrintId;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.ExpressNo = dto.ExpressNo;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderPrintDetailLogDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderPrintDetailLogDTO();
                base.ToBEData(ref todto);
    			OrderPrintDetailLogDTO dto = todto as OrderPrintDetailLogDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.PrintId = this.PrintId;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.ExpressNo = this.ExpressNo;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单打印日志表
    /// </summary>
    /// <LongDescription>
    /// 订单打印日志表
    /// </LongDescription>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderPrintLog",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderPrintLogDTO))]
    public partial class OrderPrintLog: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderPrintLog ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 打印操作用户
        /// </summary>
        /// <LongDescription>
        /// 打印操作用户
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="PrintUserId",DTOPropertyName="PrintUserId",IsRequired=true, IsSerializable = true)]
        public System.Guid PrintUserId
        {
            get
            {
                return _PrintUserId;
            }
            set
            {
    
                if (_PrintUserId != value)
                {
                          
                _PrintUserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PrintUserId;
        
    
        /// <summary>
        /// 打印类型（0：快递单打印，1：发货单打印）
        /// </summary>
        /// <LongDescription>
        /// 打印类型（0：快递单打印，1：发货单打印）
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="PrintType",DTOPropertyName="PrintType",IsRequired=true, IsSerializable = true)]
        public int PrintType
        {
            get
            {
                return _PrintType;
            }
            set
            {
    
                if (_PrintType != value)
                {
                          
                _PrintType = value; 
               
           		}
    		}
     	}
    
     	private int _PrintType;
        
    
        /// <summary>
        /// 打印时间
        /// </summary>
        /// <LongDescription>
        /// 打印时间
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// Appid
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderPrintLogDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderPrintLogDTO dto = srcDTO as OrderPrintLogDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.PrintUserId = dto.PrintUserId;
    								
    				 this.PrintType = dto.PrintType;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderPrintLogDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderPrintLogDTO();
                base.ToBEData(ref todto);
    			OrderPrintLogDTO dto = todto as OrderPrintLogDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.PrintUserId = this.PrintUserId;
    								
    				 dto.PrintType = this.PrintType;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 退款申请
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderRefund",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderRefundDTO))]
    public partial class OrderRefund: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderRefund ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 退款类型：仅退款=0，退货退款=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundType",DTOPropertyName="RefundType",IsRequired=true, IsSerializable = true)]
        public int RefundType
        {
            get
            {
                return _RefundType;
            }
            set
            {
    
                if (_RefundType != value)
                {
                          
                _RefundType = value; 
               
           		}
    		}
     	}
    
     	private int _RefundType;
        
    
        /// <summary>
        /// 退款原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundReason",DTOPropertyName="RefundReason",IsRequired=true, IsSerializable = true)]
        public string RefundReason
        {
            get
            {
                return _RefundReason;
            }
            set
            {
    
                if (_RefundReason != value)
                {
                          
                _RefundReason = value; 
               
           		}
    		}
     	}
    
     	private string _RefundReason;
        
    
        /// <summary>
        /// 退款金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundMoney",DTOPropertyName="RefundMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundMoney
        {
            get
            {
                return _RefundMoney;
            }
            set
            {
    
                if (_RefundMoney != value)
                {
                          
                _RefundMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundMoney;
        
    
        /// <summary>
        /// 退款详细说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundDesc",DTOPropertyName="RefundDesc",IsRequired=false, IsSerializable = true)]
        public string RefundDesc
        {
            get
            {
                return _RefundDesc;
            }
            set
            {
    
                if (_RefundDesc != value)
                {
                          
                _RefundDesc = value; 
               
           		}
    		}
     	}
    
     	private string _RefundDesc;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 状态：退款中=0，已退款=1，已拒绝申请=2，卖家已拒绝=4,已撤销=3，售后退款中商家同意退款，商家未收到货=10 , 买家已发货=11,金和处理退款中=12,买家发货超时，商家未收到货=13
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 收款人账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiverAccount",DTOPropertyName="ReceiverAccount",IsRequired=false, IsSerializable = true)]
        public string ReceiverAccount
        {
            get
            {
                return _ReceiverAccount;
            }
            set
            {
    
                if (_ReceiverAccount != value)
                {
                          
                _ReceiverAccount = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiverAccount;
        
    
        /// <summary>
        /// 收款人姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Receiver",DTOPropertyName="Receiver",IsRequired=false, IsSerializable = true)]
        public string Receiver
        {
            get
            {
                return _Receiver;
            }
            set
            {
    
                if (_Receiver != value)
                {
                          
                _Receiver = value; 
               
           		}
    		}
     	}
    
     	private string _Receiver;
        
    
        /// <summary>
        /// 退货物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpCo",DTOPropertyName="RefundExpCo",IsRequired=false, IsSerializable = true)]
        public string RefundExpCo
        {
            get
            {
                return _RefundExpCo;
            }
            set
            {
    
                if (_RefundExpCo != value)
                {
                          
                _RefundExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpCo;
        
    
        /// <summary>
        /// 退货物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpOrderNo",DTOPropertyName="RefundExpOrderNo",IsRequired=false, IsSerializable = true)]
        public string RefundExpOrderNo
        {
            get
            {
                return _RefundExpOrderNo;
            }
            set
            {
    
                if (_RefundExpOrderNo != value)
                {
                          
                _RefundExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpOrderNo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundImgs",DTOPropertyName="OrderRefundImgs",IsRequired=false, IsSerializable = true)]
        public string OrderRefundImgs
        {
            get
            {
                return _OrderRefundImgs;
            }
            set
            {
    
                if (_OrderRefundImgs != value)
                {
                          
                _OrderRefundImgs = value; 
               
           		}
    		}
     	}
    
     	private string _OrderRefundImgs;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 订单ID=0,商品ID=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DataType",DTOPropertyName="DataType",IsRequired=false, IsSerializable = true)]
        public string DataType
        {
            get
            {
                return _DataType;
            }
            set
            {
    
                if (_DataType != value)
                {
                          
                _DataType = value; 
               
           		}
    		}
     	}
    
     	private string _DataType;
        
    
        /// <summary>
        /// 订单项ID，整个订单退款为空
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _OrderItemId;
        
    
        /// <summary>
        /// 拒绝时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefuseTime",DTOPropertyName="RefuseTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> RefuseTime
        {
            get
            {
                return _RefuseTime;
            }
            set
            {
    
                if (_RefuseTime != value)
                {
                          
                _RefuseTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _RefuseTime;
        
    
        /// <summary>
        /// 1：全退，0:部分退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsFullRefund",DTOPropertyName="IsFullRefund",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsFullRefund
        {
            get
            {
                return _IsFullRefund;
            }
            set
            {
    
                if (_IsFullRefund != value)
                {
                          
                _IsFullRefund = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsFullRefund;
        
    
        /// <summary>
        /// 拒绝原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefuseReason",DTOPropertyName="RefuseReason",IsRequired=false, IsSerializable = true)]
        public string RefuseReason
        {
            get
            {
                return _RefuseReason;
            }
            set
            {
    
                if (_RefuseReason != value)
                {
                          
                _RefuseReason = value; 
               
           		}
    		}
     	}
    
     	private string _RefuseReason;
        
    
        /// <summary>
        /// 未收到货超时时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NotReceiveTime",DTOPropertyName="NotReceiveTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> NotReceiveTime
        {
            get
            {
                return _NotReceiveTime;
            }
            set
            {
    
                if (_NotReceiveTime != value)
                {
                          
                _NotReceiveTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _NotReceiveTime;
        
    
        /// <summary>
        /// 买家退货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpOrderTime",DTOPropertyName="RefundExpOrderTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> RefundExpOrderTime
        {
            get
            {
                return _RefundExpOrderTime;
            }
            set
            {
    
                if (_RefundExpOrderTime != value)
                {
                          
                _RefundExpOrderTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _RefundExpOrderTime;
        
    
        /// <summary>
        /// 买家是否延迟收货时间，1:延长，0：未延长
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDelayConfirmTimeAfterSales",DTOPropertyName="IsDelayConfirmTimeAfterSales",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsDelayConfirmTimeAfterSales
        {
            get
            {
                return _IsDelayConfirmTimeAfterSales;
            }
            set
            {
    
                if (_IsDelayConfirmTimeAfterSales != value)
                {
                          
                _IsDelayConfirmTimeAfterSales = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsDelayConfirmTimeAfterSales;
        
    
        /// <summary>
        /// 0:出库中达成协议，1：已发货达成协议
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AgreeFlag",DTOPropertyName="AgreeFlag",IsRequired=false, IsSerializable = true)]
        public Nullable<int> AgreeFlag
        {
            get
            {
                return _AgreeFlag;
            }
            set
            {
    
                if (_AgreeFlag != value)
                {
                          
                _AgreeFlag = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _AgreeFlag;
        
    
        /// <summary>
        /// 退还积分的金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundScoreMoney",DTOPropertyName="RefundScoreMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundScoreMoney
        {
            get
            {
                return _RefundScoreMoney;
            }
            set
            {
    
                if (_RefundScoreMoney != value)
                {
                          
                _RefundScoreMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundScoreMoney;
        
    
        /// <summary>
        /// 商家备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SalerRemark",DTOPropertyName="SalerRemark",IsRequired=false, IsSerializable = true)]
        public string SalerRemark
        {
            get
            {
                return _SalerRemark;
            }
            set
            {
    
                if (_SalerRemark != value)
                {
                          
                _SalerRemark = value; 
               
           		}
    		}
     	}
    
     	private string _SalerRemark;
        
    
        /// <summary>
        /// 退易捷币金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundYJBMoney",DTOPropertyName="RefundYJBMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundYJBMoney
        {
            get
            {
                return _RefundYJBMoney;
            }
            set
            {
    
                if (_RefundYJBMoney != value)
                {
                          
                _RefundYJBMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundYJBMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundFreightPrice",DTOPropertyName="RefundFreightPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundFreightPrice
        {
            get
            {
                return _RefundFreightPrice;
            }
            set
            {
    
                if (_RefundFreightPrice != value)
                {
                          
                _RefundFreightPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundFreightPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundChangeFreightPrice",DTOPropertyName="RefundChangeFreightPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundChangeFreightPrice
        {
            get
            {
                return _RefundChangeFreightPrice;
            }
            set
            {
    
                if (_RefundChangeFreightPrice != value)
                {
                          
                _RefundChangeFreightPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundChangeFreightPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundChangeRealPrice",DTOPropertyName="RefundChangeRealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundChangeRealPrice
        {
            get
            {
                return _RefundChangeRealPrice;
            }
            set
            {
    
                if (_RefundChangeRealPrice != value)
                {
                          
                _RefundChangeRealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundChangeRealPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundDuty",DTOPropertyName="RefundDuty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundDuty
        {
            get
            {
                return _RefundDuty;
            }
            set
            {
    
                if (_RefundDuty != value)
                {
                          
                _RefundDuty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundDuty;
        
    
        /// <summary>
        /// 客户拒收后收取的运费
        /// </summary>
        /// <LongDescription>
        /// 从客户申请的退款中扣除
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="RejectFreightMoney",DTOPropertyName="RejectFreightMoney",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RejectFreightMoney
        {
            get
            {
                return _RejectFreightMoney;
            }
            set
            {
    
                if (_RejectFreightMoney != value)
                {
                          
                _RejectFreightMoney = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RejectFreightMoney;
        
    
        /// <summary>
        /// 第三方ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyId",DTOPropertyName="ApplyId",IsRequired=false, IsSerializable = true)]
        public string ApplyId
        {
            get
            {
                return _ApplyId;
            }
            set
            {
    
                if (_ApplyId != value)
                {
                          
                _ApplyId = value; 
               
           		}
    		}
     	}
    
     	private string _ApplyId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderRefundDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderRefundDTO dto = srcDTO as OrderRefundDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.RefundType = dto.RefundType;
    								
    				 this.RefundReason = dto.RefundReason;
    								
    				 this.RefundMoney = dto.RefundMoney;
    								
    				 this.RefundDesc = dto.RefundDesc;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.State = dto.State;
    								
    				 this.ReceiverAccount = dto.ReceiverAccount;
    								
    				 this.Receiver = dto.Receiver;
    								
    				 this.RefundExpCo = dto.RefundExpCo;
    								
    				 this.RefundExpOrderNo = dto.RefundExpOrderNo;
    								
    				 this.OrderRefundImgs = dto.OrderRefundImgs;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.DataType = dto.DataType;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.RefuseTime = dto.RefuseTime;
    								
    				 this.IsFullRefund = dto.IsFullRefund;
    								
    				 this.RefuseReason = dto.RefuseReason;
    								
    				 this.NotReceiveTime = dto.NotReceiveTime;
    								
    				 this.RefundExpOrderTime = dto.RefundExpOrderTime;
    								
    				 this.IsDelayConfirmTimeAfterSales = dto.IsDelayConfirmTimeAfterSales;
    								
    				 this.AgreeFlag = dto.AgreeFlag;
    								
    				 this.RefundScoreMoney = dto.RefundScoreMoney;
    								
    				 this.SalerRemark = dto.SalerRemark;
    								
    				 this.RefundYJBMoney = dto.RefundYJBMoney;
    								
    				 this.RefundFreightPrice = dto.RefundFreightPrice;
    								
    				 this.RefundChangeFreightPrice = dto.RefundChangeFreightPrice;
    								
    				 this.RefundChangeRealPrice = dto.RefundChangeRealPrice;
    								
    				 this.RefundDuty = dto.RefundDuty;
    								
    				 this.RejectFreightMoney = dto.RejectFreightMoney;
    								
    				 this.ApplyId = dto.ApplyId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderRefundDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderRefundDTO();
                base.ToBEData(ref todto);
    			OrderRefundDTO dto = todto as OrderRefundDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.RefundType = this.RefundType;
    								
    				 dto.RefundReason = this.RefundReason;
    								
    				 dto.RefundMoney = this.RefundMoney;
    								
    				 dto.RefundDesc = this.RefundDesc;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.State = this.State;
    								
    				 dto.ReceiverAccount = this.ReceiverAccount;
    								
    				 dto.Receiver = this.Receiver;
    								
    				 dto.RefundExpCo = this.RefundExpCo;
    								
    				 dto.RefundExpOrderNo = this.RefundExpOrderNo;
    								
    				 dto.OrderRefundImgs = this.OrderRefundImgs;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.DataType = this.DataType;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.RefuseTime = this.RefuseTime;
    								
    				 dto.IsFullRefund = this.IsFullRefund;
    								
    				 dto.RefuseReason = this.RefuseReason;
    								
    				 dto.NotReceiveTime = this.NotReceiveTime;
    								
    				 dto.RefundExpOrderTime = this.RefundExpOrderTime;
    								
    				 dto.IsDelayConfirmTimeAfterSales = this.IsDelayConfirmTimeAfterSales;
    								
    				 dto.AgreeFlag = this.AgreeFlag;
    								
    				 dto.RefundScoreMoney = this.RefundScoreMoney;
    								
    				 dto.SalerRemark = this.SalerRemark;
    								
    				 dto.RefundYJBMoney = this.RefundYJBMoney;
    								
    				 dto.RefundFreightPrice = this.RefundFreightPrice;
    								
    				 dto.RefundChangeFreightPrice = this.RefundChangeFreightPrice;
    								
    				 dto.RefundChangeRealPrice = this.RefundChangeRealPrice;
    								
    				 dto.RefundDuty = this.RefundDuty;
    								
    				 dto.RejectFreightMoney = this.RejectFreightMoney;
    								
    				 dto.ApplyId = this.ApplyId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单ID=0,商品ID=1
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderRefundAfterSales",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderRefundAfterSalesDTO))]
    public partial class OrderRefundAfterSales: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderRefundAfterSales ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 退款类型：仅退款=0，退货退款=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundType",DTOPropertyName="RefundType",IsRequired=true, IsSerializable = true)]
        public int RefundType
        {
            get
            {
                return _RefundType;
            }
            set
            {
    
                if (_RefundType != value)
                {
                          
                _RefundType = value; 
               
           		}
    		}
     	}
    
     	private int _RefundType;
        
    
        /// <summary>
        /// 退款原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundReason",DTOPropertyName="RefundReason",IsRequired=true, IsSerializable = true)]
        public string RefundReason
        {
            get
            {
                return _RefundReason;
            }
            set
            {
    
                if (_RefundReason != value)
                {
                          
                _RefundReason = value; 
               
           		}
    		}
     	}
    
     	private string _RefundReason;
        
    
        /// <summary>
        /// 退款金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundMoney",DTOPropertyName="RefundMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundMoney
        {
            get
            {
                return _RefundMoney;
            }
            set
            {
    
                if (_RefundMoney != value)
                {
                          
                _RefundMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundMoney;
        
    
        /// <summary>
        /// 退款详细说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundDesc",DTOPropertyName="RefundDesc",IsRequired=false, IsSerializable = true)]
        public string RefundDesc
        {
            get
            {
                return _RefundDesc;
            }
            set
            {
    
                if (_RefundDesc != value)
                {
                          
                _RefundDesc = value; 
               
           		}
    		}
     	}
    
     	private string _RefundDesc;
        
    
        /// <summary>
        /// 订单ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 状态：退款中=0，已退款=1，已拒绝申请=2，卖家已拒绝=4,已撤销=3，售后退款中商家同意退款，商家未收到货=10 , 买家已发货=11,金和处理退款中=12,买家发货超时，商家未收到货=13
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 收款人账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReceiverAccount",DTOPropertyName="ReceiverAccount",IsRequired=false, IsSerializable = true)]
        public string ReceiverAccount
        {
            get
            {
                return _ReceiverAccount;
            }
            set
            {
    
                if (_ReceiverAccount != value)
                {
                          
                _ReceiverAccount = value; 
               
           		}
    		}
     	}
    
     	private string _ReceiverAccount;
        
    
        /// <summary>
        /// 收款人姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Receiver",DTOPropertyName="Receiver",IsRequired=false, IsSerializable = true)]
        public string Receiver
        {
            get
            {
                return _Receiver;
            }
            set
            {
    
                if (_Receiver != value)
                {
                          
                _Receiver = value; 
               
           		}
    		}
     	}
    
     	private string _Receiver;
        
    
        /// <summary>
        /// 退货物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpCo",DTOPropertyName="RefundExpCo",IsRequired=false, IsSerializable = true)]
        public string RefundExpCo
        {
            get
            {
                return _RefundExpCo;
            }
            set
            {
    
                if (_RefundExpCo != value)
                {
                          
                _RefundExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpCo;
        
    
        /// <summary>
        /// 退货物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpOrderNo",DTOPropertyName="RefundExpOrderNo",IsRequired=false, IsSerializable = true)]
        public string RefundExpOrderNo
        {
            get
            {
                return _RefundExpOrderNo;
            }
            set
            {
    
                if (_RefundExpOrderNo != value)
                {
                          
                _RefundExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpOrderNo;
        
    
        /// <summary>
        /// 退款图片地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundImgs",DTOPropertyName="OrderRefundImgs",IsRequired=false, IsSerializable = true)]
        public string OrderRefundImgs
        {
            get
            {
                return _OrderRefundImgs;
            }
            set
            {
    
                if (_OrderRefundImgs != value)
                {
                          
                _OrderRefundImgs = value; 
               
           		}
    		}
     	}
    
     	private string _OrderRefundImgs;
        
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 订单ID=0,商品ID=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DataType",DTOPropertyName="DataType",IsRequired=true, IsSerializable = true)]
        public string DataType
        {
            get
            {
                return _DataType;
            }
            set
            {
    
                if (_DataType != value)
                {
                          
                _DataType = value; 
               
           		}
    		}
     	}
    
     	private string _DataType;
        
    
        /// <summary>
        /// 订单项Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _OrderItemId;
        
    
        /// <summary>
        /// 拒绝时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefuseTime",DTOPropertyName="RefuseTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> RefuseTime
        {
            get
            {
                return _RefuseTime;
            }
            set
            {
    
                if (_RefuseTime != value)
                {
                          
                _RefuseTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _RefuseTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsFullRefund",DTOPropertyName="IsFullRefund",IsRequired=false, IsSerializable = true)]
        public Nullable<int> IsFullRefund
        {
            get
            {
                return _IsFullRefund;
            }
            set
            {
    
                if (_IsFullRefund != value)
                {
                          
                _IsFullRefund = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _IsFullRefund;
        
    
        /// <summary>
        /// 拒绝原因
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefuseReason",DTOPropertyName="RefuseReason",IsRequired=false, IsSerializable = true)]
        public string RefuseReason
        {
            get
            {
                return _RefuseReason;
            }
            set
            {
    
                if (_RefuseReason != value)
                {
                          
                _RefuseReason = value; 
               
           		}
    		}
     	}
    
     	private string _RefuseReason;
        
    
        /// <summary>
        /// 未收到货超时时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NotReceiveTime",DTOPropertyName="NotReceiveTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> NotReceiveTime
        {
            get
            {
                return _NotReceiveTime;
            }
            set
            {
    
                if (_NotReceiveTime != value)
                {
                          
                _NotReceiveTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _NotReceiveTime;
        
    
        /// <summary>
        /// 买家退货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpOrderTime",DTOPropertyName="RefundExpOrderTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> RefundExpOrderTime
        {
            get
            {
                return _RefundExpOrderTime;
            }
            set
            {
    
                if (_RefundExpOrderTime != value)
                {
                          
                _RefundExpOrderTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _RefundExpOrderTime;
        
    
        /// <summary>
        /// 退还积分的金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundScoreMoney",DTOPropertyName="RefundScoreMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundScoreMoney
        {
            get
            {
                return _RefundScoreMoney;
            }
            set
            {
    
                if (_RefundScoreMoney != value)
                {
                          
                _RefundScoreMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundScoreMoney;
        
    
        /// <summary>
        /// 商家备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SalerRemark",DTOPropertyName="SalerRemark",IsRequired=false, IsSerializable = true)]
        public string SalerRemark
        {
            get
            {
                return _SalerRemark;
            }
            set
            {
    
                if (_SalerRemark != value)
                {
                          
                _SalerRemark = value; 
               
           		}
    		}
     	}
    
     	private string _SalerRemark;
        
    
        /// <summary>
        /// 易捷币退款金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundYJBMoney",DTOPropertyName="RefundYJBMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundYJBMoney
        {
            get
            {
                return _RefundYJBMoney;
            }
            set
            {
    
                if (_RefundYJBMoney != value)
                {
                          
                _RefundYJBMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundYJBMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundFreightPrice",DTOPropertyName="RefundFreightPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundFreightPrice
        {
            get
            {
                return _RefundFreightPrice;
            }
            set
            {
    
                if (_RefundFreightPrice != value)
                {
                          
                _RefundFreightPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundFreightPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundChangeFreightPrice",DTOPropertyName="RefundChangeFreightPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundChangeFreightPrice
        {
            get
            {
                return _RefundChangeFreightPrice;
            }
            set
            {
    
                if (_RefundChangeFreightPrice != value)
                {
                          
                _RefundChangeFreightPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundChangeFreightPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundChangeRealPrice",DTOPropertyName="RefundChangeRealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundChangeRealPrice
        {
            get
            {
                return _RefundChangeRealPrice;
            }
            set
            {
    
                if (_RefundChangeRealPrice != value)
                {
                          
                _RefundChangeRealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundChangeRealPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundDuty",DTOPropertyName="RefundDuty",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> RefundDuty
        {
            get
            {
                return _RefundDuty;
            }
            set
            {
    
                if (_RefundDuty != value)
                {
                          
                _RefundDuty = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _RefundDuty;
        
    
        /// <summary>
        /// 上门取件或第三方邮寄运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickUpFreightMoney",DTOPropertyName="PickUpFreightMoney",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> PickUpFreightMoney
        {
            get
            {
                return _PickUpFreightMoney;
            }
            set
            {
    
                if (_PickUpFreightMoney != value)
                {
                          
                _PickUpFreightMoney = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _PickUpFreightMoney;
        
    
        /// <summary>
        /// 取件类型(1上门取件，2客户发货)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickwareType",DTOPropertyName="PickwareType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> PickwareType
        {
            get
            {
                return _PickwareType;
            }
            set
            {
    
                if (_PickwareType != value)
                {
                          
                _PickwareType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _PickwareType;
        
    
        /// <summary>
        /// 进销存-京东售后服务单id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JDEclpOrderRefundAfterSalesId",DTOPropertyName="JDEclpOrderRefundAfterSalesId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> JDEclpOrderRefundAfterSalesId
        {
            get
            {
                return _JDEclpOrderRefundAfterSalesId;
            }
            set
            {
    
                if (_JDEclpOrderRefundAfterSalesId != value)
                {
                          
                _JDEclpOrderRefundAfterSalesId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _JDEclpOrderRefundAfterSalesId;
        
    
        /// <summary>
        /// 上门取件地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PickwareAddress",DTOPropertyName="PickwareAddress",IsRequired=false, IsSerializable = true)]
        public string PickwareAddress
        {
            get
            {
                return _PickwareAddress;
            }
            set
            {
    
                if (_PickwareAddress != value)
                {
                          
                _PickwareAddress = value; 
               
           		}
    		}
     	}
    
     	private string _PickwareAddress;
        
    
        /// <summary>
        /// 上门取件联系电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CustomerTel",DTOPropertyName="CustomerTel",IsRequired=false, IsSerializable = true)]
        public string CustomerTel
        {
            get
            {
                return _CustomerTel;
            }
            set
            {
    
                if (_CustomerTel != value)
                {
                          
                _CustomerTel = value; 
               
           		}
    		}
     	}
    
     	private string _CustomerTel;
        
    
        /// <summary>
        /// 上门取件联系人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CustomerContactName",DTOPropertyName="CustomerContactName",IsRequired=false, IsSerializable = true)]
        public string CustomerContactName
        {
            get
            {
                return _CustomerContactName;
            }
            set
            {
    
                if (_CustomerContactName != value)
                {
                          
                _CustomerContactName = value; 
               
           		}
    		}
     	}
    
     	private string _CustomerContactName;
        
    
        /// <summary>
        /// 退款审核用户Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditUserId",DTOPropertyName="AuditUserId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AuditUserId
        {
            get
            {
                return _AuditUserId;
            }
            set
            {
    
                if (_AuditUserId != value)
                {
                          
                _AuditUserId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AuditUserId;
        
    
        /// <summary>
        /// 退款审核用户名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AuditUserName",DTOPropertyName="AuditUserName",IsRequired=false, IsSerializable = true)]
        public string AuditUserName
        {
            get
            {
                return _AuditUserName;
            }
            set
            {
    
                if (_AuditUserName != value)
                {
                          
                _AuditUserName = value; 
               
           		}
    		}
     	}
    
     	private string _AuditUserName;
        
    
        /// <summary>
        /// 验收不合格的商品寄回给用户收取的运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SendBackFreightMoney",DTOPropertyName="SendBackFreightMoney",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> SendBackFreightMoney
        {
            get
            {
                return _SendBackFreightMoney;
            }
            set
            {
    
                if (_SendBackFreightMoney != value)
                {
                          
                _SendBackFreightMoney = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _SendBackFreightMoney;
        
    
        /// <summary>
        /// 第三方ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ApplyId",DTOPropertyName="ApplyId",IsRequired=false, IsSerializable = true)]
        public string ApplyId
        {
            get
            {
                return _ApplyId;
            }
            set
            {
    
                if (_ApplyId != value)
                {
                          
                _ApplyId = value; 
               
           		}
    		}
     	}
    
     	private string _ApplyId;
        
    
        /// <summary>
        /// 退货接收完整地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundReceiveFullAddress",DTOPropertyName="RefundReceiveFullAddress",IsRequired=false, IsSerializable = true)]
        public string RefundReceiveFullAddress
        {
            get
            {
                return _RefundReceiveFullAddress;
            }
            set
            {
    
                if (_RefundReceiveFullAddress != value)
                {
                          
                _RefundReceiveFullAddress = value; 
               
           		}
    		}
     	}
    
     	private string _RefundReceiveFullAddress;
        
    
        /// <summary>
        /// 退货收件人姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundReceiveName",DTOPropertyName="RefundReceiveName",IsRequired=false, IsSerializable = true)]
        public string RefundReceiveName
        {
            get
            {
                return _RefundReceiveName;
            }
            set
            {
    
                if (_RefundReceiveName != value)
                {
                          
                _RefundReceiveName = value; 
               
           		}
    		}
     	}
    
     	private string _RefundReceiveName;
        
    
        /// <summary>
        /// 退货收件人手机
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundReceiveMobile",DTOPropertyName="RefundReceiveMobile",IsRequired=false, IsSerializable = true)]
        public string RefundReceiveMobile
        {
            get
            {
                return _RefundReceiveMobile;
            }
            set
            {
    
                if (_RefundReceiveMobile != value)
                {
                          
                _RefundReceiveMobile = value; 
               
           		}
    		}
     	}
    
     	private string _RefundReceiveMobile;
        
    
        /// <summary>
        /// 申请单类型(1：无理由(普通退货)，2：质量问题(顺丰到付))
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundReturnType",DTOPropertyName="RefundReturnType",IsRequired=false, IsSerializable = true)]
        public Nullable<int> RefundReturnType
        {
            get
            {
                return _RefundReturnType;
            }
            set
            {
    
                if (_RefundReturnType != value)
                {
                          
                _RefundReturnType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _RefundReturnType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderRefundAfterSalesDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderRefundAfterSalesDTO dto = srcDTO as OrderRefundAfterSalesDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.RefundType = dto.RefundType;
    								
    				 this.RefundReason = dto.RefundReason;
    								
    				 this.RefundMoney = dto.RefundMoney;
    								
    				 this.RefundDesc = dto.RefundDesc;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.State = dto.State;
    								
    				 this.ReceiverAccount = dto.ReceiverAccount;
    								
    				 this.Receiver = dto.Receiver;
    								
    				 this.RefundExpCo = dto.RefundExpCo;
    								
    				 this.RefundExpOrderNo = dto.RefundExpOrderNo;
    								
    				 this.OrderRefundImgs = dto.OrderRefundImgs;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.DataType = dto.DataType;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.RefuseTime = dto.RefuseTime;
    								
    				 this.IsFullRefund = dto.IsFullRefund;
    								
    				 this.RefuseReason = dto.RefuseReason;
    								
    				 this.NotReceiveTime = dto.NotReceiveTime;
    								
    				 this.RefundExpOrderTime = dto.RefundExpOrderTime;
    								
    				 this.RefundScoreMoney = dto.RefundScoreMoney;
    								
    				 this.SalerRemark = dto.SalerRemark;
    								
    				 this.RefundYJBMoney = dto.RefundYJBMoney;
    								
    				 this.RefundFreightPrice = dto.RefundFreightPrice;
    								
    				 this.RefundChangeFreightPrice = dto.RefundChangeFreightPrice;
    								
    				 this.RefundChangeRealPrice = dto.RefundChangeRealPrice;
    								
    				 this.RefundDuty = dto.RefundDuty;
    								
    				 this.PickUpFreightMoney = dto.PickUpFreightMoney;
    								
    				 this.PickwareType = dto.PickwareType;
    								
    				 this.JDEclpOrderRefundAfterSalesId = dto.JDEclpOrderRefundAfterSalesId;
    								
    				 this.PickwareAddress = dto.PickwareAddress;
    								
    				 this.CustomerTel = dto.CustomerTel;
    								
    				 this.CustomerContactName = dto.CustomerContactName;
    								
    				 this.AuditUserId = dto.AuditUserId;
    								
    				 this.AuditUserName = dto.AuditUserName;
    								
    				 this.SendBackFreightMoney = dto.SendBackFreightMoney;
    								
    				 this.ApplyId = dto.ApplyId;
    								
    				 this.RefundReceiveFullAddress = dto.RefundReceiveFullAddress;
    								
    				 this.RefundReceiveName = dto.RefundReceiveName;
    								
    				 this.RefundReceiveMobile = dto.RefundReceiveMobile;
    								
    				 this.RefundReturnType = dto.RefundReturnType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderRefundAfterSalesDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderRefundAfterSalesDTO();
                base.ToBEData(ref todto);
    			OrderRefundAfterSalesDTO dto = todto as OrderRefundAfterSalesDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.RefundType = this.RefundType;
    								
    				 dto.RefundReason = this.RefundReason;
    								
    				 dto.RefundMoney = this.RefundMoney;
    								
    				 dto.RefundDesc = this.RefundDesc;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.State = this.State;
    								
    				 dto.ReceiverAccount = this.ReceiverAccount;
    								
    				 dto.Receiver = this.Receiver;
    								
    				 dto.RefundExpCo = this.RefundExpCo;
    								
    				 dto.RefundExpOrderNo = this.RefundExpOrderNo;
    								
    				 dto.OrderRefundImgs = this.OrderRefundImgs;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.DataType = this.DataType;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.RefuseTime = this.RefuseTime;
    								
    				 dto.IsFullRefund = this.IsFullRefund;
    								
    				 dto.RefuseReason = this.RefuseReason;
    								
    				 dto.NotReceiveTime = this.NotReceiveTime;
    								
    				 dto.RefundExpOrderTime = this.RefundExpOrderTime;
    								
    				 dto.RefundScoreMoney = this.RefundScoreMoney;
    								
    				 dto.SalerRemark = this.SalerRemark;
    								
    				 dto.RefundYJBMoney = this.RefundYJBMoney;
    								
    				 dto.RefundFreightPrice = this.RefundFreightPrice;
    								
    				 dto.RefundChangeFreightPrice = this.RefundChangeFreightPrice;
    								
    				 dto.RefundChangeRealPrice = this.RefundChangeRealPrice;
    								
    				 dto.RefundDuty = this.RefundDuty;
    								
    				 dto.PickUpFreightMoney = this.PickUpFreightMoney;
    								
    				 dto.PickwareType = this.PickwareType;
    								
    				 dto.JDEclpOrderRefundAfterSalesId = this.JDEclpOrderRefundAfterSalesId;
    								
    				 dto.PickwareAddress = this.PickwareAddress;
    								
    				 dto.CustomerTel = this.CustomerTel;
    								
    				 dto.CustomerContactName = this.CustomerContactName;
    								
    				 dto.AuditUserId = this.AuditUserId;
    								
    				 dto.AuditUserName = this.AuditUserName;
    								
    				 dto.SendBackFreightMoney = this.SendBackFreightMoney;
    								
    				 dto.ApplyId = this.ApplyId;
    								
    				 dto.RefundReceiveFullAddress = this.RefundReceiveFullAddress;
    								
    				 dto.RefundReceiveName = this.RefundReceiveName;
    								
    				 dto.RefundReceiveMobile = this.RefundReceiveMobile;
    								
    				 dto.RefundReturnType = this.RefundReturnType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 退款明细表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderRefundInfo",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderRefundInfoDTO))]
    public partial class OrderRefundInfo: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderRefundInfo ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ItemId",DTOPropertyName="ItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
    
                if (_ItemId != value)
                {
                          
                _ItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ItemId;
        
    
        /// <summary>
        /// 退款
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Refund",DTOPropertyName="Refund",IsRequired=true, IsSerializable = true)]
        public decimal Refund
        {
            get
            {
                return _Refund;
            }
            set
            {
    
                if (_Refund != value)
                {
                          
                _Refund = value; 
               
           		}
    		}
     	}
    
     	private decimal _Refund;
        
    
        /// <summary>
        /// 是否运费，若是运费商品Id为空00000000-0000-0000-0000-0000000000000
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="isDelivery",DTOPropertyName="isDelivery",IsRequired=true, IsSerializable = true)]
        public bool isDelivery
        {
            get
            {
                return _isDelivery;
            }
            set
            {
    
                if (_isDelivery != value)
                {
                          
                _isDelivery = value; 
               
           		}
    		}
     	}
    
     	private bool _isDelivery;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundId",DTOPropertyName="OrderRefundId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderRefundId
        {
            get
            {
                return _OrderRefundId;
            }
            set
            {
    
                if (_OrderRefundId != value)
                {
                          
                _OrderRefundId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderRefundId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderRefundInfoDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderRefundInfoDTO dto = srcDTO as OrderRefundInfoDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.ItemId = dto.ItemId;
    								
    				 this.Refund = dto.Refund;
    								
    				 this.isDelivery = dto.isDelivery;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.OrderRefundId = dto.OrderRefundId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderRefundInfoDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderRefundInfoDTO();
                base.ToBEData(ref todto);
    			OrderRefundInfoDTO dto = todto as OrderRefundInfoDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.ItemId = this.ItemId;
    								
    				 dto.Refund = this.Refund;
    								
    				 dto.isDelivery = this.isDelivery;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.OrderRefundId = this.OrderRefundId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 订单分成表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderShare",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderShareDTO))]
    public partial class OrderShare: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderShare ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 参加分成的金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePrice",DTOPropertyName="SharePrice",IsRequired=true, IsSerializable = true)]
        public decimal SharePrice
        {
            get
            {
                return _SharePrice;
            }
            set
            {
    
                if (_SharePrice != value)
                {
                          
                _SharePrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _SharePrice;
        
    
        /// <summary>
        /// 分成佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Commission",DTOPropertyName="Commission",IsRequired=true, IsSerializable = true)]
        public decimal Commission
        {
            get
            {
                return _Commission;
            }
            set
            {
    
                if (_Commission != value)
                {
                          
                _Commission = value; 
               
           		}
    		}
     	}
    
     	private decimal _Commission;
        
    
        /// <summary>
        /// 分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharePercent",DTOPropertyName="SharePercent",IsRequired=true, IsSerializable = true)]
        public decimal SharePercent
        {
            get
            {
                return _SharePercent;
            }
            set
            {
    
                if (_SharePercent != value)
                {
                          
                _SharePercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _SharePercent;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 分成类型（同收款人角色）,1:商家，2：金和众销（给金和分的钱），3：商贸众销（给分享者分的钱），4：商贸众筹，5：推广主分成，6：应用主分成，7金和分润，8买家,9一级分销,10二级分销,11三级分销,12渠道推广
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayeeType",DTOPropertyName="PayeeType",IsRequired=true, IsSerializable = true)]
        public int PayeeType
        {
            get
            {
                return _PayeeType;
            }
            set
            {
    
                if (_PayeeType != value)
                {
                          
                _PayeeType = value; 
               
           		}
    		}
     	}
    
     	private int _PayeeType;
        
    
        /// <summary>
        /// 收款人
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayeeId",DTOPropertyName="PayeeId",IsRequired=true, IsSerializable = true)]
        public System.Guid PayeeId
        {
            get
            {
                return _PayeeId;
            }
            set
            {
    
                if (_PayeeId != value)
                {
                          
                _PayeeId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PayeeId;
        
    
        /// <summary>
        /// 分成标识：(如Distributor.Id)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareKey",DTOPropertyName="ShareKey",IsRequired=false, IsSerializable = true)]
        public string ShareKey
        {
            get
            {
                return _ShareKey;
            }
            set
            {
    
                if (_ShareKey != value)
                {
                          
                _ShareKey = value; 
               
           		}
    		}
     	}
    
     	private string _ShareKey;
        
    
        /// <summary>
        /// 应发佣金
        /// </summary>
        /// <LongDescription>
        /// 佣金发积分，可能存在积分除不尽的问题，如积分汇率1：1，应发佣金为0.45元，此时应发佣金0.45，实发佣金0、
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="ShouldCommission",DTOPropertyName="ShouldCommission",IsRequired=true, IsSerializable = true)]
        public decimal ShouldCommission
        {
            get
            {
                return _ShouldCommission;
            }
            set
            {
    
                if (_ShouldCommission != value)
                {
                          
                _ShouldCommission = value; 
               
           		}
    		}
     	}
    
     	private decimal _ShouldCommission;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderShareDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderShareDTO dto = srcDTO as OrderShareDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SharePrice = dto.SharePrice;
    								
    				 this.Commission = dto.Commission;
    								
    				 this.SharePercent = dto.SharePercent;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.PayeeType = dto.PayeeType;
    								
    				 this.PayeeId = dto.PayeeId;
    								
    				 this.ShareKey = dto.ShareKey;
    								
    				 this.ShouldCommission = dto.ShouldCommission;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderShareDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderShareDTO();
                base.ToBEData(ref todto);
    			OrderShareDTO dto = todto as OrderShareDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SharePrice = this.SharePrice;
    								
    				 dto.Commission = this.Commission;
    								
    				 dto.SharePercent = this.SharePercent;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.PayeeType = this.PayeeType;
    								
    				 dto.PayeeId = this.PayeeId;
    								
    				 dto.ShareKey = this.ShareKey;
    								
    				 dto.ShouldCommission = this.ShouldCommission;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderShareMess",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderShareMessDTO))]
    public partial class OrderShareMess: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderShareMess ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareId",DTOPropertyName="ShareId",IsRequired=true, IsSerializable = true)]
        public string ShareId
        {
            get
            {
                return _ShareId;
            }
            set
            {
    
                if (_ShareId != value)
                {
                          
                _ShareId = value; 
               
           		}
    		}
     	}
    
     	private string _ShareId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderShareMessDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderShareMessDTO dto = srcDTO as OrderShareMessDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.ShareId = dto.ShareId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderShareMessDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderShareMessDTO();
                base.ToBEData(ref todto);
    			OrderShareMessDTO dto = todto as OrderShareMessDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.ShareId = this.ShareId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderShipping",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderShippingDTO))]
    public partial class OrderShipping: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderShipping ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipExpCo",DTOPropertyName="ShipExpCo",IsRequired=true, IsSerializable = true)]
        public string ShipExpCo
        {
            get
            {
                return _ShipExpCo;
            }
            set
            {
    
                if (_ShipExpCo != value)
                {
                          
                _ShipExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _ShipExpCo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpOrderNo",DTOPropertyName="ExpOrderNo",IsRequired=true, IsSerializable = true)]
        public string ExpOrderNo
        {
            get
            {
                return _ExpOrderNo;
            }
            set
            {
    
                if (_ExpOrderNo != value)
                {
                          
                _ExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpOrderNo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderShippingDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderShippingDTO dto = srcDTO as OrderShippingDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.ShipExpCo = dto.ShipExpCo;
    								
    				 this.ExpOrderNo = dto.ExpOrderNo;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderShippingDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderShippingDTO();
                base.ToBEData(ref todto);
    			OrderShippingDTO dto = todto as OrderShippingDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.ShipExpCo = this.ShipExpCo;
    								
    				 dto.ExpOrderNo = this.ExpOrderNo;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.OrderStatistics",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.OrderStatisticsDTO))]
    public partial class OrderStatistics: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  OrderStatistics ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 一年内的订单额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SumRealPrice",DTOPropertyName="SumRealPrice",IsRequired=true, IsSerializable = true)]
        public decimal SumRealPrice
        {
            get
            {
                return _SumRealPrice;
            }
            set
            {
    
                if (_SumRealPrice != value)
                {
                          
                _SumRealPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _SumRealPrice;
        
    
        /// <summary>
        /// 一年的订单量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCount",DTOPropertyName="OrderCount",IsRequired=true, IsSerializable = true)]
        public int OrderCount
        {
            get
            {
                return _OrderCount;
            }
            set
            {
    
                if (_OrderCount != value)
                {
                          
                _OrderCount = value; 
               
           		}
    		}
     	}
    
     	private int _OrderCount;
        
    
        /// <summary>
        /// 一年内最后一笔订单时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LastSubTime",DTOPropertyName="LastSubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime LastSubTime
        {
            get
            {
                return _LastSubTime;
            }
            set
            {
    
                if (_LastSubTime != value)
                {
                          
                _LastSubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _LastSubTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,OrderStatisticsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                OrderStatisticsDTO dto = srcDTO as OrderStatisticsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SumRealPrice = dto.SumRealPrice;
    								
    				 this.OrderCount = dto.OrderCount;
    								
    				 this.LastSubTime = dto.LastSubTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，OrderStatisticsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new OrderStatisticsDTO();
                base.ToBEData(ref todto);
    			OrderStatisticsDTO dto = todto as OrderStatisticsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SumRealPrice = this.SumRealPrice;
    								
    				 dto.OrderCount = this.OrderCount;
    								
    				 dto.LastSubTime = this.LastSubTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Payments",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PaymentsDTO))]
    public partial class Payments: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Payments ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsOnuse",DTOPropertyName="IsOnuse",IsRequired=true, IsSerializable = true)]
        public bool IsOnuse
        {
            get
            {
                return _IsOnuse;
            }
            set
            {
    
                if (_IsOnuse != value)
                {
                          
                _IsOnuse = value; 
               
           		}
    		}
     	}
    
     	private bool _IsOnuse;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PaymentName",DTOPropertyName="PaymentName",IsRequired=true, IsSerializable = true)]
        public string PaymentName
        {
            get
            {
                return _PaymentName;
            }
            set
            {
    
                if (_PaymentName != value)
                {
                          
                _PaymentName = value; 
               
           		}
    		}
     	}
    
     	private string _PaymentName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PaymentId",DTOPropertyName="PaymentId",IsRequired=true, IsSerializable = true)]
        public System.Guid PaymentId
        {
            get
            {
                return _PaymentId;
            }
            set
            {
    
                if (_PaymentId != value)
                {
                          
                _PaymentId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PaymentId;
        
    
        /// <summary>
        /// 合作者身份Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AliPayPartnerId",DTOPropertyName="AliPayPartnerId",IsRequired=false, IsSerializable = true)]
        public string AliPayPartnerId
        {
            get
            {
                return _AliPayPartnerId;
            }
            set
            {
    
                if (_AliPayPartnerId != value)
                {
                          
                _AliPayPartnerId = value; 
               
           		}
    		}
     	}
    
     	private string _AliPayPartnerId;
        
    
        /// <summary>
        /// 收款支付宝账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AliPaySeller",DTOPropertyName="AliPaySeller",IsRequired=false, IsSerializable = true)]
        public string AliPaySeller
        {
            get
            {
                return _AliPaySeller;
            }
            set
            {
    
                if (_AliPaySeller != value)
                {
                          
                _AliPaySeller = value; 
               
           		}
    		}
     	}
    
     	private string _AliPaySeller;
        
    
        /// <summary>
        /// 商户私钥
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AliPayPrivateKey",DTOPropertyName="AliPayPrivateKey",IsRequired=false, IsSerializable = true)]
        public string AliPayPrivateKey
        {
            get
            {
                return _AliPayPrivateKey;
            }
            set
            {
    
                if (_AliPayPrivateKey != value)
                {
                          
                _AliPayPrivateKey = value; 
               
           		}
    		}
     	}
    
     	private string _AliPayPrivateKey;
        
    
        /// <summary>
        /// 支付宝公钥
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AliPayPublicKey",DTOPropertyName="AliPayPublicKey",IsRequired=false, IsSerializable = true)]
        public string AliPayPublicKey
        {
            get
            {
                return _AliPayPublicKey;
            }
            set
            {
    
                if (_AliPayPublicKey != value)
                {
                          
                _AliPayPublicKey = value; 
               
           		}
    		}
     	}
    
     	private string _AliPayPublicKey;
        
    
        /// <summary>
        /// 安全校验码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AliPayVerifyCode",DTOPropertyName="AliPayVerifyCode",IsRequired=false, IsSerializable = true)]
        public string AliPayVerifyCode
        {
            get
            {
                return _AliPayVerifyCode;
            }
            set
            {
    
                if (_AliPayVerifyCode != value)
                {
                          
                _AliPayVerifyCode = value; 
               
           		}
    		}
     	}
    
     	private string _AliPayVerifyCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PaymentsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PaymentsDTO dto = srcDTO as PaymentsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.IsOnuse = dto.IsOnuse;
    								
    				 this.PaymentName = dto.PaymentName;
    								
    				 this.PaymentId = dto.PaymentId;
    								
    				 this.AliPayPartnerId = dto.AliPayPartnerId;
    								
    				 this.AliPaySeller = dto.AliPaySeller;
    								
    				 this.AliPayPrivateKey = dto.AliPayPrivateKey;
    								
    				 this.AliPayPublicKey = dto.AliPayPublicKey;
    								
    				 this.AliPayVerifyCode = dto.AliPayVerifyCode;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PaymentsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PaymentsDTO();
                base.ToBEData(ref todto);
    			PaymentsDTO dto = todto as PaymentsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.IsOnuse = this.IsOnuse;
    								
    				 dto.PaymentName = this.PaymentName;
    								
    				 dto.PaymentId = this.PaymentId;
    								
    				 dto.AliPayPartnerId = this.AliPayPartnerId;
    								
    				 dto.AliPaySeller = this.AliPaySeller;
    								
    				 dto.AliPayPrivateKey = this.AliPayPrivateKey;
    								
    				 dto.AliPayPublicKey = this.AliPayPublicKey;
    								
    				 dto.AliPayVerifyCode = this.AliPayVerifyCode;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 支付方式来源
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.PaySource",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PaySourceDTO))]
    public partial class PaySource: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  PaySource ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 支付方式
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Payment",DTOPropertyName="Payment",IsRequired=true, IsSerializable = true)]
        public int Payment
        {
            get
            {
                return _Payment;
            }
            set
            {
    
                if (_Payment != value)
                {
                          
                _Payment = value; 
               
           		}
    		}
     	}
    
     	private int _Payment;
        
    
        /// <summary>
        /// 交易方式：0金币担保，1直接到账
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TradeType",DTOPropertyName="TradeType",IsRequired=true, IsSerializable = true)]
        public int TradeType
        {
            get
            {
                return _TradeType;
            }
            set
            {
    
                if (_TradeType != value)
                {
                          
                _TradeType = value; 
               
           		}
    		}
     	}
    
     	private int _TradeType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PaySourceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PaySourceDTO dto = srcDTO as PaySourceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.Payment = dto.Payment;
    								
    				 this.TradeType = dto.TradeType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PaySourceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PaySourceDTO();
                base.ToBEData(ref todto);
    			PaySourceDTO dto = todto as PaySourceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.Payment = this.Payment;
    								
    				 dto.TradeType = this.TradeType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.PresentPromotion",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PresentPromotionDTO))]
    public partial class PresentPromotion: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  PresentPromotion ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 活动开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BeginTime",DTOPropertyName="BeginTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime BeginTime
        {
            get
            {
                return _BeginTime;
            }
            set
            {
    
                if (_BeginTime != value)
                {
                          
                _BeginTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _BeginTime;
        
    
        /// <summary>
        /// 活动开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EndTime;
        
    
        /// <summary>
        /// 商品单次最少购买数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Limit",DTOPropertyName="Limit",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Limit
        {
            get
            {
                return _Limit;
            }
            set
            {
    
                if (_Limit != value)
                {
                          
                _Limit = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Limit;
        
    
        /// <summary>
        /// 是否已结束
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnd",DTOPropertyName="IsEnd",IsRequired=true, IsSerializable = true)]
        public bool IsEnd
        {
            get
            {
                return _IsEnd;
            }
            set
            {
    
                if (_IsEnd != value)
                {
                          
                _IsEnd = value; 
               
           		}
    		}
     	}
    
     	private bool _IsEnd;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PresentPromotionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PresentPromotionDTO dto = srcDTO as PresentPromotionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.AppId = dto.AppId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.BeginTime = dto.BeginTime;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.Limit = dto.Limit;
    								
    				 this.IsEnd = dto.IsEnd;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PresentPromotionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PresentPromotionDTO();
                base.ToBEData(ref todto);
    			PresentPromotionDTO dto = todto as PresentPromotionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.BeginTime = this.BeginTime;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.Limit = this.Limit;
    								
    				 dto.IsEnd = this.IsEnd;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 赠品活动主商品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.PresentPromotionCommodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PresentPromotionCommodityDTO))]
    public partial class PresentPromotionCommodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  PresentPromotionCommodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 赠品活动ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PresentPromotionId",DTOPropertyName="PresentPromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PresentPromotionId
        {
            get
            {
                return _PresentPromotionId;
            }
            set
            {
    
                if (_PresentPromotionId != value)
                {
                          
                _PresentPromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PresentPromotionId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityCode",DTOPropertyName="CommodityCode",IsRequired=false, IsSerializable = true)]
        public string CommodityCode
        {
            get
            {
                return _CommodityCode;
            }
            set
            {
    
                if (_CommodityCode != value)
                {
                          
                _CommodityCode = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=true, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        
    
        /// <summary>
        /// 商品SKUID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySKUId",DTOPropertyName="CommoditySKUId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommoditySKUId
        {
            get
            {
                return _CommoditySKUId;
            }
            set
            {
    
                if (_CommoditySKUId != value)
                {
                          
                _CommoditySKUId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommoditySKUId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySKU",DTOPropertyName="CommoditySKU",IsRequired=false, IsSerializable = true)]
        public string CommoditySKU
        {
            get
            {
                return _CommoditySKU;
            }
            set
            {
    
                if (_CommoditySKU != value)
                {
                          
                _CommoditySKU = value; 
               
           		}
    		}
     	}
    
     	private string _CommoditySKU;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySKUCode",DTOPropertyName="CommoditySKUCode",IsRequired=false, IsSerializable = true)]
        public string CommoditySKUCode
        {
            get
            {
                return _CommoditySKUCode;
            }
            set
            {
    
                if (_CommoditySKUCode != value)
                {
                          
                _CommoditySKUCode = value; 
               
           		}
    		}
     	}
    
     	private string _CommoditySKUCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityPrice",DTOPropertyName="CommodityPrice",IsRequired=true, IsSerializable = true)]
        public decimal CommodityPrice
        {
            get
            {
                return _CommodityPrice;
            }
            set
            {
    
                if (_CommodityPrice != value)
                {
                          
                _CommodityPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _CommodityPrice;
        
    
        /// <summary>
        /// 商品单次最少购买数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Limit",DTOPropertyName="Limit",IsRequired=true, IsSerializable = true)]
        public int Limit
        {
            get
            {
                return _Limit;
            }
            set
            {
    
                if (_Limit != value)
                {
                          
                _Limit = value; 
               
           		}
    		}
     	}
    
     	private int _Limit;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PresentPromotionCommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PresentPromotionCommodityDTO dto = srcDTO as PresentPromotionCommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.PresentPromotionId = dto.PresentPromotionId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityCode = dto.CommodityCode;
    								
    				 this.CommodityName = dto.CommodityName;
    								
    				 this.CommoditySKUId = dto.CommoditySKUId;
    								
    				 this.CommoditySKU = dto.CommoditySKU;
    								
    				 this.CommoditySKUCode = dto.CommoditySKUCode;
    								
    				 this.CommodityPrice = dto.CommodityPrice;
    								
    				 this.Limit = dto.Limit;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PresentPromotionCommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PresentPromotionCommodityDTO();
                base.ToBEData(ref todto);
    			PresentPromotionCommodityDTO dto = todto as PresentPromotionCommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.PresentPromotionId = this.PresentPromotionId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityCode = this.CommodityCode;
    								
    				 dto.CommodityName = this.CommodityName;
    								
    				 dto.CommoditySKUId = this.CommoditySKUId;
    								
    				 dto.CommoditySKU = this.CommoditySKU;
    								
    				 dto.CommoditySKUCode = this.CommoditySKUCode;
    								
    				 dto.CommodityPrice = this.CommodityPrice;
    								
    				 dto.Limit = this.Limit;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 赠品活动赠品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.PresentPromotionGift",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PresentPromotionGiftDTO))]
    public partial class PresentPromotionGift: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  PresentPromotionGift ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 赠品活动ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PresentPromotionId",DTOPropertyName="PresentPromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PresentPromotionId
        {
            get
            {
                return _PresentPromotionId;
            }
            set
            {
    
                if (_PresentPromotionId != value)
                {
                          
                _PresentPromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PresentPromotionId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityCode",DTOPropertyName="CommodityCode",IsRequired=false, IsSerializable = true)]
        public string CommodityCode
        {
            get
            {
                return _CommodityCode;
            }
            set
            {
    
                if (_CommodityCode != value)
                {
                          
                _CommodityCode = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=true, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        
    
        /// <summary>
        /// 商品SKUID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySKUId",DTOPropertyName="CommoditySKUId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommoditySKUId
        {
            get
            {
                return _CommoditySKUId;
            }
            set
            {
    
                if (_CommoditySKUId != value)
                {
                          
                _CommoditySKUId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommoditySKUId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySKU",DTOPropertyName="CommoditySKU",IsRequired=false, IsSerializable = true)]
        public string CommoditySKU
        {
            get
            {
                return _CommoditySKU;
            }
            set
            {
    
                if (_CommoditySKU != value)
                {
                          
                _CommoditySKU = value; 
               
           		}
    		}
     	}
    
     	private string _CommoditySKU;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommoditySKUCode",DTOPropertyName="CommoditySKUCode",IsRequired=false, IsSerializable = true)]
        public string CommoditySKUCode
        {
            get
            {
                return _CommoditySKUCode;
            }
            set
            {
    
                if (_CommoditySKUCode != value)
                {
                          
                _CommoditySKUCode = value; 
               
           		}
    		}
     	}
    
     	private string _CommoditySKUCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityPrice",DTOPropertyName="CommodityPrice",IsRequired=true, IsSerializable = true)]
        public decimal CommodityPrice
        {
            get
            {
                return _CommodityPrice;
            }
            set
            {
    
                if (_CommodityPrice != value)
                {
                          
                _CommodityPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _CommodityPrice;
        
    
        /// <summary>
        /// 赠送数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Number",DTOPropertyName="Number",IsRequired=true, IsSerializable = true)]
        public int Number
        {
            get
            {
                return _Number;
            }
            set
            {
    
                if (_Number != value)
                {
                          
                _Number = value; 
               
           		}
    		}
     	}
    
     	private int _Number;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PresentPromotionGiftDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PresentPromotionGiftDTO dto = srcDTO as PresentPromotionGiftDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.PresentPromotionId = dto.PresentPromotionId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityCode = dto.CommodityCode;
    								
    				 this.CommodityName = dto.CommodityName;
    								
    				 this.CommoditySKUId = dto.CommoditySKUId;
    								
    				 this.CommoditySKU = dto.CommoditySKU;
    								
    				 this.CommoditySKUCode = dto.CommoditySKUCode;
    								
    				 this.CommodityPrice = dto.CommodityPrice;
    								
    				 this.Number = dto.Number;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PresentPromotionGiftDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PresentPromotionGiftDTO();
                base.ToBEData(ref todto);
    			PresentPromotionGiftDTO dto = todto as PresentPromotionGiftDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.PresentPromotionId = this.PresentPromotionId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityCode = this.CommodityCode;
    								
    				 dto.CommodityName = this.CommodityName;
    								
    				 dto.CommoditySKUId = this.CommoditySKUId;
    								
    				 dto.CommoditySKU = this.CommoditySKU;
    								
    				 dto.CommoditySKUCode = this.CommoditySKUCode;
    								
    				 dto.CommodityPrice = this.CommodityPrice;
    								
    				 dto.Number = this.Number;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 商品详细图片
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ProductDetailsPicture",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ProductDetailsPictureDTO))]
    public partial class ProductDetailsPicture: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ProductDetailsPicture ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 图片路径
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 序号：数字大小代表排序
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Sort",DTOPropertyName="Sort",IsRequired=true, IsSerializable = true)]
        public int Sort
        {
            get
            {
                return _Sort;
            }
            set
            {
    
                if (_Sort != value)
                {
                          
                _Sort = value; 
               
           		}
    		}
     	}
    
     	private int _Sort;
        
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ProductDetailsPictureDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ProductDetailsPictureDTO dto = srcDTO as ProductDetailsPictureDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.Sort = dto.Sort;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ProductDetailsPictureDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ProductDetailsPictureDTO();
                base.ToBEData(ref todto);
    			ProductDetailsPictureDTO dto = todto as ProductDetailsPictureDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.Sort = this.Sort;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 促销
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Promotion",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PromotionDTO))]
    public partial class Promotion: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Promotion ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 图片路径
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=true, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 促销开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StartTime",DTOPropertyName="StartTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
    
                if (_StartTime != value)
                {
                          
                _StartTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _StartTime;
        
    
        /// <summary>
        /// 促销结束时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EndTime;
        
    
        /// <summary>
        /// 折扣
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Intensity",DTOPropertyName="Intensity",IsRequired=true, IsSerializable = true)]
        public decimal Intensity
        {
            get
            {
                return _Intensity;
            }
            set
            {
    
                if (_Intensity != value)
                {
                          
                _Intensity = value; 
               
           		}
    		}
     	}
    
     	private decimal _Intensity;
        
    
        /// <summary>
        /// 是否可用：可用=True，不可用=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsEnable",DTOPropertyName="IsEnable",IsRequired=true, IsSerializable = true)]
        public bool IsEnable
        {
            get
            {
                return _IsEnable;
            }
            set
            {
    
                if (_IsEnable != value)
                {
                          
                _IsEnable = value; 
               
           		}
    		}
     	}
    
     	private bool _IsEnable;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAll",DTOPropertyName="IsAll",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsAll
        {
            get
            {
                return _IsAll;
            }
            set
            {
    
                if (_IsAll != value)
                {
                          
                _IsAll = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsAll;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityNames",DTOPropertyName="CommodityNames",IsRequired=false, IsSerializable = true)]
        public string CommodityNames
        {
            get
            {
                return _CommodityNames;
            }
            set
            {
    
                if (_CommodityNames != value)
                {
                          
                _CommodityNames = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityNames;
        
    
        /// <summary>
        /// 优惠价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiscountPrice",DTOPropertyName="DiscountPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DiscountPrice
        {
            get
            {
                return _DiscountPrice;
            }
            set
            {
    
                if (_DiscountPrice != value)
                {
                          
                _DiscountPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DiscountPrice;
        
    
        /// <summary>
        /// 活动类型 0：普通活动，1：秒杀，2预售，3，拼团，5：预售(不用预约)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionType",DTOPropertyName="PromotionType",IsRequired=true, IsSerializable = true)]
        public int PromotionType
        {
            get
            {
                return _PromotionType;
            }
            set
            {
    
                if (_PromotionType != value)
                {
                          
                _PromotionType = value; 
               
           		}
    		}
     	}
    
     	private int _PromotionType;
        
    
        /// <summary>
        /// 活动来源Id(正品会Id)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChannelId",DTOPropertyName="ChannelId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ChannelId
        {
            get
            {
                return _ChannelId;
            }
            set
            {
    
                if (_ChannelId != value)
                {
                          
                _ChannelId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ChannelId;
        
    
        /// <summary>
        /// 外部活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OutsideId",DTOPropertyName="OutsideId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> OutsideId
        {
            get
            {
                return _OutsideId;
            }
            set
            {
    
                if (_OutsideId != value)
                {
                          
                _OutsideId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _OutsideId;
        
    
        /// <summary>
        /// 是否已删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 预约、预售开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PresellStartTime",DTOPropertyName="PresellStartTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PresellStartTime
        {
            get
            {
                return _PresellStartTime;
            }
            set
            {
    
                if (_PresellStartTime != value)
                {
                          
                _PresellStartTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PresellStartTime;
        
    
        /// <summary>
        /// 预约、预售结束时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PresellEndTime",DTOPropertyName="PresellEndTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PresellEndTime
        {
            get
            {
                return _PresellEndTime;
            }
            set
            {
    
                if (_PresellEndTime != value)
                {
                          
                _PresellEndTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PresellEndTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 成团人数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroupMinVolume",DTOPropertyName="GroupMinVolume",IsRequired=false, IsSerializable = true)]
        public Nullable<int> GroupMinVolume
        {
            get
            {
                return _GroupMinVolume;
            }
            set
            {
    
                if (_GroupMinVolume != value)
                {
                          
                _GroupMinVolume = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _GroupMinVolume;
        
    
        /// <summary>
        /// 超时时间单位(秒)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpireSecond",DTOPropertyName="ExpireSecond",IsRequired=false, IsSerializable = true)]
        public Nullable<int> ExpireSecond
        {
            get
            {
                return _ExpireSecond;
            }
            set
            {
    
                if (_ExpireSecond != value)
                {
                          
                _ExpireSecond = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _ExpireSecond;
        
    
        /// <summary>
        /// 活动描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 预售前是否销售
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsSell",DTOPropertyName="IsSell",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsSell
        {
            get
            {
                return _IsSell;
            }
            set
            {
    
                if (_IsSell != value)
                {
                          
                _IsSell = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsSell;
        
    
        /// <summary>
        /// 是否已执行上架JOB
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsStatis",DTOPropertyName="IsStatis",IsRequired=true, IsSerializable = true)]
        public bool IsStatis
        {
            get
            {
                return _IsStatis;
            }
            set
            {
    
                if (_IsStatis != value)
                {
                          
                _IsStatis = value; 
               
           		}
    		}
     	}
    
     	private bool _IsStatis;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LimitBuyTotal",DTOPropertyName="LimitBuyTotal",IsRequired=false, IsSerializable = true)]
        public Nullable<int> LimitBuyTotal
        {
            get
            {
                return _LimitBuyTotal;
            }
            set
            {
    
                if (_LimitBuyTotal != value)
                {
                          
                _LimitBuyTotal = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _LimitBuyTotal;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PromotionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PromotionDTO dto = srcDTO as PromotionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.StartTime = dto.StartTime;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.Intensity = dto.Intensity;
    								
    				 this.IsEnable = dto.IsEnable;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.IsAll = dto.IsAll;
    								
    				 this.CommodityNames = dto.CommodityNames;
    								
    				 this.DiscountPrice = dto.DiscountPrice;
    								
    				 this.PromotionType = dto.PromotionType;
    								
    				 this.ChannelId = dto.ChannelId;
    								
    				 this.OutsideId = dto.OutsideId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.PresellStartTime = dto.PresellStartTime;
    								
    				 this.PresellEndTime = dto.PresellEndTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroupMinVolume = dto.GroupMinVolume;
    								
    				 this.ExpireSecond = dto.ExpireSecond;
    								
    				 this.Description = dto.Description;
    								
    				 this.IsSell = dto.IsSell;
    								
    				 this.IsStatis = dto.IsStatis;
    								
    				 this.LimitBuyTotal = dto.LimitBuyTotal;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PromotionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PromotionDTO();
                base.ToBEData(ref todto);
    			PromotionDTO dto = todto as PromotionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.StartTime = this.StartTime;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.Intensity = this.Intensity;
    								
    				 dto.IsEnable = this.IsEnable;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.IsAll = this.IsAll;
    								
    				 dto.CommodityNames = this.CommodityNames;
    								
    				 dto.DiscountPrice = this.DiscountPrice;
    								
    				 dto.PromotionType = this.PromotionType;
    								
    				 dto.ChannelId = this.ChannelId;
    								
    				 dto.OutsideId = this.OutsideId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.PresellStartTime = this.PresellStartTime;
    								
    				 dto.PresellEndTime = this.PresellEndTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroupMinVolume = this.GroupMinVolume;
    								
    				 dto.ExpireSecond = this.ExpireSecond;
    								
    				 dto.Description = this.Description;
    								
    				 dto.IsSell = this.IsSell;
    								
    				 dto.IsStatis = this.IsStatis;
    								
    				 dto.LimitBuyTotal = this.LimitBuyTotal;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 促销商品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.PromotionItems",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.PromotionItemsDTO))]
    public partial class PromotionItems: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  PromotionItems ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PromotionId;
        
    
        /// <summary>
        /// 商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=false, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        
    
        /// <summary>
        /// 每人限购数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LimitBuyEach",DTOPropertyName="LimitBuyEach",IsRequired=false, IsSerializable = true)]
        public Nullable<int> LimitBuyEach
        {
            get
            {
                return _LimitBuyEach;
            }
            set
            {
    
                if (_LimitBuyEach != value)
                {
                          
                _LimitBuyEach = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _LimitBuyEach;
        
    
        /// <summary>
        /// 参加促销商品的总数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LimitBuyTotal",DTOPropertyName="LimitBuyTotal",IsRequired=false, IsSerializable = true)]
        public Nullable<int> LimitBuyTotal
        {
            get
            {
                return _LimitBuyTotal;
            }
            set
            {
    
                if (_LimitBuyTotal != value)
                {
                          
                _LimitBuyTotal = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _LimitBuyTotal;
        
    
        /// <summary>
        /// 优惠价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiscountPrice",DTOPropertyName="DiscountPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DiscountPrice
        {
            get
            {
                return _DiscountPrice;
            }
            set
            {
    
                if (_DiscountPrice != value)
                {
                          
                _DiscountPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DiscountPrice;
        
    
        /// <summary>
        /// 折扣
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Intensity",DTOPropertyName="Intensity",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Intensity
        {
            get
            {
                return _Intensity;
            }
            set
            {
    
                if (_Intensity != value)
                {
                          
                _Intensity = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Intensity;
        
    
        /// <summary>
        /// 促销商品的销量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SurplusLimitBuyTotal",DTOPropertyName="SurplusLimitBuyTotal",IsRequired=false, IsSerializable = true)]
        public Nullable<int> SurplusLimitBuyTotal
        {
            get
            {
                return _SurplusLimitBuyTotal;
            }
            set
            {
    
                if (_SurplusLimitBuyTotal != value)
                {
                          
                _SurplusLimitBuyTotal = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _SurplusLimitBuyTotal;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,PromotionItemsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                PromotionItemsDTO dto = srcDTO as PromotionItemsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.CommodityName = dto.CommodityName;
    								
    				 this.LimitBuyEach = dto.LimitBuyEach;
    								
    				 this.LimitBuyTotal = dto.LimitBuyTotal;
    								
    				 this.DiscountPrice = dto.DiscountPrice;
    								
    				 this.Intensity = dto.Intensity;
    								
    				 this.SurplusLimitBuyTotal = dto.SurplusLimitBuyTotal;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，PromotionItemsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new PromotionItemsDTO();
                base.ToBEData(ref todto);
    			PromotionItemsDTO dto = todto as PromotionItemsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.CommodityName = this.CommodityName;
    								
    				 dto.LimitBuyEach = this.LimitBuyEach;
    								
    				 dto.LimitBuyTotal = this.LimitBuyTotal;
    								
    				 dto.DiscountPrice = this.DiscountPrice;
    								
    				 dto.Intensity = this.Intensity;
    								
    				 dto.SurplusLimitBuyTotal = this.SurplusLimitBuyTotal;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 退货订单快递跟踪
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.RefundExpressTrace",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.RefundExpressTraceDTO))]
    public partial class RefundExpressTrace: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  RefundExpressTrace ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ID",DTOPropertyName="ID",IsRequired=true, IsSerializable = true)]
        public int ID
        {
            get
            {
                return _ID;
            }
            set
            {
    
                if (_ID != value)
                {
                          
                _ID = value; 
               
           		}
    		}
     	}
    
     	private int _ID;
        
    
        /// <summary>
        /// 订单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 退货物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpOrderNo",DTOPropertyName="RefundExpOrderNo",IsRequired=false, IsSerializable = true)]
        public string RefundExpOrderNo
        {
            get
            {
                return _RefundExpOrderNo;
            }
            set
            {
    
                if (_RefundExpOrderNo != value)
                {
                          
                _RefundExpOrderNo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpOrderNo;
        
    
        /// <summary>
        /// 上传快递单号时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UploadExpOrderTime",DTOPropertyName="UploadExpOrderTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> UploadExpOrderTime
        {
            get
            {
                return _UploadExpOrderTime;
            }
            set
            {
    
                if (_UploadExpOrderTime != value)
                {
                          
                _UploadExpOrderTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _UploadExpOrderTime;
        
    
        /// <summary>
        /// 快递揽收时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressDeliveryTime",DTOPropertyName="ExpressDeliveryTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ExpressDeliveryTime
        {
            get
            {
                return _ExpressDeliveryTime;
            }
            set
            {
    
                if (_ExpressDeliveryTime != value)
                {
                          
                _ExpressDeliveryTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ExpressDeliveryTime;
        
    
        /// <summary>
        /// 快递送达时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressSDTime",DTOPropertyName="ExpressSDTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ExpressSDTime
        {
            get
            {
                return _ExpressSDTime;
            }
            set
            {
    
                if (_ExpressSDTime != value)
                {
                          
                _ExpressSDTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ExpressSDTime;
        
    
        /// <summary>
        /// 物流公司名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundExpCo",DTOPropertyName="RefundExpCo",IsRequired=false, IsSerializable = true)]
        public string RefundExpCo
        {
            get
            {
                return _RefundExpCo;
            }
            set
            {
    
                if (_RefundExpCo != value)
                {
                          
                _RefundExpCo = value; 
               
           		}
    		}
     	}
    
     	private string _RefundExpCo;
        
    
        /// <summary>
        /// 商家同意退款时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AgreeRefundTime",DTOPropertyName="AgreeRefundTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> AgreeRefundTime
        {
            get
            {
                return _AgreeRefundTime;
            }
            set
            {
    
                if (_AgreeRefundTime != value)
                {
                          
                _AgreeRefundTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _AgreeRefundTime;
        
    
        /// <summary>
        /// 订单项ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _OrderItemId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,RefundExpressTraceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                RefundExpressTraceDTO dto = srcDTO as RefundExpressTraceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.ID = dto.ID;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.RefundExpOrderNo = dto.RefundExpOrderNo;
    								
    				 this.UploadExpOrderTime = dto.UploadExpOrderTime;
    								
    				 this.ExpressDeliveryTime = dto.ExpressDeliveryTime;
    								
    				 this.ExpressSDTime = dto.ExpressSDTime;
    								
    				 this.RefundExpCo = dto.RefundExpCo;
    								
    				 this.AgreeRefundTime = dto.AgreeRefundTime;
    								
    				 this.OrderItemId = dto.OrderItemId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，RefundExpressTraceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new RefundExpressTraceDTO();
                base.ToBEData(ref todto);
    			RefundExpressTraceDTO dto = todto as RefundExpressTraceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.ID = this.ID;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.RefundExpOrderNo = this.RefundExpOrderNo;
    								
    				 dto.UploadExpOrderTime = this.UploadExpOrderTime;
    								
    				 dto.ExpressDeliveryTime = this.ExpressDeliveryTime;
    								
    				 dto.ExpressSDTime = this.ExpressSDTime;
    								
    				 dto.RefundExpCo = this.RefundExpCo;
    								
    				 dto.AgreeRefundTime = this.AgreeRefundTime;
    								
    				 dto.OrderItemId = this.OrderItemId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.RelationCommodity",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.RelationCommodityDTO))]
    public partial class RelationCommodity: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  RelationCommodity ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 关联商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=true, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        
    
        /// <summary>
        /// 关联商品图片
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityPicturesPath",DTOPropertyName="CommodityPicturesPath",IsRequired=false, IsSerializable = true)]
        public string CommodityPicturesPath
        {
            get
            {
                return _CommodityPicturesPath;
            }
            set
            {
    
                if (_CommodityPicturesPath != value)
                {
                          
                _CommodityPicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityPicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RelationCommodityId",DTOPropertyName="RelationCommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid RelationCommodityId
        {
            get
            {
                return _RelationCommodityId;
            }
            set
            {
    
                if (_RelationCommodityId != value)
                {
                          
                _RelationCommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _RelationCommodityId;
        
    
        /// <summary>
        /// 关联商品编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="No_Code",DTOPropertyName="No_Code",IsRequired=true, IsSerializable = true)]
        public string No_Code
        {
            get
            {
                return _No_Code;
            }
            set
            {
    
                if (_No_Code != value)
                {
                          
                _No_Code = value; 
               
           		}
    		}
     	}
    
     	private string _No_Code;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,RelationCommodityDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                RelationCommodityDTO dto = srcDTO as RelationCommodityDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityName = dto.CommodityName;
    								
    				 this.CommodityPicturesPath = dto.CommodityPicturesPath;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.RelationCommodityId = dto.RelationCommodityId;
    								
    				 this.No_Code = dto.No_Code;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，RelationCommodityDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new RelationCommodityDTO();
                base.ToBEData(ref todto);
    			RelationCommodityDTO dto = todto as RelationCommodityDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityName = this.CommodityName;
    								
    				 dto.CommodityPicturesPath = this.CommodityPicturesPath;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.RelationCommodityId = this.RelationCommodityId;
    								
    				 dto.No_Code = this.No_Code;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 回复
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Reply",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ReplyDTO))]
    public partial class Reply: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Reply ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 回复内容(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReplyDetails",DTOPropertyName="ReplyDetails",IsRequired=false, IsSerializable = true)]
        public string ReplyDetails
        {
            get
            {
                return _ReplyDetails;
            }
            set
            {
    
                if (_ReplyDetails != value)
                {
                          
                _ReplyDetails = value; 
               
           		}
    		}
     	}
    
     	private string _ReplyDetails;
        
    
        /// <summary>
        /// 回复人ID(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReplyerId",DTOPropertyName="ReplyerId",IsRequired=true, IsSerializable = true)]
        public System.Guid ReplyerId
        {
            get
            {
                return _ReplyerId;
            }
            set
            {
    
                if (_ReplyerId != value)
                {
                          
                _ReplyerId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ReplyerId;
        
    
        /// <summary>
        /// 被回复的用户Id(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PreUserId",DTOPropertyName="PreUserId",IsRequired=true, IsSerializable = true)]
        public System.Guid PreUserId
        {
            get
            {
                return _PreUserId;
            }
            set
            {
    
                if (_PreUserId != value)
                {
                          
                _PreUserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PreUserId;
        
    
        /// <summary>
        /// 回复人姓名(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=false, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 回复人头像
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserHeader",DTOPropertyName="UserHeader",IsRequired=false, IsSerializable = true)]
        public string UserHeader
        {
            get
            {
                return _UserHeader;
            }
            set
            {
    
                if (_UserHeader != value)
                {
                          
                _UserHeader = value; 
               
           		}
    		}
     	}
    
     	private string _UserHeader;
        
    
        /// <summary>
        /// 评价ID(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ReviewId",DTOPropertyName="ReviewId",IsRequired=true, IsSerializable = true)]
        public System.Guid ReviewId
        {
            get
            {
                return _ReviewId;
            }
            set
            {
    
                if (_ReviewId != value)
                {
                          
                _ReviewId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ReviewId;
        
    
        /// <summary>
        /// 父ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentId",DTOPropertyName="ParentId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
    
                if (_ParentId != value)
                {
                          
                _ParentId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ParentId;
        
    
        /// <summary>
        /// 回复类型:0-商家回复,1-买家回复
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Type;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ReplyDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ReplyDTO dto = srcDTO as ReplyDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ReplyDetails = dto.ReplyDetails;
    								
    				 this.ReplyerId = dto.ReplyerId;
    								
    				 this.PreUserId = dto.PreUserId;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.UserHeader = dto.UserHeader;
    								
    				 this.ReviewId = dto.ReviewId;
    								
    				 this.ParentId = dto.ParentId;
    								
    				 this.Type = dto.Type;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ReplyDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ReplyDTO();
                base.ToBEData(ref todto);
    			ReplyDTO dto = todto as ReplyDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ReplyDetails = this.ReplyDetails;
    								
    				 dto.ReplyerId = this.ReplyerId;
    								
    				 dto.PreUserId = this.PreUserId;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.UserHeader = this.UserHeader;
    								
    				 dto.ReviewId = this.ReviewId;
    								
    				 dto.ParentId = this.ParentId;
    								
    				 dto.Type = this.Type;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 评价
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Review",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ReviewDTO))]
    public partial class Review: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Review ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 内容
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=true, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 用户ID(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 用户名(必填)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=true, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 用户头像
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserHeader",DTOPropertyName="UserHeader",IsRequired=false, IsSerializable = true)]
        public string UserHeader
        {
            get
            {
                return _UserHeader;
            }
            set
            {
    
                if (_UserHeader != value)
                {
                          
                _UserHeader = value; 
               
           		}
    		}
     	}
    
     	private string _UserHeader;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 评价的商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=false, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        
    
        /// <summary>
        /// 购买商品时选择的属性
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityAttributes",DTOPropertyName="CommodityAttributes",IsRequired=false, IsSerializable = true)]
        public string CommodityAttributes
        {
            get
            {
                return _CommodityAttributes;
            }
            set
            {
    
                if (_CommodityAttributes != value)
                {
                          
                _CommodityAttributes = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityAttributes;
        
    
        /// <summary>
        /// 商品的缩略图
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityPicture",DTOPropertyName="CommodityPicture",IsRequired=false, IsSerializable = true)]
        public string CommodityPicture
        {
            get
            {
                return _CommodityPicture;
            }
            set
            {
    
                if (_CommodityPicture != value)
                {
                          
                _CommodityPicture = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityPicture;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ReviewDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ReviewDTO dto = srcDTO as ReviewDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Content = dto.Content;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.UserHeader = dto.UserHeader;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityName = dto.CommodityName;
    								
    				 this.CommodityAttributes = dto.CommodityAttributes;
    								
    				 this.CommodityPicture = dto.CommodityPicture;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ReviewDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ReviewDTO();
                base.ToBEData(ref todto);
    			ReviewDTO dto = todto as ReviewDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Content = this.Content;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.UserHeader = this.UserHeader;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityName = this.CommodityName;
    								
    				 dto.CommodityAttributes = this.CommodityAttributes;
    								
    				 dto.CommodityPicture = this.CommodityPicture;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 规则说明
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.RuleDescription",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.RuleDescriptionDTO))]
    public partial class RuleDescription: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  RuleDescription ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,RuleDescriptionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                RuleDescriptionDTO dto = srcDTO as RuleDescriptionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Description = dto.Description;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，RuleDescriptionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new RuleDescriptionDTO();
                base.ToBEData(ref todto);
    			RuleDescriptionDTO dto = todto as RuleDescriptionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Description = this.Description;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ScoreSetting",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ScoreSettingDTO))]
    public partial class ScoreSetting: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ScoreSetting ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 应用id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 兑换比例:积分/ScoreCost=人民币
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ScoreCost",DTOPropertyName="ScoreCost",IsRequired=false, IsSerializable = true)]
        public Nullable<int> ScoreCost
        {
            get
            {
                return _ScoreCost;
            }
            set
            {
    
                if (_ScoreCost != value)
                {
                          
                _ScoreCost = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _ScoreCost;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Extract",DTOPropertyName="Extract",IsRequired=false, IsSerializable = true)]
        public string Extract
        {
            get
            {
                return _Extract;
            }
            set
            {
    
                if (_Extract != value)
                {
                          
                _Extract = value; 
               
           		}
    		}
     	}
    
     	private string _Extract;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ScoreSettingDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ScoreSettingDTO dto = srcDTO as ScoreSettingDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.ScoreCost = dto.ScoreCost;
    								
    				 this.Extract = dto.Extract;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ScoreSettingDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ScoreSettingDTO();
                base.ToBEData(ref todto);
    			ScoreSettingDTO dto = todto as ScoreSettingDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.ScoreCost = this.ScoreCost;
    								
    				 dto.Extract = this.Extract;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 次级属性
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SecondAttribute",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SecondAttributeDTO))]
    public partial class SecondAttribute: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SecondAttribute ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 是否删除：删除=TRUE,未删除=false
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 属性ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AttributeId",DTOPropertyName="AttributeId",IsRequired=true, IsSerializable = true)]
        public System.Guid AttributeId
        {
            get
            {
                return _AttributeId;
            }
            set
            {
    
                if (_AttributeId != value)
                {
                          
                _AttributeId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AttributeId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SecondAttributeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SecondAttributeDTO dto = srcDTO as SecondAttributeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.AttributeId = dto.AttributeId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SecondAttributeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SecondAttributeDTO();
                base.ToBEData(ref todto);
    			SecondAttributeDTO dto = todto as SecondAttributeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.AttributeId = this.AttributeId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 自提点
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SelfTakeStation",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SelfTakeStationDTO))]
    public partial class SelfTakeStation: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SelfTakeStation ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 城市总代组织ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CityOwnerId",DTOPropertyName="CityOwnerId",IsRequired=true, IsSerializable = true)]
        public System.Guid CityOwnerId
        {
            get
            {
                return _CityOwnerId;
            }
            set
            {
    
                if (_CityOwnerId != value)
                {
                          
                _CityOwnerId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CityOwnerId;
        
    
        /// <summary>
        /// 省
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Province",DTOPropertyName="Province",IsRequired=true, IsSerializable = true)]
        public string Province
        {
            get
            {
                return _Province;
            }
            set
            {
    
                if (_Province != value)
                {
                          
                _Province = value; 
               
           		}
    		}
     	}
    
     	private string _Province;
        
    
        /// <summary>
        /// 市
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="City",DTOPropertyName="City",IsRequired=true, IsSerializable = true)]
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
    
                if (_City != value)
                {
                          
                _City = value; 
               
           		}
    		}
     	}
    
     	private string _City;
        
    
        /// <summary>
        /// 区县
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="District",DTOPropertyName="District",IsRequired=true, IsSerializable = true)]
        public string District
        {
            get
            {
                return _District;
            }
            set
            {
    
                if (_District != value)
                {
                          
                _District = value; 
               
           		}
    		}
     	}
    
     	private string _District;
        
    
        /// <summary>
        /// 详细地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Address",DTOPropertyName="Address",IsRequired=true, IsSerializable = true)]
        public string Address
        {
            get
            {
                return _Address;
            }
            set
            {
    
                if (_Address != value)
                {
                          
                _Address = value; 
               
           		}
    		}
     	}
    
     	private string _Address;
        
    
        /// <summary>
        /// 推广Url
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadUrl",DTOPropertyName="SpreadUrl",IsRequired=true, IsSerializable = true)]
        public string SpreadUrl
        {
            get
            {
                return _SpreadUrl;
            }
            set
            {
    
                if (_SpreadUrl != value)
                {
                          
                _SpreadUrl = value; 
               
           		}
    		}
     	}
    
     	private string _SpreadUrl;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=true, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        
    
        /// <summary>
        /// 二维码地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="QRCodeUrl",DTOPropertyName="QRCodeUrl",IsRequired=true, IsSerializable = true)]
        public string QRCodeUrl
        {
            get
            {
                return _QRCodeUrl;
            }
            set
            {
    
                if (_QRCodeUrl != value)
                {
                          
                _QRCodeUrl = value; 
               
           		}
    		}
     	}
    
     	private string _QRCodeUrl;
        
    
        /// <summary>
        /// 推广码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadCode",DTOPropertyName="SpreadCode",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreadCode
        {
            get
            {
                return _SpreadCode;
            }
            set
            {
    
                if (_SpreadCode != value)
                {
                          
                _SpreadCode = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreadCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 类型：总代=0，电商馆=1
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeStationType",DTOPropertyName="SelfTakeStationType",IsRequired=true, IsSerializable = true)]
        public int SelfTakeStationType
        {
            get
            {
                return _SelfTakeStationType;
            }
            set
            {
    
                if (_SelfTakeStationType != value)
                {
                          
                _SelfTakeStationType = value; 
               
           		}
    		}
     	}
    
     	private int _SelfTakeStationType;
        
    
        /// <summary>
        /// 电商馆AppId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SelfTakeStationDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SelfTakeStationDTO dto = srcDTO as SelfTakeStationDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CityOwnerId = dto.CityOwnerId;
    								
    				 this.Province = dto.Province;
    								
    				 this.City = dto.City;
    								
    				 this.District = dto.District;
    								
    				 this.Address = dto.Address;
    								
    				 this.SpreadUrl = dto.SpreadUrl;
    								
    				 this.Remark = dto.Remark;
    								
    				 this.QRCodeUrl = dto.QRCodeUrl;
    								
    				 this.SpreadCode = dto.SpreadCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.SelfTakeStationType = dto.SelfTakeStationType;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SelfTakeStationDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SelfTakeStationDTO();
                base.ToBEData(ref todto);
    			SelfTakeStationDTO dto = todto as SelfTakeStationDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CityOwnerId = this.CityOwnerId;
    								
    				 dto.Province = this.Province;
    								
    				 dto.City = this.City;
    								
    				 dto.District = this.District;
    								
    				 dto.Address = this.Address;
    								
    				 dto.SpreadUrl = this.SpreadUrl;
    								
    				 dto.Remark = this.Remark;
    								
    				 dto.QRCodeUrl = this.QRCodeUrl;
    								
    				 dto.SpreadCode = this.SpreadCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.SelfTakeStationType = this.SelfTakeStationType;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 自提点负责人
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SelfTakeStationManager",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SelfTakeStationManagerDTO))]
    public partial class SelfTakeStationManager: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SelfTakeStationManager ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 修改时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 负责人IU平台登录账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=true, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        
    
        /// <summary>
        /// 负责人IU平台用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 自提点ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SelfTakeStationId",DTOPropertyName="SelfTakeStationId",IsRequired=true, IsSerializable = true)]
        public System.Guid SelfTakeStationId
        {
            get
            {
                return _SelfTakeStationId;
            }
            set
            {
    
                if (_SelfTakeStationId != value)
                {
                          
                _SelfTakeStationId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SelfTakeStationId;
        
    
        /// <summary>
        /// 是否删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SelfTakeStationManagerDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SelfTakeStationManagerDTO dto = srcDTO as SelfTakeStationManagerDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserCode = dto.UserCode;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.SelfTakeStationId = dto.SelfTakeStationId;
    								
    				 this.IsDel = dto.IsDel;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SelfTakeStationManagerDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SelfTakeStationManagerDTO();
                base.ToBEData(ref todto);
    			SelfTakeStationManagerDTO dto = todto as SelfTakeStationManagerDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserCode = this.UserCode;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.SelfTakeStationId = this.SelfTakeStationId;
    								
    				 dto.IsDel = this.IsDel;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ServiceSettings",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ServiceSettingsDTO))]
    public partial class ServiceSettings: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ServiceSettings ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Title",DTOPropertyName="Title",IsRequired=false, IsSerializable = true)]
        public string Title
        {
            get
            {
                return _Title;
            }
            set
            {
    
                if (_Title != value)
                {
                          
                _Title = value; 
               
           		}
    		}
     	}
    
     	private string _Title;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=false, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// AppId
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 逻辑删除
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Isdisable",DTOPropertyName="Isdisable",IsRequired=true, IsSerializable = true)]
        public bool Isdisable
        {
            get
            {
                return _Isdisable;
            }
            set
            {
    
                if (_Isdisable != value)
                {
                          
                _Isdisable = value; 
               
           		}
    		}
     	}
    
     	private bool _Isdisable;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ServiceSettingsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ServiceSettingsDTO dto = srcDTO as ServiceSettingsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Title = dto.Title;
    								
    				 this.Content = dto.Content;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Isdisable = dto.Isdisable;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ServiceSettingsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ServiceSettingsDTO();
                base.ToBEData(ref todto);
    			ServiceSettingsDTO dto = todto as ServiceSettingsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Title = this.Title;
    								
    				 dto.Content = this.Content;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Isdisable = this.Isdisable;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SetCategory",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SetCategoryDTO))]
    public partial class SetCategory: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SetCategory ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ParentId",DTOPropertyName="ParentId",IsRequired=true, IsSerializable = true)]
        public System.Guid ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
    
                if (_ParentId != value)
                {
                          
                _ParentId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ParentId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentLevel",DTOPropertyName="CurrentLevel",IsRequired=true, IsSerializable = true)]
        public int CurrentLevel
        {
            get
            {
                return _CurrentLevel;
            }
            set
            {
    
                if (_CurrentLevel != value)
                {
                          
                _CurrentLevel = value; 
               
           		}
    		}
     	}
    
     	private int _CurrentLevel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Sort",DTOPropertyName="Sort",IsRequired=true, IsSerializable = true)]
        public int Sort
        {
            get
            {
                return _Sort;
            }
            set
            {
    
                if (_Sort != value)
                {
                          
                _Sort = value; 
               
           		}
    		}
     	}
    
     	private int _Sort;
        
    
        /// <summary>
        /// 分类图片
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PicturesPath",DTOPropertyName="PicturesPath",IsRequired=false, IsSerializable = true)]
        public string PicturesPath
        {
            get
            {
                return _PicturesPath;
            }
            set
            {
    
                if (_PicturesPath != value)
                {
                          
                _PicturesPath = value; 
               
           		}
    		}
     	}
    
     	private string _PicturesPath;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SetCategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SetCategoryDTO dto = srcDTO as SetCategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.ParentId = dto.ParentId;
    								
    				 this.CurrentLevel = dto.CurrentLevel;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.Sort = dto.Sort;
    								
    				 this.PicturesPath = dto.PicturesPath;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SetCategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SetCategoryDTO();
                base.ToBEData(ref todto);
    			SetCategoryDTO dto = todto as SetCategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.ParentId = this.ParentId;
    								
    				 dto.CurrentLevel = this.CurrentLevel;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.Sort = this.Sort;
    								
    				 dto.PicturesPath = this.PicturesPath;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 正品会收藏
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SetCollection",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SetCollectionDTO))]
    public partial class SetCollection: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SetCollection ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 渠道Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChannelId",DTOPropertyName="ChannelId",IsRequired=true, IsSerializable = true)]
        public System.Guid ChannelId
        {
            get
            {
                return _ChannelId;
            }
            set
            {
    
                if (_ChannelId != value)
                {
                          
                _ChannelId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ChannelId;
        
    
        /// <summary>
        /// 商品收藏-&gt;商品Id，店铺收藏-&gt;appId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ColKey",DTOPropertyName="ColKey",IsRequired=true, IsSerializable = true)]
        public System.Guid ColKey
        {
            get
            {
                return _ColKey;
            }
            set
            {
    
                if (_ColKey != value)
                {
                          
                _ColKey = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ColKey;
        
    
        /// <summary>
        /// 收藏类型   1：商品收藏，2：店铺收藏
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ColType",DTOPropertyName="ColType",IsRequired=true, IsSerializable = true)]
        public int ColType
        {
            get
            {
                return _ColType;
            }
            set
            {
    
                if (_ColType != value)
                {
                          
                _ColType = value; 
               
           		}
    		}
     	}
    
     	private int _ColType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SetCollectionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SetCollectionDTO dto = srcDTO as SetCollectionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.ChannelId = dto.ChannelId;
    								
    				 this.ColKey = dto.ColKey;
    								
    				 this.ColType = dto.ColType;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SetCollectionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SetCollectionDTO();
                base.ToBEData(ref todto);
    			SetCollectionDTO dto = todto as SetCollectionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.ChannelId = this.ChannelId;
    								
    				 dto.ColKey = this.ColKey;
    								
    				 dto.ColType = this.ColType;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SetCommodityCategory",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SetCommodityCategoryDTO))]
    public partial class SetCommodityCategory: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SetCommodityCategory ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SetCategoryId",DTOPropertyName="SetCategoryId",IsRequired=true, IsSerializable = true)]
        public System.Guid SetCategoryId
        {
            get
            {
                return _SetCategoryId;
            }
            set
            {
    
                if (_SetCategoryId != value)
                {
                          
                _SetCategoryId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SetCategoryId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SetCategoryName",DTOPropertyName="SetCategoryName",IsRequired=true, IsSerializable = true)]
        public string SetCategoryName
        {
            get
            {
                return _SetCategoryName;
            }
            set
            {
    
                if (_SetCategoryName != value)
                {
                          
                _SetCategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _SetCategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SetCategorySort",DTOPropertyName="SetCategorySort",IsRequired=true, IsSerializable = true)]
        public double SetCategorySort
        {
            get
            {
                return _SetCategorySort;
            }
            set
            {
    
                if (_SetCategorySort != value)
                {
                          
                _SetCategorySort = value; 
               
           		}
    		}
     	}
    
     	private double _SetCategorySort;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SetCommodityCategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SetCommodityCategoryDTO dto = srcDTO as SetCommodityCategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SetCategoryId = dto.SetCategoryId;
    								
    				 this.SetCategoryName = dto.SetCategoryName;
    								
    				 this.SetCategorySort = dto.SetCategorySort;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SetCommodityCategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SetCommodityCategoryDTO();
                base.ToBEData(ref todto);
    			SetCommodityCategoryDTO dto = todto as SetCommodityCategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SetCategoryId = this.SetCategoryId;
    								
    				 dto.SetCategoryName = this.SetCategoryName;
    								
    				 dto.SetCategorySort = this.SetCategorySort;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SettleAccounts",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SettleAccountsDTO))]
    public partial class SettleAccounts: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SettleAccounts ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 商家类型（0-自营；1-第三方；2-门店自营）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SellerType",DTOPropertyName="SellerType",IsRequired=true, IsSerializable = true)]
        public short SellerType
        {
            get
            {
                return _SellerType;
            }
            set
            {
    
                if (_SellerType != value)
                {
                          
                _SellerType = value; 
               
           		}
    		}
     	}
    
     	private short _SellerType;
        
    
        /// <summary>
        /// 商城ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppName",DTOPropertyName="EsAppName",IsRequired=false, IsSerializable = true)]
        public string EsAppName
        {
            get
            {
                return _EsAppName;
            }
            set
            {
    
                if (_EsAppName != value)
                {
                          
                _EsAppName = value; 
               
           		}
    		}
     	}
    
     	private string _EsAppName;
        
    
        /// <summary>
        /// 订单总额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderAmount",DTOPropertyName="OrderAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderAmount
        {
            get
            {
                return _OrderAmount;
            }
            set
            {
    
                if (_OrderAmount != value)
                {
                          
                _OrderAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderAmount;
        
    
        /// <summary>
        /// 订单易捷币抵现金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderYJBAmount",DTOPropertyName="OrderYJBAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderYJBAmount
        {
            get
            {
                return _OrderYJBAmount;
            }
            set
            {
    
                if (_OrderYJBAmount != value)
                {
                          
                _OrderYJBAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderYJBAmount;
        
    
        /// <summary>
        /// 订单易捷币抵现金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SellerAmount",DTOPropertyName="SellerAmount",IsRequired=true, IsSerializable = true)]
        public decimal SellerAmount
        {
            get
            {
                return _SellerAmount;
            }
            set
            {
    
                if (_SellerAmount != value)
                {
                          
                _SellerAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _SellerAmount;
        
    
        /// <summary>
        /// 结算日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AmountDate",DTOPropertyName="AmountDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime AmountDate
        {
            get
            {
                return _AmountDate;
            }
            set
            {
    
                if (_AmountDate != value)
                {
                          
                _AmountDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _AmountDate;
        
    
        /// <summary>
        /// 是否结算
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsAmount",DTOPropertyName="IsAmount",IsRequired=true, IsSerializable = true)]
        public bool IsAmount
        {
            get
            {
                return _IsAmount;
            }
            set
            {
    
                if (_IsAmount != value)
                {
                          
                _IsAmount = value; 
               
           		}
    		}
     	}
    
     	private bool _IsAmount;
        
    
        /// <summary>
        /// 商城优惠券总额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponAmount",DTOPropertyName="CouponAmount",IsRequired=true, IsSerializable = true)]
        public decimal CouponAmount
        {
            get
            {
                return _CouponAmount;
            }
            set
            {
    
                if (_CouponAmount != value)
                {
                          
                _CouponAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _CouponAmount;
        
    
        /// <summary>
        /// 退款总额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundAmount",DTOPropertyName="RefundAmount",IsRequired=true, IsSerializable = true)]
        public decimal RefundAmount
        {
            get
            {
                return _RefundAmount;
            }
            set
            {
    
                if (_RefundAmount != value)
                {
                          
                _RefundAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundAmount;
        
    
        /// <summary>
        /// 推广佣金总额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionCommissionAmount",DTOPropertyName="PromotionCommissionAmount",IsRequired=true, IsSerializable = true)]
        public decimal PromotionCommissionAmount
        {
            get
            {
                return _PromotionCommissionAmount;
            }
            set
            {
    
                if (_PromotionCommissionAmount != value)
                {
                          
                _PromotionCommissionAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _PromotionCommissionAmount;
        
    
        /// <summary>
        /// 商城佣金总额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionAmount",DTOPropertyName="PromotionAmount",IsRequired=true, IsSerializable = true)]
        public decimal PromotionAmount
        {
            get
            {
                return _PromotionAmount;
            }
            set
            {
    
                if (_PromotionAmount != value)
                {
                          
                _PromotionAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _PromotionAmount;
        
    
        /// <summary>
        /// 备注
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Remark",DTOPropertyName="Remark",IsRequired=false, IsSerializable = true)]
        public string Remark
        {
            get
            {
                return _Remark;
            }
            set
            {
    
                if (_Remark != value)
                {
                          
                _Remark = value; 
               
           		}
    		}
     	}
    
     	private string _Remark;
        
    
        /// <summary>
        /// 是否结算成功
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettleStatue",DTOPropertyName="SettleStatue",IsRequired=true, IsSerializable = true)]
        public bool SettleStatue
        {
            get
            {
                return _SettleStatue;
            }
            set
            {
    
                if (_SettleStatue != value)
                {
                          
                _SettleStatue = value; 
               
           		}
    		}
     	}
    
     	private bool _SettleStatue;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRealAmount",DTOPropertyName="OrderRealAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderRealAmount
        {
            get
            {
                return _OrderRealAmount;
            }
            set
            {
    
                if (_OrderRealAmount != value)
                {
                          
                _OrderRealAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderRealAmount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsPaySuccess",DTOPropertyName="IsPaySuccess",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> IsPaySuccess
        {
            get
            {
                return _IsPaySuccess;
            }
            set
            {
    
                if (_IsPaySuccess != value)
                {
                          
                _IsPaySuccess = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _IsPaySuccess;
        
    
        /// <summary>
        /// 结算开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AmountStartDate",DTOPropertyName="AmountStartDate",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> AmountStartDate
        {
            get
            {
                return _AmountStartDate;
            }
            set
            {
    
                if (_AmountStartDate != value)
                {
                          
                _AmountStartDate = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _AmountStartDate;
        

        #endregion
        #region 复杂类型属性
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 0、待结算 1、等待商家确认 2、待打款 3、已结算
        /// </LongDescription> 
    	//[JHBEProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public SettleAccountsVO State
        {
            get
            {   
    			if (   _State == null)
                 {
    			    _State = new SettleAccountsVO(); 
                 }       
                return _State;
            }
            set
            {                 
                _State = value;                  
            }
        }
        private SettleAccountsVO _State = null;   
    
     
        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SettleAccountsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SettleAccountsDTO dto = srcDTO as SettleAccountsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.SellerType = dto.SellerType;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.EsAppName = dto.EsAppName;
    								
    				 this.OrderAmount = dto.OrderAmount;
    								
    				 this.OrderYJBAmount = dto.OrderYJBAmount;
    								
    				 this.SellerAmount = dto.SellerAmount;
    								
    				 this.AmountDate = dto.AmountDate;
    								
    				 this.IsAmount = dto.IsAmount;
    								
    				 this.CouponAmount = dto.CouponAmount;
    								
    				 this.RefundAmount = dto.RefundAmount;
    								
    				 this.PromotionCommissionAmount = dto.PromotionCommissionAmount;
    								
    				 this.PromotionAmount = dto.PromotionAmount;
    								
    				 this.Remark = dto.Remark;
    								
    				 this.SettleStatue = dto.SettleStatue;
    								
    				 this.State = dto.State;
    								
    				 this.OrderRealAmount = dto.OrderRealAmount;
    								
    				 this.IsPaySuccess = dto.IsPaySuccess;
    								
    				 this.AmountStartDate = dto.AmountStartDate;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SettleAccountsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SettleAccountsDTO();
                base.ToBEData(ref todto);
    			SettleAccountsDTO dto = todto as SettleAccountsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.SellerType = this.SellerType;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.EsAppName = this.EsAppName;
    								
    				 dto.OrderAmount = this.OrderAmount;
    								
    				 dto.OrderYJBAmount = this.OrderYJBAmount;
    								
    				 dto.SellerAmount = this.SellerAmount;
    								
    				 dto.AmountDate = this.AmountDate;
    								
    				 dto.IsAmount = this.IsAmount;
    								
    				 dto.CouponAmount = this.CouponAmount;
    								
    				 dto.RefundAmount = this.RefundAmount;
    								
    				 dto.PromotionCommissionAmount = this.PromotionCommissionAmount;
    								
    				 dto.PromotionAmount = this.PromotionAmount;
    								
    				 dto.Remark = this.Remark;
    								
    				 dto.SettleStatue = this.SettleStatue;
    								
    				 dto.State = this.State;
    								
    				 dto.OrderRealAmount = this.OrderRealAmount;
    								
    				 dto.IsPaySuccess = this.IsPaySuccess;
    								
    				 dto.AmountStartDate = this.AmountStartDate;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SettleAccountsDetails",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SettleAccountsDetailsDTO))]
    public partial class SettleAccountsDetails: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SettleAccountsDetails ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 结算Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SAId",DTOPropertyName="SAId",IsRequired=true, IsSerializable = true)]
        public System.Guid SAId
        {
            get
            {
                return _SAId;
            }
            set
            {
    
                if (_SAId != value)
                {
                          
                _SAId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SAId;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 下单时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderSubTime",DTOPropertyName="OrderSubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime OrderSubTime
        {
            get
            {
                return _OrderSubTime;
            }
            set
            {
    
                if (_OrderSubTime != value)
                {
                          
                _OrderSubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _OrderSubTime;
        
    
        /// <summary>
        /// 订单金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderAmount",DTOPropertyName="OrderAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderAmount
        {
            get
            {
                return _OrderAmount;
            }
            set
            {
    
                if (_OrderAmount != value)
                {
                          
                _OrderAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderAmount;
        
    
        /// <summary>
        /// 订单实付金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRealAmount",DTOPropertyName="OrderRealAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderRealAmount
        {
            get
            {
                return _OrderRealAmount;
            }
            set
            {
    
                if (_OrderRealAmount != value)
                {
                          
                _OrderRealAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderRealAmount;
        
    
        /// <summary>
        /// 订单运费
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderFreight",DTOPropertyName="OrderFreight",IsRequired=true, IsSerializable = true)]
        public decimal OrderFreight
        {
            get
            {
                return _OrderFreight;
            }
            set
            {
    
                if (_OrderFreight != value)
                {
                          
                _OrderFreight = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderFreight;
        
    
        /// <summary>
        /// 订单退款金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRefundAmount",DTOPropertyName="OrderRefundAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderRefundAmount
        {
            get
            {
                return _OrderRefundAmount;
            }
            set
            {
    
                if (_OrderRefundAmount != value)
                {
                          
                _OrderRefundAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderRefundAmount;
        
    
        /// <summary>
        /// 订单优惠券金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCouponAmount",DTOPropertyName="OrderCouponAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderCouponAmount
        {
            get
            {
                return _OrderCouponAmount;
            }
            set
            {
    
                if (_OrderCouponAmount != value)
                {
                          
                _OrderCouponAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderCouponAmount;
        
    
        /// <summary>
        /// 订单易捷币抵现金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderYJBAmount",DTOPropertyName="OrderYJBAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderYJBAmount
        {
            get
            {
                return _OrderYJBAmount;
            }
            set
            {
    
                if (_OrderYJBAmount != value)
                {
                          
                _OrderYJBAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderYJBAmount;
        
    
        /// <summary>
        ///  订单推广佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderPromotionCommissionAmount",DTOPropertyName="OrderPromotionCommissionAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderPromotionCommissionAmount
        {
            get
            {
                return _OrderPromotionCommissionAmount;
            }
            set
            {
    
                if (_OrderPromotionCommissionAmount != value)
                {
                          
                _OrderPromotionCommissionAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderPromotionCommissionAmount;
        
    
        /// <summary>
        /// 商城佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionAmount",DTOPropertyName="PromotionAmount",IsRequired=true, IsSerializable = true)]
        public decimal PromotionAmount
        {
            get
            {
                return _PromotionAmount;
            }
            set
            {
    
                if (_PromotionAmount != value)
                {
                          
                _PromotionAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _PromotionAmount;
        
    
        /// <summary>
        /// 订单结算金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SellerAmount",DTOPropertyName="SellerAmount",IsRequired=true, IsSerializable = true)]
        public decimal SellerAmount
        {
            get
            {
                return _SellerAmount;
            }
            set
            {
    
                if (_SellerAmount != value)
                {
                          
                _SellerAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _SellerAmount;
        
    
        /// <summary>
        /// 是否为商城优惠卷
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsMallCoupon",DTOPropertyName="IsMallCoupon",IsRequired=true, IsSerializable = true)]
        public bool IsMallCoupon
        {
            get
            {
                return _IsMallCoupon;
            }
            set
            {
    
                if (_IsMallCoupon != value)
                {
                          
                _IsMallCoupon = value; 
               
           		}
    		}
     	}
    
     	private bool _IsMallCoupon;
        
    
        /// <summary>
        /// 应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 是否已生成结算单
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsSettled",DTOPropertyName="IsSettled",IsRequired=true, IsSerializable = true)]
        public bool IsSettled
        {
            get
            {
                return _IsSettled;
            }
            set
            {
    
                if (_IsSettled != value)
                {
                          
                _IsSettled = value; 
               
           		}
    		}
     	}
    
     	private bool _IsSettled;
        
    
        /// <summary>
        /// 商品结算价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettleAmount",DTOPropertyName="SettleAmount",IsRequired=true, IsSerializable = true)]
        public decimal SettleAmount
        {
            get
            {
                return _SettleAmount;
            }
            set
            {
    
                if (_SettleAmount != value)
                {
                          
                _SettleAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _SettleAmount;
        
    
        /// <summary>
        /// 是否已设置结算价
        /// </summary>
        /// <LongDescription>
        /// 如果未设置结算价，则定期去设置
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="IsSetSettleAmount",DTOPropertyName="IsSetSettleAmount",IsRequired=true, IsSerializable = true)]
        public bool IsSetSettleAmount
        {
            get
            {
                return _IsSetSettleAmount;
            }
            set
            {
    
                if (_IsSetSettleAmount != value)
                {
                          
                _IsSetSettleAmount = value; 
               
           		}
    		}
     	}
    
     	private bool _IsSetSettleAmount = true;
        
    
        /// <summary>
        /// 推广佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderSpreadAmount",DTOPropertyName="OrderSpreadAmount",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> OrderSpreadAmount
        {
            get
            {
                return _OrderSpreadAmount;
            }
            set
            {
    
                if (_OrderSpreadAmount != value)
                {
                          
                _OrderSpreadAmount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _OrderSpreadAmount;
        
    
        /// <summary>
        /// 订单确认收货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderConfirmTime",DTOPropertyName="OrderConfirmTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> OrderConfirmTime
        {
            get
            {
                return _OrderConfirmTime;
            }
            set
            {
    
                if (_OrderConfirmTime != value)
                {
                          
                _OrderConfirmTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _OrderConfirmTime;
        
    
        /// <summary>
        /// 售后完成时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AfterSalesEndTime",DTOPropertyName="AfterSalesEndTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> AfterSalesEndTime
        {
            get
            {
                return _AfterSalesEndTime;
            }
            set
            {
    
                if (_AfterSalesEndTime != value)
                {
                          
                _AfterSalesEndTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _AfterSalesEndTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SettleAccountsDetailsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SettleAccountsDetailsDTO dto = srcDTO as SettleAccountsDetailsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.SAId = dto.SAId;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderSubTime = dto.OrderSubTime;
    								
    				 this.OrderAmount = dto.OrderAmount;
    								
    				 this.OrderRealAmount = dto.OrderRealAmount;
    								
    				 this.OrderFreight = dto.OrderFreight;
    								
    				 this.OrderRefundAmount = dto.OrderRefundAmount;
    								
    				 this.OrderCouponAmount = dto.OrderCouponAmount;
    								
    				 this.OrderYJBAmount = dto.OrderYJBAmount;
    								
    				 this.OrderPromotionCommissionAmount = dto.OrderPromotionCommissionAmount;
    								
    				 this.PromotionAmount = dto.PromotionAmount;
    								
    				 this.SellerAmount = dto.SellerAmount;
    								
    				 this.IsMallCoupon = dto.IsMallCoupon;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.IsSettled = dto.IsSettled;
    								
    				 this.SettleAmount = dto.SettleAmount;
    								
    				 this.IsSetSettleAmount = dto.IsSetSettleAmount;
    								
    				 this.OrderSpreadAmount = dto.OrderSpreadAmount;
    								
    				 this.OrderConfirmTime = dto.OrderConfirmTime;
    								
    				 this.AfterSalesEndTime = dto.AfterSalesEndTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SettleAccountsDetailsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SettleAccountsDetailsDTO();
                base.ToBEData(ref todto);
    			SettleAccountsDetailsDTO dto = todto as SettleAccountsDetailsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.SAId = this.SAId;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderSubTime = this.OrderSubTime;
    								
    				 dto.OrderAmount = this.OrderAmount;
    								
    				 dto.OrderRealAmount = this.OrderRealAmount;
    								
    				 dto.OrderFreight = this.OrderFreight;
    								
    				 dto.OrderRefundAmount = this.OrderRefundAmount;
    								
    				 dto.OrderCouponAmount = this.OrderCouponAmount;
    								
    				 dto.OrderYJBAmount = this.OrderYJBAmount;
    								
    				 dto.OrderPromotionCommissionAmount = this.OrderPromotionCommissionAmount;
    								
    				 dto.PromotionAmount = this.PromotionAmount;
    								
    				 dto.SellerAmount = this.SellerAmount;
    								
    				 dto.IsMallCoupon = this.IsMallCoupon;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.IsSettled = this.IsSettled;
    								
    				 dto.SettleAmount = this.SettleAmount;
    								
    				 dto.IsSetSettleAmount = this.IsSetSettleAmount;
    								
    				 dto.OrderSpreadAmount = this.OrderSpreadAmount;
    								
    				 dto.OrderConfirmTime = this.OrderConfirmTime;
    								
    				 dto.AfterSalesEndTime = this.AfterSalesEndTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SettleAccountsException",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SettleAccountsExceptionDTO))]
    public partial class SettleAccountsException: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SettleAccountsException ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 订单实际价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderRealPrice",DTOPropertyName="OrderRealPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> OrderRealPrice
        {
            get
            {
                return _OrderRealPrice;
            }
            set
            {
    
                if (_OrderRealPrice != value)
                {
                          
                _OrderRealPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _OrderRealPrice;
        
    
        /// <summary>
        /// 结算金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ClearingPrice",DTOPropertyName="ClearingPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> ClearingPrice
        {
            get
            {
                return _ClearingPrice;
            }
            set
            {
    
                if (_ClearingPrice != value)
                {
                          
                _ClearingPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _ClearingPrice;
        
    
        /// <summary>
        /// 异常信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExceptionInfo",DTOPropertyName="ExceptionInfo",IsRequired=true, IsSerializable = true)]
        public string ExceptionInfo
        {
            get
            {
                return _ExceptionInfo;
            }
            set
            {
    
                if (_ExceptionInfo != value)
                {
                          
                _ExceptionInfo = value; 
               
           		}
    		}
     	}
    
     	private string _ExceptionInfo;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SettleAccountsExceptionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SettleAccountsExceptionDTO dto = srcDTO as SettleAccountsExceptionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderRealPrice = dto.OrderRealPrice;
    								
    				 this.ClearingPrice = dto.ClearingPrice;
    								
    				 this.ExceptionInfo = dto.ExceptionInfo;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppName = dto.AppName;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SettleAccountsExceptionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SettleAccountsExceptionDTO();
                base.ToBEData(ref todto);
    			SettleAccountsExceptionDTO dto = todto as SettleAccountsExceptionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderRealPrice = this.OrderRealPrice;
    								
    				 dto.ClearingPrice = this.ClearingPrice;
    								
    				 dto.ExceptionInfo = this.ExceptionInfo;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppName = this.AppName;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SettleAccountsOrderItem",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SettleAccountsOrderItemDTO))]
    public partial class SettleAccountsOrderItem: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SettleAccountsOrderItem ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 结算订单ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单项ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 商品退货金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemRefundAmount",DTOPropertyName="OrderItemRefundAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderItemRefundAmount
        {
            get
            {
                return _OrderItemRefundAmount;
            }
            set
            {
    
                if (_OrderItemRefundAmount != value)
                {
                          
                _OrderItemRefundAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderItemRefundAmount;
        
    
        /// <summary>
        /// 商品易捷币抵现金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemYJBAmount",DTOPropertyName="OrderItemYJBAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderItemYJBAmount
        {
            get
            {
                return _OrderItemYJBAmount;
            }
            set
            {
    
                if (_OrderItemYJBAmount != value)
                {
                          
                _OrderItemYJBAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderItemYJBAmount;
        
    
        /// <summary>
        /// 商品推广佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemPromotionCommissionAmount",DTOPropertyName="OrderItemPromotionCommissionAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderItemPromotionCommissionAmount
        {
            get
            {
                return _OrderItemPromotionCommissionAmount;
            }
            set
            {
    
                if (_OrderItemPromotionCommissionAmount != value)
                {
                          
                _OrderItemPromotionCommissionAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderItemPromotionCommissionAmount;
        
    
        /// <summary>
        /// 商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemName",DTOPropertyName="OrderItemName",IsRequired=true, IsSerializable = true)]
        public string OrderItemName
        {
            get
            {
                return _OrderItemName;
            }
            set
            {
    
                if (_OrderItemName != value)
                {
                          
                _OrderItemName = value; 
               
           		}
    		}
     	}
    
     	private string _OrderItemName;
        
    
        /// <summary>
        /// 商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemNumber",DTOPropertyName="OrderItemNumber",IsRequired=true, IsSerializable = true)]
        public int OrderItemNumber
        {
            get
            {
                return _OrderItemNumber;
            }
            set
            {
    
                if (_OrderItemNumber != value)
                {
                          
                _OrderItemNumber = value; 
               
           		}
    		}
     	}
    
     	private int _OrderItemNumber;
        
    
        /// <summary>
        /// 商品价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemPrice",DTOPropertyName="OrderItemPrice",IsRequired=true, IsSerializable = true)]
        public decimal OrderItemPrice
        {
            get
            {
                return _OrderItemPrice;
            }
            set
            {
    
                if (_OrderItemPrice != value)
                {
                          
                _OrderItemPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderItemPrice;
        
    
        /// <summary>
        /// 商品结算价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettleAmount",DTOPropertyName="SettleAmount",IsRequired=true, IsSerializable = true)]
        public decimal SettleAmount
        {
            get
            {
                return _SettleAmount;
            }
            set
            {
    
                if (_SettleAmount != value)
                {
                          
                _SettleAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _SettleAmount;
        
    
        /// <summary>
        /// 商品结算价格
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BaseCommission",DTOPropertyName="BaseCommission",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> BaseCommission
        {
            get
            {
                return _BaseCommission;
            }
            set
            {
    
                if (_BaseCommission != value)
                {
                          
                _BaseCommission = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _BaseCommission;
        
    
        /// <summary>
        /// 类目佣金比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryCommission",DTOPropertyName="CategoryCommission",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CategoryCommission
        {
            get
            {
                return _CategoryCommission;
            }
            set
            {
    
                if (_CategoryCommission != value)
                {
                          
                _CategoryCommission = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CategoryCommission;
        
    
        /// <summary>
        /// 商品佣金比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityCommission",DTOPropertyName="CommodityCommission",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CommodityCommission
        {
            get
            {
                return _CommodityCommission;
            }
            set
            {
    
                if (_CommodityCommission != value)
                {
                          
                _CommodityCommission = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CommodityCommission;
        
    
        /// <summary>
        /// 商城佣金
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionAmount",DTOPropertyName="PromotionAmount",IsRequired=true, IsSerializable = true)]
        public decimal PromotionAmount
        {
            get
            {
                return _PromotionAmount;
            }
            set
            {
    
                if (_PromotionAmount != value)
                {
                          
                _PromotionAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _PromotionAmount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderYJBAmount",DTOPropertyName="OrderYJBAmount",IsRequired=true, IsSerializable = true)]
        public decimal OrderYJBAmount
        {
            get
            {
                return _OrderYJBAmount;
            }
            set
            {
    
                if (_OrderYJBAmount != value)
                {
                          
                _OrderYJBAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrderYJBAmount;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SettleAccountsOrderItemDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SettleAccountsOrderItemDTO dto = srcDTO as SettleAccountsOrderItemDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.OrderItemRefundAmount = dto.OrderItemRefundAmount;
    								
    				 this.OrderItemYJBAmount = dto.OrderItemYJBAmount;
    								
    				 this.OrderItemPromotionCommissionAmount = dto.OrderItemPromotionCommissionAmount;
    								
    				 this.OrderItemName = dto.OrderItemName;
    								
    				 this.OrderItemNumber = dto.OrderItemNumber;
    								
    				 this.OrderItemPrice = dto.OrderItemPrice;
    								
    				 this.SettleAmount = dto.SettleAmount;
    								
    				 this.BaseCommission = dto.BaseCommission;
    								
    				 this.CategoryCommission = dto.CategoryCommission;
    								
    				 this.CommodityCommission = dto.CommodityCommission;
    								
    				 this.PromotionAmount = dto.PromotionAmount;
    								
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SettleAccountsOrderItemDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SettleAccountsOrderItemDTO();
                base.ToBEData(ref todto);
    			SettleAccountsOrderItemDTO dto = todto as SettleAccountsOrderItemDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.OrderItemRefundAmount = this.OrderItemRefundAmount;
    								
    				 dto.OrderItemYJBAmount = this.OrderItemYJBAmount;
    								
    				 dto.OrderItemPromotionCommissionAmount = this.OrderItemPromotionCommissionAmount;
    								
    				 dto.OrderItemName = this.OrderItemName;
    								
    				 dto.OrderItemNumber = this.OrderItemNumber;
    								
    				 dto.OrderItemPrice = this.OrderItemPrice;
    								
    				 dto.SettleAmount = this.SettleAmount;
    								
    				 dto.BaseCommission = this.BaseCommission;
    								
    				 dto.CategoryCommission = this.CategoryCommission;
    								
    				 dto.CommodityCommission = this.CommodityCommission;
    								
    				 dto.PromotionAmount = this.PromotionAmount;
    								
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SettleAccountsPeriod",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SettleAccountsPeriodDTO))]
    public partial class SettleAccountsPeriod: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SettleAccountsPeriod ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 商城ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 天数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="NumOfDay",DTOPropertyName="NumOfDay",IsRequired=true, IsSerializable = true)]
        public int NumOfDay
        {
            get
            {
                return _NumOfDay;
            }
            set
            {
    
                if (_NumOfDay != value)
                {
                          
                _NumOfDay = value; 
               
           		}
    		}
     	}
    
     	private int _NumOfDay;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 是否使用售后完成时间结算
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UseAfterSalesEndTime",DTOPropertyName="UseAfterSalesEndTime",IsRequired=false, IsSerializable = true)]
        public Nullable<bool> UseAfterSalesEndTime
        {
            get
            {
                return _UseAfterSalesEndTime;
            }
            set
            {
    
                if (_UseAfterSalesEndTime != value)
                {
                          
                _UseAfterSalesEndTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<bool> _UseAfterSalesEndTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SettleAccountsPeriodDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SettleAccountsPeriodDTO dto = srcDTO as SettleAccountsPeriodDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.NumOfDay = dto.NumOfDay;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UseAfterSalesEndTime = dto.UseAfterSalesEndTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SettleAccountsPeriodDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SettleAccountsPeriodDTO();
                base.ToBEData(ref todto);
    			SettleAccountsPeriodDTO dto = todto as SettleAccountsPeriodDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.NumOfDay = this.NumOfDay;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UseAfterSalesEndTime = this.UseAfterSalesEndTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 结算
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SettlingAccount",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SettlingAccountDTO))]
    public partial class SettlingAccount: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SettlingAccount ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 厂家结算金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ManufacturerClearingPrice",DTOPropertyName="ManufacturerClearingPrice",IsRequired=true, IsSerializable = true)]
        public decimal ManufacturerClearingPrice
        {
            get
            {
                return _ManufacturerClearingPrice;
            }
            set
            {
    
                if (_ManufacturerClearingPrice != value)
                {
                          
                _ManufacturerClearingPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _ManufacturerClearingPrice;
        
    
        /// <summary>
        /// AppId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 是否有效
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Effectable",DTOPropertyName="Effectable",IsRequired=true, IsSerializable = true)]
        public int Effectable
        {
            get
            {
                return _Effectable;
            }
            set
            {
    
                if (_Effectable != value)
                {
                          
                _Effectable = value; 
               
           		}
    		}
     	}
    
     	private int _Effectable;
        
    
        /// <summary>
        /// 生效时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EffectiveTime",DTOPropertyName="EffectiveTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EffectiveTime
        {
            get
            {
                return _EffectiveTime;
            }
            set
            {
    
                if (_EffectiveTime != value)
                {
                          
                _EffectiveTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EffectiveTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 提交人姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubName",DTOPropertyName="SubName",IsRequired=true, IsSerializable = true)]
        public string SubName
        {
            get
            {
                return _SubName;
            }
            set
            {
    
                if (_SubName != value)
                {
                          
                _SubName = value; 
               
           		}
    		}
     	}
    
     	private string _SubName;
        
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 更新时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 提交人账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=true, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SettlingAccountDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SettlingAccountDTO dto = srcDTO as SettlingAccountDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ManufacturerClearingPrice = dto.ManufacturerClearingPrice;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.Effectable = dto.Effectable;
    								
    				 this.EffectiveTime = dto.EffectiveTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubName = dto.SubName;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.UserCode = dto.UserCode;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SettlingAccountDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SettlingAccountDTO();
                base.ToBEData(ref todto);
    			SettlingAccountDTO dto = todto as SettlingAccountDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ManufacturerClearingPrice = this.ManufacturerClearingPrice;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.Effectable = this.Effectable;
    								
    				 dto.EffectiveTime = this.EffectiveTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubName = this.SubName;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.UserCode = this.UserCode;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ShareDividend",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ShareDividendDTO))]
    public partial class ShareDividend: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ShareDividend ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 分账金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Money",DTOPropertyName="Money",IsRequired=true, IsSerializable = true)]
        public decimal Money
        {
            get
            {
                return _Money;
            }
            set
            {
    
                if (_Money != value)
                {
                          
                _Money = value; 
               
           		}
    		}
     	}
    
     	private decimal _Money;
        
    
        /// <summary>
        /// 分账日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 0：初始化，1：已分账,
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SharerMoney",DTOPropertyName="SharerMoney",IsRequired=true, IsSerializable = true)]
        public long SharerMoney
        {
            get
            {
                return _SharerMoney;
            }
            set
            {
    
                if (_SharerMoney != value)
                {
                          
                _SharerMoney = value; 
               
           		}
    		}
     	}
    
     	private long _SharerMoney;
        
    
        /// <summary>
        /// 0:众销,1,应用主分成
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareType",DTOPropertyName="ShareType",IsRequired=true, IsSerializable = true)]
        public int ShareType
        {
            get
            {
                return _ShareType;
            }
            set
            {
    
                if (_ShareType != value)
                {
                          
                _ShareType = value; 
               
           		}
    		}
     	}
    
     	private int _ShareType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ShareDividendDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ShareDividendDTO dto = srcDTO as ShareDividendDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.Money = dto.Money;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.State = dto.State;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.SharerMoney = dto.SharerMoney;
    								
    				 this.ShareType = dto.ShareType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ShareDividendDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ShareDividendDTO();
                base.ToBEData(ref todto);
    			ShareDividendDTO dto = todto as ShareDividendDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.Money = this.Money;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.State = this.State;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.SharerMoney = this.SharerMoney;
    								
    				 dto.ShareType = this.ShareType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ShareDividendDetail",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ShareDividendDetailDTO))]
    public partial class ShareDividendDetail: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ShareDividendDetail ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// RoleType是应用主时UserId是OrgId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Money",DTOPropertyName="Money",IsRequired=true, IsSerializable = true)]
        public long Money
        {
            get
            {
                return _Money;
            }
            set
            {
    
                if (_Money != value)
                {
                          
                _Money = value; 
               
           		}
    		}
     	}
    
     	private long _Money;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 得红包的角色类型：1：分享者，2：应用主为组织
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RoleType",DTOPropertyName="RoleType",IsRequired=true, IsSerializable = true)]
        public int RoleType
        {
            get
            {
                return _RoleType;
            }
            set
            {
    
                if (_RoleType != value)
                {
                          
                _RoleType = value; 
               
           		}
    		}
     	}
    
     	private int _RoleType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareDivedendId",DTOPropertyName="ShareDivedendId",IsRequired=true, IsSerializable = true)]
        public System.Guid ShareDivedendId
        {
            get
            {
                return _ShareDivedendId;
            }
            set
            {
    
                if (_ShareDivedendId != value)
                {
                          
                _ShareDivedendId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _ShareDivedendId;
        
    
        /// <summary>
        /// 0：初始化，1：已生成红包
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 分享XXXXXX商品获得金币XX个！
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ShareDividendDetailDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ShareDividendDetailDTO dto = srcDTO as ShareDividendDetailDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.Money = dto.Money;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.RoleType = dto.RoleType;
    								
    				 this.ShareDivedendId = dto.ShareDivedendId;
    								
    				 this.State = dto.State;
    								
    				 this.Description = dto.Description;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ShareDividendDetailDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ShareDividendDetailDTO();
                base.ToBEData(ref todto);
    			ShareDividendDetailDTO dto = todto as ShareDividendDetailDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.Money = this.Money;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.RoleType = this.RoleType;
    								
    				 dto.ShareDivedendId = this.ShareDivedendId;
    								
    				 dto.State = this.State;
    								
    				 dto.Description = this.Description;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ShiftTimeLog",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ShiftTimeLogDTO))]
    public partial class ShiftTimeLog: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ShiftTimeLog ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShiftTime",DTOPropertyName="ShiftTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime ShiftTime
        {
            get
            {
                return _ShiftTime;
            }
            set
            {
    
                if (_ShiftTime != value)
                {
                          
                _ShiftTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ShiftTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StoreId",DTOPropertyName="StoreId",IsRequired=true, IsSerializable = true)]
        public System.Guid StoreId
        {
            get
            {
                return _StoreId;
            }
            set
            {
    
                if (_StoreId != value)
                {
                          
                _StoreId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _StoreId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ShiftTimeLogDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ShiftTimeLogDTO dto = srcDTO as ShiftTimeLogDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.ShiftTime = dto.ShiftTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.StoreId = dto.StoreId;
    								
    				 this.AppId = dto.AppId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ShiftTimeLogDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ShiftTimeLogDTO();
                base.ToBEData(ref todto);
    			ShiftTimeLogDTO dto = todto as ShiftTimeLogDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.ShiftTime = this.ShiftTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.StoreId = this.StoreId;
    								
    				 dto.AppId = this.AppId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 购物车商品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.ShoppingCartItems",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.ShoppingCartItemsDTO))]
    public partial class ShoppingCartItems: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  ShoppingCartItems ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 商品数量（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityNumber",DTOPropertyName="CommodityNumber",IsRequired=true, IsSerializable = true)]
        public int CommodityNumber
        {
            get
            {
                return _CommodityNumber;
            }
            set
            {
    
                if (_CommodityNumber != value)
                {
                          
                _CommodityNumber = value; 
               
           		}
    		}
     	}
    
     	private int _CommodityNumber;
        
    
        /// <summary>
        /// 商品属性ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ComAttributeIds",DTOPropertyName="ComAttributeIds",IsRequired=false, IsSerializable = true)]
        public string ComAttributeIds
        {
            get
            {
                return _ComAttributeIds;
            }
            set
            {
    
                if (_ComAttributeIds != value)
                {
                          
                _ComAttributeIds = value; 
               
           		}
    		}
     	}
    
     	private string _ComAttributeIds;
        
    
        /// <summary>
        /// 用户ID（必填）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 馆Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _EsAppId;
        
    
        /// <summary>
        /// 库存ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityStockId;
        
    
        /// <summary>
        /// 金采团购活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="JcActivityId",DTOPropertyName="JcActivityId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> JcActivityId
        {
            get
            {
                return _JcActivityId;
            }
            set
            {
    
                if (_JcActivityId != value)
                {
                          
                _JcActivityId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _JcActivityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Specifications",DTOPropertyName="Specifications",IsRequired=false, IsSerializable = true)]
        public Nullable<int> Specifications
        {
            get
            {
                return _Specifications;
            }
            set
            {
    
                if (_Specifications != value)
                {
                          
                _Specifications = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _Specifications;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,ShoppingCartItemsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                ShoppingCartItemsDTO dto = srcDTO as ShoppingCartItemsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.CommodityNumber = dto.CommodityNumber;
    								
    				 this.ComAttributeIds = dto.ComAttributeIds;
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.JcActivityId = dto.JcActivityId;
    								
    				 this.Specifications = dto.Specifications;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，ShoppingCartItemsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new ShoppingCartItemsDTO();
                base.ToBEData(ref todto);
    			ShoppingCartItemsDTO dto = todto as ShoppingCartItemsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.CommodityNumber = this.CommodityNumber;
    								
    				 dto.ComAttributeIds = this.ComAttributeIds;
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.JcActivityId = this.JcActivityId;
    								
    				 dto.Specifications = this.Specifications;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Specifications",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SpecificationsDTO))]
    public partial class Specifications: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Specifications ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Attribute",DTOPropertyName="Attribute",IsRequired=true, IsSerializable = true)]
        public int Attribute
        {
            get
            {
                return _Attribute;
            }
            set
            {
    
                if (_Attribute != value)
                {
                          
                _Attribute = value; 
               
           		}
    		}
     	}
    
     	private int _Attribute;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SpecificationsDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SpecificationsDTO dto = srcDTO as SpecificationsDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Attribute = dto.Attribute;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SpecificationsDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SpecificationsDTO();
                base.ToBEData(ref todto);
    			SpecificationsDTO dto = todto as SpecificationsDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Attribute = this.Attribute;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SpreadCategory",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SpreadCategoryDTO))]
    public partial class SpreadCategory: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SpreadCategory ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 推广类型 0：推广主，1：电商馆，2：总代，3企业
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadType",DTOPropertyName="SpreadType",IsRequired=true, IsSerializable = true)]
        public int SpreadType
        {
            get
            {
                return _SpreadType;
            }
            set
            {
    
                if (_SpreadType != value)
                {
                          
                _SpreadType = value; 
               
           		}
    		}
     	}
    
     	private int _SpreadType;
        
    
        /// <summary>
        /// 分成比例
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreaderPercent",DTOPropertyName="SpreaderPercent",IsRequired=true, IsSerializable = true)]
        public decimal SpreaderPercent
        {
            get
            {
                return _SpreaderPercent;
            }
            set
            {
    
                if (_SpreaderPercent != value)
                {
                          
                _SpreaderPercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _SpreaderPercent;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Priority",DTOPropertyName="Priority",IsRequired=true, IsSerializable = true)]
        public int Priority
        {
            get
            {
                return _Priority;
            }
            set
            {
    
                if (_Priority != value)
                {
                          
                _Priority = value; 
               
           		}
    		}
     	}
    
     	private int _Priority;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryDesc",DTOPropertyName="CategoryDesc",IsRequired=true, IsSerializable = true)]
        public string CategoryDesc
        {
            get
            {
                return _CategoryDesc;
            }
            set
            {
    
                if (_CategoryDesc != value)
                {
                          
                _CategoryDesc = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryDesc;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SpreadCategoryDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SpreadCategoryDTO dto = srcDTO as SpreadCategoryDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SpreadType = dto.SpreadType;
    								
    				 this.SpreaderPercent = dto.SpreaderPercent;
    								
    				 this.Priority = dto.Priority;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.CategoryDesc = dto.CategoryDesc;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SpreadCategoryDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SpreadCategoryDTO();
                base.ToBEData(ref todto);
    			SpreadCategoryDTO dto = todto as SpreadCategoryDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SpreadType = this.SpreadType;
    								
    				 dto.SpreaderPercent = this.SpreaderPercent;
    								
    				 dto.Priority = this.Priority;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.CategoryDesc = this.CategoryDesc;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SpreadInfo",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SpreadInfoDTO))]
    public partial class SpreadInfo: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SpreadInfo ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadId",DTOPropertyName="SpreadId",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreadId
        {
            get
            {
                return _SpreadId;
            }
            set
            {
    
                if (_SpreadId != value)
                {
                          
                _SpreadId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreadId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadUrl",DTOPropertyName="SpreadUrl",IsRequired=true, IsSerializable = true)]
        public string SpreadUrl
        {
            get
            {
                return _SpreadUrl;
            }
            set
            {
    
                if (_SpreadUrl != value)
                {
                          
                _SpreadUrl = value; 
               
           		}
    		}
     	}
    
     	private string _SpreadUrl;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadCode",DTOPropertyName="SpreadCode",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreadCode
        {
            get
            {
                return _SpreadCode;
            }
            set
            {
    
                if (_SpreadCode != value)
                {
                          
                _SpreadCode = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreadCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadDesc",DTOPropertyName="SpreadDesc",IsRequired=false, IsSerializable = true)]
        public string SpreadDesc
        {
            get
            {
                return _SpreadDesc;
            }
            set
            {
    
                if (_SpreadDesc != value)
                {
                          
                _SpreadDesc = value; 
               
           		}
    		}
     	}
    
     	private string _SpreadDesc;
        
    
        /// <summary>
        /// 推广类型 0：推广主，1：电商馆，2：总代，3企业
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadType",DTOPropertyName="SpreadType",IsRequired=true, IsSerializable = true)]
        public int SpreadType
        {
            get
            {
                return _SpreadType;
            }
            set
            {
    
                if (_SpreadType != value)
                {
                          
                _SpreadType = value; 
               
           		}
    		}
     	}
    
     	private int _SpreadType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public int IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private int _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 所属馆AppId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="QrCodeUrl",DTOPropertyName="QrCodeUrl",IsRequired=true, IsSerializable = true)]
        public string QrCodeUrl
        {
            get
            {
                return _QrCodeUrl;
            }
            set
            {
    
                if (_QrCodeUrl != value)
                {
                          
                _QrCodeUrl = value; 
               
           		}
    		}
     	}
    
     	private string _QrCodeUrl;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadAppId",DTOPropertyName="SpreadAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreadAppId
        {
            get
            {
                return _SpreadAppId;
            }
            set
            {
    
                if (_SpreadAppId != value)
                {
                          
                _SpreadAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreadAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="HotshopId",DTOPropertyName="HotshopId",IsRequired=true, IsSerializable = true)]
        public System.Guid HotshopId
        {
            get
            {
                return _HotshopId;
            }
            set
            {
    
                if (_HotshopId != value)
                {
                          
                _HotshopId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _HotshopId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=true, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        
    
        /// <summary>
        /// 推广组织IW号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IWId",DTOPropertyName="IWId",IsRequired=true, IsSerializable = true)]
        public System.Guid IWId
        {
            get
            {
                return _IWId;
            }
            set
            {
    
                if (_IWId != value)
                {
                          
                _IWId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _IWId;
        
    
        /// <summary>
        /// 子代理数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubSpreadCount",DTOPropertyName="SubSpreadCount",IsRequired=true, IsSerializable = true)]
        public int SubSpreadCount
        {
            get
            {
                return _SubSpreadCount;
            }
            set
            {
    
                if (_SubSpreadCount != value)
                {
                          
                _SubSpreadCount = value; 
               
           		}
    		}
     	}
    
     	private int _SubSpreadCount = 0;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DividendPercent",DTOPropertyName="DividendPercent",IsRequired=true, IsSerializable = true)]
        public decimal DividendPercent
        {
            get
            {
                return _DividendPercent;
            }
            set
            {
    
                if (_DividendPercent != value)
                {
                          
                _DividendPercent = value; 
               
           		}
    		}
     	}
    
     	private decimal _DividendPercent = 0m;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IWCode",DTOPropertyName="IWCode",IsRequired=true, IsSerializable = true)]
        public string IWCode
        {
            get
            {
                return _IWCode;
            }
            set
            {
    
                if (_IWCode != value)
                {
                          
                _IWCode = value; 
               
           		}
    		}
     	}
    
     	private string _IWCode;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SpreadInfoDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SpreadInfoDTO dto = srcDTO as SpreadInfoDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SpreadId = dto.SpreadId;
    								
    				 this.SpreadUrl = dto.SpreadUrl;
    								
    				 this.SpreadCode = dto.SpreadCode;
    								
    				 this.SpreadDesc = dto.SpreadDesc;
    								
    				 this.SpreadType = dto.SpreadType;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.QrCodeUrl = dto.QrCodeUrl;
    								
    				 this.SpreadAppId = dto.SpreadAppId;
    								
    				 this.HotshopId = dto.HotshopId;
    								
    				 this.UserCode = dto.UserCode;
    								
    				 this.IWId = dto.IWId;
    								
    				 this.SubSpreadCount = dto.SubSpreadCount;
    								
    				 this.DividendPercent = dto.DividendPercent;
    								
    				 this.IWCode = dto.IWCode;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SpreadInfoDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SpreadInfoDTO();
                base.ToBEData(ref todto);
    			SpreadInfoDTO dto = todto as SpreadInfoDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SpreadId = this.SpreadId;
    								
    				 dto.SpreadUrl = this.SpreadUrl;
    								
    				 dto.SpreadCode = this.SpreadCode;
    								
    				 dto.SpreadDesc = this.SpreadDesc;
    								
    				 dto.SpreadType = this.SpreadType;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.QrCodeUrl = this.QrCodeUrl;
    								
    				 dto.SpreadAppId = this.SpreadAppId;
    								
    				 dto.HotshopId = this.HotshopId;
    								
    				 dto.UserCode = this.UserCode;
    								
    				 dto.IWId = this.IWId;
    								
    				 dto.SubSpreadCount = this.SubSpreadCount;
    								
    				 dto.DividendPercent = this.DividendPercent;
    								
    				 dto.IWCode = this.IWCode;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 门店
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Store",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.StoreDTO))]
    public partial class Store: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Store ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 提交时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 提交人ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 门店详细地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Address",DTOPropertyName="Address",IsRequired=true, IsSerializable = true)]
        public string Address
        {
            get
            {
                return _Address;
            }
            set
            {
    
                if (_Address != value)
                {
                          
                _Address = value; 
               
           		}
    		}
     	}
    
     	private string _Address;
        
    
        /// <summary>
        /// 门店电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Phone",DTOPropertyName="Phone",IsRequired=true, IsSerializable = true)]
        public string Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
    
                if (_Phone != value)
                {
                          
                _Phone = value; 
               
           		}
    		}
     	}
    
     	private string _Phone;
        
    
        /// <summary>
        /// 门店图片
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="picture",DTOPropertyName="picture",IsRequired=true, IsSerializable = true)]
        public string picture
        {
            get
            {
                return _picture;
            }
            set
            {
    
                if (_picture != value)
                {
                          
                _picture = value; 
               
           		}
    		}
     	}
    
     	private string _picture;
        
    
        /// <summary>
        /// 省
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Province",DTOPropertyName="Province",IsRequired=true, IsSerializable = true)]
        public string Province
        {
            get
            {
                return _Province;
            }
            set
            {
    
                if (_Province != value)
                {
                          
                _Province = value; 
               
           		}
    		}
     	}
    
     	private string _Province;
        
    
        /// <summary>
        /// 市
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="City",DTOPropertyName="City",IsRequired=true, IsSerializable = true)]
        public string City
        {
            get
            {
                return _City;
            }
            set
            {
    
                if (_City != value)
                {
                          
                _City = value; 
               
           		}
    		}
     	}
    
     	private string _City;
        
    
        /// <summary>
        /// 区
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="District",DTOPropertyName="District",IsRequired=false, IsSerializable = true)]
        public string District
        {
            get
            {
                return _District;
            }
            set
            {
    
                if (_District != value)
                {
                          
                _District = value; 
               
           		}
    		}
     	}
    
     	private string _District;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 省份CODE
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ProvinceCode",DTOPropertyName="ProvinceCode",IsRequired=false, IsSerializable = true)]
        public string ProvinceCode
        {
            get
            {
                return _ProvinceCode;
            }
            set
            {
    
                if (_ProvinceCode != value)
                {
                          
                _ProvinceCode = value; 
               
           		}
    		}
     	}
    
     	private string _ProvinceCode;
        
    
        /// <summary>
        /// 城市CODE
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CityCode",DTOPropertyName="CityCode",IsRequired=false, IsSerializable = true)]
        public string CityCode
        {
            get
            {
                return _CityCode;
            }
            set
            {
    
                if (_CityCode != value)
                {
                          
                _CityCode = value; 
               
           		}
    		}
     	}
    
     	private string _CityCode;
        
    
        /// <summary>
        /// 县区CODE
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DistrictCode",DTOPropertyName="DistrictCode",IsRequired=false, IsSerializable = true)]
        public string DistrictCode
        {
            get
            {
                return _DistrictCode;
            }
            set
            {
    
                if (_DistrictCode != value)
                {
                          
                _DistrictCode = value; 
               
           		}
    		}
     	}
    
     	private string _DistrictCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 地理位置x坐标（经度）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="XAxis",DTOPropertyName="XAxis",IsRequired=true, IsSerializable = true)]
        public decimal XAxis
        {
            get
            {
                return _XAxis;
            }
            set
            {
    
                if (_XAxis != value)
                {
                          
                _XAxis = value; 
               
           		}
    		}
     	}
    
     	private decimal _XAxis = 0.0m;
        
    
        /// <summary>
        /// 地理位置y坐标(纬度)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YAxis",DTOPropertyName="YAxis",IsRequired=true, IsSerializable = true)]
        public decimal YAxis
        {
            get
            {
                return _YAxis;
            }
            set
            {
    
                if (_YAxis != value)
                {
                          
                _YAxis = value; 
               
           		}
    		}
     	}
    
     	private decimal _YAxis = 0.0m;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,StoreDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                StoreDTO dto = srcDTO as StoreDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Address = dto.Address;
    								
    				 this.Phone = dto.Phone;
    								
    				 this.picture = dto.picture;
    								
    				 this.Province = dto.Province;
    								
    				 this.City = dto.City;
    								
    				 this.District = dto.District;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.ProvinceCode = dto.ProvinceCode;
    								
    				 this.CityCode = dto.CityCode;
    								
    				 this.DistrictCode = dto.DistrictCode;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.XAxis = dto.XAxis;
    								
    				 this.YAxis = dto.YAxis;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，StoreDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new StoreDTO();
                base.ToBEData(ref todto);
    			StoreDTO dto = todto as StoreDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Address = this.Address;
    								
    				 dto.Phone = this.Phone;
    								
    				 dto.picture = this.picture;
    								
    				 dto.Province = this.Province;
    								
    				 dto.City = this.City;
    								
    				 dto.District = this.District;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.ProvinceCode = this.ProvinceCode;
    								
    				 dto.CityCode = this.CityCode;
    								
    				 dto.DistrictCode = this.DistrictCode;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.XAxis = this.XAxis;
    								
    				 dto.YAxis = this.YAxis;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 供应商从表(供统计使用)
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.Supplier",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SupplierDTO))]
    public partial class Supplier: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  Supplier ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 商城Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 应用ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 应用名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 供应商名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierName",DTOPropertyName="SupplierName",IsRequired=true, IsSerializable = true)]
        public string SupplierName
        {
            get
            {
                return _SupplierName;
            }
            set
            {
    
                if (_SupplierName != value)
                {
                          
                _SupplierName = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierName;
        
    
        /// <summary>
        /// 供应商编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierCode",DTOPropertyName="SupplierCode",IsRequired=true, IsSerializable = true)]
        public string SupplierCode
        {
            get
            {
                return _SupplierCode;
            }
            set
            {
    
                if (_SupplierCode != value)
                {
                          
                _SupplierCode = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierCode;
        
    
        /// <summary>
        /// 供应商类型（0-自营他配；1-第三方；2-自营自配）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierType",DTOPropertyName="SupplierType",IsRequired=true, IsSerializable = true)]
        public short SupplierType
        {
            get
            {
                return _SupplierType;
            }
            set
            {
    
                if (_SupplierType != value)
                {
                          
                _SupplierType = value; 
               
           		}
    		}
     	}
    
     	private short _SupplierType;
        
    
        /// <summary>
        /// 发货方类型（0-商家自选物流 1-京东发货）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipperType",DTOPropertyName="ShipperType",IsRequired=true, IsSerializable = true)]
        public short ShipperType
        {
            get
            {
                return _ShipperType;
            }
            set
            {
    
                if (_ShipperType != value)
                {
                          
                _ShipperType = value; 
               
           		}
    		}
     	}
    
     	private short _ShipperType;
        
    
        /// <summary>
        /// 主表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierMainId",DTOPropertyName="SupplierMainId",IsRequired=true, IsSerializable = true)]
        public System.Guid SupplierMainId
        {
            get
            {
                return _SupplierMainId;
            }
            set
            {
    
                if (_SupplierMainId != value)
                {
                          
                _SupplierMainId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SupplierMainId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SupplierDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SupplierDTO dto = srcDTO as SupplierDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.SupplierName = dto.SupplierName;
    								
    				 this.SupplierCode = dto.SupplierCode;
    								
    				 this.SupplierType = dto.SupplierType;
    								
    				 this.ShipperType = dto.ShipperType;
    								
    				 this.SupplierMainId = dto.SupplierMainId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SupplierDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SupplierDTO();
                base.ToBEData(ref todto);
    			SupplierDTO dto = todto as SupplierDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.SupplierName = this.SupplierName;
    								
    				 dto.SupplierCode = this.SupplierCode;
    								
    				 dto.SupplierType = this.SupplierType;
    								
    				 dto.ShipperType = this.ShipperType;
    								
    				 dto.SupplierMainId = this.SupplierMainId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 供应商主表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.SupplierMain",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.SupplierMainDTO))]
    public partial class SupplierMain: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  SupplierMain ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 商城Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 应用ID(多个使用“,”分割)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppIds",DTOPropertyName="AppIds",IsRequired=true, IsSerializable = true)]
        public string AppIds
        {
            get
            {
                return _AppIds;
            }
            set
            {
    
                if (_AppIds != value)
                {
                          
                _AppIds = value; 
               
           		}
    		}
     	}
    
     	private string _AppIds;
        
    
        /// <summary>
        /// 应用名称(多个使用“,”分割)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppNames",DTOPropertyName="AppNames",IsRequired=true, IsSerializable = true)]
        public string AppNames
        {
            get
            {
                return _AppNames;
            }
            set
            {
    
                if (_AppNames != value)
                {
                          
                _AppNames = value; 
               
           		}
    		}
     	}
    
     	private string _AppNames;
        
    
        /// <summary>
        /// 供应商名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierName",DTOPropertyName="SupplierName",IsRequired=true, IsSerializable = true)]
        public string SupplierName
        {
            get
            {
                return _SupplierName;
            }
            set
            {
    
                if (_SupplierName != value)
                {
                          
                _SupplierName = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierName;
        
    
        /// <summary>
        /// 供应商编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierCode",DTOPropertyName="SupplierCode",IsRequired=true, IsSerializable = true)]
        public string SupplierCode
        {
            get
            {
                return _SupplierCode;
            }
            set
            {
    
                if (_SupplierCode != value)
                {
                          
                _SupplierCode = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierCode;
        
    
        /// <summary>
        /// 供应商类型（0-自营他配；1-第三方；2-自营自配）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierType",DTOPropertyName="SupplierType",IsRequired=true, IsSerializable = true)]
        public short SupplierType
        {
            get
            {
                return _SupplierType;
            }
            set
            {
    
                if (_SupplierType != value)
                {
                          
                _SupplierType = value; 
               
           		}
    		}
     	}
    
     	private short _SupplierType;
        
    
        /// <summary>
        /// 发货方类型（0-商家自选物流 1-京东发货）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipperType",DTOPropertyName="ShipperType",IsRequired=true, IsSerializable = true)]
        public short ShipperType
        {
            get
            {
                return _ShipperType;
            }
            set
            {
    
                if (_ShipperType != value)
                {
                          
                _ShipperType = value; 
               
           		}
    		}
     	}
    
     	private short _ShipperType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,SupplierMainDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                SupplierMainDTO dto = srcDTO as SupplierMainDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.AppIds = dto.AppIds;
    								
    				 this.AppNames = dto.AppNames;
    								
    				 this.SupplierName = dto.SupplierName;
    								
    				 this.SupplierCode = dto.SupplierCode;
    								
    				 this.SupplierType = dto.SupplierType;
    								
    				 this.ShipperType = dto.ShipperType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，SupplierMainDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new SupplierMainDTO();
                base.ToBEData(ref todto);
    			SupplierMainDTO dto = todto as SupplierMainDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.AppIds = this.AppIds;
    								
    				 dto.AppNames = this.AppNames;
    								
    				 dto.SupplierName = this.SupplierName;
    								
    				 dto.SupplierCode = this.SupplierCode;
    								
    				 dto.SupplierType = this.SupplierType;
    								
    				 dto.ShipperType = this.ShipperType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 今日商品促销
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.TodayPromotion",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.TodayPromotionDTO))]
    public partial class TodayPromotion: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  TodayPromotion ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 促销Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PromotionId;
        
    
        /// <summary>
        /// 商品Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 折扣
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Intensity",DTOPropertyName="Intensity",IsRequired=true, IsSerializable = true)]
        public decimal Intensity
        {
            get
            {
                return _Intensity;
            }
            set
            {
    
                if (_Intensity != value)
                {
                          
                _Intensity = value; 
               
           		}
    		}
     	}
    
     	private decimal _Intensity;
        
    
        /// <summary>
        /// 开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StartTime",DTOPropertyName="StartTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
    
                if (_StartTime != value)
                {
                          
                _StartTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _StartTime;
        
    
        /// <summary>
        /// 结束时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EndTime;
        
    
        /// <summary>
        /// 优惠价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiscountPrice",DTOPropertyName="DiscountPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> DiscountPrice
        {
            get
            {
                return _DiscountPrice;
            }
            set
            {
    
                if (_DiscountPrice != value)
                {
                          
                _DiscountPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _DiscountPrice;
        
    
        /// <summary>
        /// 每人限购数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LimitBuyEach",DTOPropertyName="LimitBuyEach",IsRequired=false, IsSerializable = true)]
        public Nullable<int> LimitBuyEach
        {
            get
            {
                return _LimitBuyEach;
            }
            set
            {
    
                if (_LimitBuyEach != value)
                {
                          
                _LimitBuyEach = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _LimitBuyEach;
        
    
        /// <summary>
        /// 参加促销商品的总数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="LimitBuyTotal",DTOPropertyName="LimitBuyTotal",IsRequired=false, IsSerializable = true)]
        public Nullable<int> LimitBuyTotal
        {
            get
            {
                return _LimitBuyTotal;
            }
            set
            {
    
                if (_LimitBuyTotal != value)
                {
                          
                _LimitBuyTotal = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _LimitBuyTotal;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SurplusLimitBuyTotal",DTOPropertyName="SurplusLimitBuyTotal",IsRequired=false, IsSerializable = true)]
        public Nullable<int> SurplusLimitBuyTotal
        {
            get
            {
                return _SurplusLimitBuyTotal;
            }
            set
            {
    
                if (_SurplusLimitBuyTotal != value)
                {
                          
                _SurplusLimitBuyTotal = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _SurplusLimitBuyTotal;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 活动类型 0：普通活动，1：秒杀，2预售，3，拼团，5：预售(不用预约)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionType",DTOPropertyName="PromotionType",IsRequired=true, IsSerializable = true)]
        public int PromotionType
        {
            get
            {
                return _PromotionType;
            }
            set
            {
    
                if (_PromotionType != value)
                {
                          
                _PromotionType = value; 
               
           		}
    		}
     	}
    
     	private int _PromotionType;
        
    
        /// <summary>
        /// 活动来源Id(正品会Id)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ChannelId",DTOPropertyName="ChannelId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ChannelId
        {
            get
            {
                return _ChannelId;
            }
            set
            {
    
                if (_ChannelId != value)
                {
                          
                _ChannelId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ChannelId;
        
    
        /// <summary>
        /// 外部活动Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OutsideId",DTOPropertyName="OutsideId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> OutsideId
        {
            get
            {
                return _OutsideId;
            }
            set
            {
    
                if (_OutsideId != value)
                {
                          
                _OutsideId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _OutsideId;
        
    
        /// <summary>
        /// 预约、预售开始时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PresellStartTime",DTOPropertyName="PresellStartTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PresellStartTime
        {
            get
            {
                return _PresellStartTime;
            }
            set
            {
    
                if (_PresellStartTime != value)
                {
                          
                _PresellStartTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PresellStartTime;
        
    
        /// <summary>
        /// 预约、预售结束时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PresellEndTime",DTOPropertyName="PresellEndTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> PresellEndTime
        {
            get
            {
                return _PresellEndTime;
            }
            set
            {
    
                if (_PresellEndTime != value)
                {
                          
                _PresellEndTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _PresellEndTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 成团人数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GroupMinVolume",DTOPropertyName="GroupMinVolume",IsRequired=false, IsSerializable = true)]
        public Nullable<int> GroupMinVolume
        {
            get
            {
                return _GroupMinVolume;
            }
            set
            {
    
                if (_GroupMinVolume != value)
                {
                          
                _GroupMinVolume = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _GroupMinVolume;
        
    
        /// <summary>
        /// 超时时间单位(秒)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpireSecond",DTOPropertyName="ExpireSecond",IsRequired=false, IsSerializable = true)]
        public Nullable<int> ExpireSecond
        {
            get
            {
                return _ExpireSecond;
            }
            set
            {
    
                if (_ExpireSecond != value)
                {
                          
                _ExpireSecond = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _ExpireSecond;
        
    
        /// <summary>
        /// 活动描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpireSeconds",DTOPropertyName="ExpireSeconds",IsRequired=true, IsSerializable = true)]
        public long ExpireSeconds
        {
            get
            {
                return _ExpireSeconds;
            }
            set
            {
    
                if (_ExpireSeconds != value)
                {
                          
                _ExpireSeconds = value; 
               
           		}
    		}
     	}
    
     	private long _ExpireSeconds;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromtionLimitBuyTotal",DTOPropertyName="PromtionLimitBuyTotal",IsRequired=false, IsSerializable = true)]
        public Nullable<int> PromtionLimitBuyTotal
        {
            get
            {
                return _PromtionLimitBuyTotal;
            }
            set
            {
    
                if (_PromtionLimitBuyTotal != value)
                {
                          
                _PromtionLimitBuyTotal = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _PromtionLimitBuyTotal;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,TodayPromotionDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                TodayPromotionDTO dto = srcDTO as TodayPromotionDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.Intensity = dto.Intensity;
    								
    				 this.StartTime = dto.StartTime;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.DiscountPrice = dto.DiscountPrice;
    								
    				 this.LimitBuyEach = dto.LimitBuyEach;
    								
    				 this.LimitBuyTotal = dto.LimitBuyTotal;
    								
    				 this.SurplusLimitBuyTotal = dto.SurplusLimitBuyTotal;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.PromotionType = dto.PromotionType;
    								
    				 this.ChannelId = dto.ChannelId;
    								
    				 this.OutsideId = dto.OutsideId;
    								
    				 this.PresellStartTime = dto.PresellStartTime;
    								
    				 this.PresellEndTime = dto.PresellEndTime;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.GroupMinVolume = dto.GroupMinVolume;
    								
    				 this.ExpireSecond = dto.ExpireSecond;
    								
    				 this.Description = dto.Description;
    								
    				 this.ExpireSeconds = dto.ExpireSeconds;
    								
    				 this.PromtionLimitBuyTotal = dto.PromtionLimitBuyTotal;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，TodayPromotionDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new TodayPromotionDTO();
                base.ToBEData(ref todto);
    			TodayPromotionDTO dto = todto as TodayPromotionDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.Intensity = this.Intensity;
    								
    				 dto.StartTime = this.StartTime;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.DiscountPrice = this.DiscountPrice;
    								
    				 dto.LimitBuyEach = this.LimitBuyEach;
    								
    				 dto.LimitBuyTotal = this.LimitBuyTotal;
    								
    				 dto.SurplusLimitBuyTotal = this.SurplusLimitBuyTotal;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.PromotionType = this.PromotionType;
    								
    				 dto.ChannelId = this.ChannelId;
    								
    				 dto.OutsideId = this.OutsideId;
    								
    				 dto.PresellStartTime = this.PresellStartTime;
    								
    				 dto.PresellEndTime = this.PresellEndTime;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.GroupMinVolume = this.GroupMinVolume;
    								
    				 dto.ExpireSecond = this.ExpireSecond;
    								
    				 dto.Description = this.Description;
    								
    				 dto.ExpireSeconds = this.ExpireSeconds;
    								
    				 dto.PromtionLimitBuyTotal = this.PromtionLimitBuyTotal;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 进销存-海信系统需要的10位用户编码
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.UserCodeForHaiXin",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.UserCodeForHaiXinDTO))]
    public partial class UserCodeForHaiXin: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  UserCodeForHaiXin ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 10位用户编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=true, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,UserCodeForHaiXinDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                UserCodeForHaiXinDTO dto = srcDTO as UserCodeForHaiXinDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UserCode = dto.UserCode;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，UserCodeForHaiXinDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new UserCodeForHaiXinDTO();
                base.ToBEData(ref todto);
    			UserCodeForHaiXinDTO dto = todto as UserCodeForHaiXinDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UserCode = this.UserCode;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹股东表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.UserCrowdfunding",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.UserCrowdfundingDTO))]
    public partial class UserCrowdfunding: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  UserCrowdfunding ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 用户姓名
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=false, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 用户账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserCode",DTOPropertyName="UserCode",IsRequired=false, IsSerializable = true)]
        public string UserCode
        {
            get
            {
                return _UserCode;
            }
            set
            {
    
                if (_UserCode != value)
                {
                          
                _UserCode = value; 
               
           		}
    		}
     	}
    
     	private string _UserCode;
        
    
        /// <summary>
        /// 众筹表Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CrowdfundingId",DTOPropertyName="CrowdfundingId",IsRequired=true, IsSerializable = true)]
        public System.Guid CrowdfundingId
        {
            get
            {
                return _CrowdfundingId;
            }
            set
            {
    
                if (_CrowdfundingId != value)
                {
                          
                _CrowdfundingId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CrowdfundingId;
        
    
        /// <summary>
        /// 本活动总购买金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Money",DTOPropertyName="Money",IsRequired=true, IsSerializable = true)]
        public decimal Money
        {
            get
            {
                return _Money;
            }
            set
            {
    
                if (_Money != value)
                {
                          
                _Money = value; 
               
           		}
    		}
     	}
    
     	private decimal _Money;
        
    
        /// <summary>
        /// 本活动总订单数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCount",DTOPropertyName="OrderCount",IsRequired=true, IsSerializable = true)]
        public int OrderCount
        {
            get
            {
                return _OrderCount;
            }
            set
            {
    
                if (_OrderCount != value)
                {
                          
                _OrderCount = value; 
               
           		}
    		}
     	}
    
     	private int _OrderCount;
        
    
        /// <summary>
        /// 已获得股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CurrentShareCount",DTOPropertyName="CurrentShareCount",IsRequired=true, IsSerializable = true)]
        public long CurrentShareCount
        {
            get
            {
                return _CurrentShareCount;
            }
            set
            {
    
                if (_CurrentShareCount != value)
                {
                          
                _CurrentShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _CurrentShareCount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 应得分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TotalDividend",DTOPropertyName="TotalDividend",IsRequired=true, IsSerializable = true)]
        public long TotalDividend
        {
            get
            {
                return _TotalDividend;
            }
            set
            {
    
                if (_TotalDividend != value)
                {
                          
                _TotalDividend = value; 
               
           		}
    		}
     	}
    
     	private long _TotalDividend;
        
    
        /// <summary>
        /// 已领分红
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RealGetDividend",DTOPropertyName="RealGetDividend",IsRequired=true, IsSerializable = true)]
        public long RealGetDividend
        {
            get
            {
                return _RealGetDividend;
            }
            set
            {
    
                if (_RealGetDividend != value)
                {
                          
                _RealGetDividend = value; 
               
           		}
    		}
     	}
    
     	private long _RealGetDividend;
        
    
        /// <summary>
        /// 参与众筹后消费总金额（包括众筹成功的金额）
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrdersMoney",DTOPropertyName="OrdersMoney",IsRequired=true, IsSerializable = true)]
        public decimal OrdersMoney
        {
            get
            {
                return _OrdersMoney;
            }
            set
            {
    
                if (_OrdersMoney != value)
                {
                          
                _OrdersMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _OrdersMoney;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,UserCrowdfundingDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                UserCrowdfundingDTO dto = srcDTO as UserCrowdfundingDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.UserCode = dto.UserCode;
    								
    				 this.CrowdfundingId = dto.CrowdfundingId;
    								
    				 this.Money = dto.Money;
    								
    				 this.OrderCount = dto.OrderCount;
    								
    				 this.CurrentShareCount = dto.CurrentShareCount;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.TotalDividend = dto.TotalDividend;
    								
    				 this.RealGetDividend = dto.RealGetDividend;
    								
    				 this.OrdersMoney = dto.OrdersMoney;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，UserCrowdfundingDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new UserCrowdfundingDTO();
                base.ToBEData(ref todto);
    			UserCrowdfundingDTO dto = todto as UserCrowdfundingDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.UserCode = this.UserCode;
    								
    				 dto.CrowdfundingId = this.CrowdfundingId;
    								
    				 dto.Money = this.Money;
    								
    				 dto.OrderCount = this.OrderCount;
    								
    				 dto.CurrentShareCount = this.CurrentShareCount;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.TotalDividend = this.TotalDividend;
    								
    				 dto.RealGetDividend = this.RealGetDividend;
    								
    				 dto.OrdersMoney = this.OrdersMoney;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 众筹股东每日统计
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.UserCrowdfundingDaily",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.UserCrowdfundingDailyDTO))]
    public partial class UserCrowdfundingDaily: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  UserCrowdfundingDaily ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 当前已募得股数
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShareCount",DTOPropertyName="ShareCount",IsRequired=true, IsSerializable = true)]
        public long ShareCount
        {
            get
            {
                return _ShareCount;
            }
            set
            {
    
                if (_ShareCount != value)
                {
                          
                _ShareCount = value; 
               
           		}
    		}
     	}
    
     	private long _ShareCount;
        
    
        /// <summary>
        /// 截止时间点总消费金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Money",DTOPropertyName="Money",IsRequired=true, IsSerializable = true)]
        public decimal Money
        {
            get
            {
                return _Money;
            }
            set
            {
    
                if (_Money != value)
                {
                          
                _Money = value; 
               
           		}
    		}
     	}
    
     	private decimal _Money;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DailyMoney",DTOPropertyName="DailyMoney",IsRequired=true, IsSerializable = true)]
        public decimal DailyMoney
        {
            get
            {
                return _DailyMoney;
            }
            set
            {
    
                if (_DailyMoney != value)
                {
                          
                _DailyMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _DailyMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SettlementDate",DTOPropertyName="SettlementDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime SettlementDate
        {
            get
            {
                return _SettlementDate;
            }
            set
            {
    
                if (_SettlementDate != value)
                {
                          
                _SettlementDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SettlementDate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,UserCrowdfundingDailyDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                UserCrowdfundingDailyDTO dto = srcDTO as UserCrowdfundingDailyDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.ShareCount = dto.ShareCount;
    								
    				 this.Money = dto.Money;
    								
    				 this.DailyMoney = dto.DailyMoney;
    								
    				 this.SettlementDate = dto.SettlementDate;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，UserCrowdfundingDailyDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new UserCrowdfundingDailyDTO();
                base.ToBEData(ref todto);
    			UserCrowdfundingDailyDTO dto = todto as UserCrowdfundingDailyDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.ShareCount = this.ShareCount;
    								
    				 dto.Money = this.Money;
    								
    				 dto.DailyMoney = this.DailyMoney;
    								
    				 dto.SettlementDate = this.SettlementDate;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.UserLimited",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.UserLimitedDTO))]
    public partial class UserLimited: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  UserLimited ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 用户ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 促销ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PromotionId",DTOPropertyName="PromotionId",IsRequired=true, IsSerializable = true)]
        public System.Guid PromotionId
        {
            get
            {
                return _PromotionId;
            }
            set
            {
    
                if (_PromotionId != value)
                {
                          
                _PromotionId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _PromotionId;
        
    
        /// <summary>
        /// 商品ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 购买数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Count",DTOPropertyName="Count",IsRequired=true, IsSerializable = true)]
        public int Count
        {
            get
            {
                return _Count;
            }
            set
            {
    
                if (_Count != value)
                {
                          
                _Count = value; 
               
           		}
    		}
     	}
    
     	private int _Count;
        
    
        /// <summary>
        /// 创建时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CreateTime",DTOPropertyName="CreateTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
    
                if (_CreateTime != value)
                {
                          
                _CreateTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _CreateTime;
        
    
        /// <summary>
        /// 订单ID
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityOrderId",DTOPropertyName="CommodityOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityOrderId
        {
            get
            {
                return _CommodityOrderId;
            }
            set
            {
    
                if (_CommodityOrderId != value)
                {
                          
                _CommodityOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityOrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,UserLimitedDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                UserLimitedDTO dto = srcDTO as UserLimitedDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.PromotionId = dto.PromotionId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.Count = dto.Count;
    								
    				 this.CreateTime = dto.CreateTime;
    								
    				 this.CommodityOrderId = dto.CommodityOrderId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，UserLimitedDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new UserLimitedDTO();
                base.ToBEData(ref todto);
    			UserLimitedDTO dto = todto as UserLimitedDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.PromotionId = this.PromotionId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.Count = this.Count;
    								
    				 dto.CreateTime = this.CreateTime;
    								
    				 dto.CommodityOrderId = this.CommodityOrderId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.UserRedEnvelope",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.UserRedEnvelopeDTO))]
    public partial class UserRedEnvelope: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  UserRedEnvelope ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 0:生成红包，1：已领取,2:回收给金和
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="State",DTOPropertyName="State",IsRequired=true, IsSerializable = true)]
        public int State
        {
            get
            {
                return _State;
            }
            set
            {
    
                if (_State != value)
                {
                          
                _State = value; 
               
           		}
    		}
     	}
    
     	private int _State;
        
    
        /// <summary>
        /// 过期日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DueDate",DTOPropertyName="DueDate",IsRequired=true, IsSerializable = true)]
        public System.DateTime DueDate
        {
            get
            {
                return _DueDate;
            }
            set
            {
    
                if (_DueDate != value)
                {
                          
                _DueDate = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _DueDate;
        
    
        /// <summary>
        /// 获得众销红包金币XXX个！
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=true, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="GoldCount",DTOPropertyName="GoldCount",IsRequired=true, IsSerializable = true)]
        public long GoldCount
        {
            get
            {
                return _GoldCount;
            }
            set
            {
    
                if (_GoldCount != value)
                {
                          
                _GoldCount = value; 
               
           		}
    		}
     	}
    
     	private long _GoldCount;
        
    
        /// <summary>
        /// 具体信息：以逗号隔开
        /// </summary>
        /// <LongDescription>
        /// 分享XXXXXX商品获得金币XX个！，分享XXXXXX商品获得金币XX个！
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=true, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 
        /// </summary>
        /// <LongDescription>
        /// 只记录其中1个
        /// </LongDescription> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 0：众销红包，1：众筹红包
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RedEnvelopeType",DTOPropertyName="RedEnvelopeType",IsRequired=true, IsSerializable = true)]
        public int RedEnvelopeType
        {
            get
            {
                return _RedEnvelopeType;
            }
            set
            {
    
                if (_RedEnvelopeType != value)
                {
                          
                _RedEnvelopeType = value; 
               
           		}
    		}
     	}
    
     	private int _RedEnvelopeType;
        
    
        /// <summary>
        /// 得红包的角色类型：1：分享者，2：应用主为组织
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RoleType",DTOPropertyName="RoleType",IsRequired=true, IsSerializable = true)]
        public int RoleType
        {
            get
            {
                return _RoleType;
            }
            set
            {
    
                if (_RoleType != value)
                {
                          
                _RoleType = value; 
               
           		}
    		}
     	}
    
     	private int _RoleType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,UserRedEnvelopeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                UserRedEnvelopeDTO dto = srcDTO as UserRedEnvelopeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.State = dto.State;
    								
    				 this.DueDate = dto.DueDate;
    								
    				 this.Content = dto.Content;
    								
    				 this.GoldCount = dto.GoldCount;
    								
    				 this.Description = dto.Description;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.RedEnvelopeType = dto.RedEnvelopeType;
    								
    				 this.RoleType = dto.RoleType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，UserRedEnvelopeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new UserRedEnvelopeDTO();
                base.ToBEData(ref todto);
    			UserRedEnvelopeDTO dto = todto as UserRedEnvelopeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.State = this.State;
    								
    				 dto.DueDate = this.DueDate;
    								
    				 dto.Content = this.Content;
    								
    				 dto.GoldCount = this.GoldCount;
    								
    				 dto.Description = this.Description;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.RedEnvelopeType = this.RedEnvelopeType;
    								
    				 dto.RoleType = this.RoleType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 买家分享者对照表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.UserSpreader",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.UserSpreaderDTO))]
    public partial class UserSpreader: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  UserSpreader ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 买家Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 推广者Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreaderId",DTOPropertyName="SpreaderId",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreaderId
        {
            get
            {
                return _SpreaderId;
            }
            set
            {
    
                if (_SpreaderId != value)
                {
                          
                _SpreaderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreaderId;
        
    
        /// <summary>
        /// 推广码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadCode",DTOPropertyName="SpreadCode",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreadCode
        {
            get
            {
                return _SpreadCode;
            }
            set
            {
    
                if (_SpreadCode != value)
                {
                          
                _SpreadCode = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreadCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public bool IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private bool _IsDel;
        
    
        /// <summary>
        /// 初始订单
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CreateOrderId",DTOPropertyName="CreateOrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid CreateOrderId
        {
            get
            {
                return _CreateOrderId;
            }
            set
            {
    
                if (_CreateOrderId != value)
                {
                          
                _CreateOrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CreateOrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 微信OpenId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WxOpenId",DTOPropertyName="WxOpenId",IsRequired=false, IsSerializable = true)]
        public string WxOpenId
        {
            get
            {
                return _WxOpenId;
            }
            set
            {
    
                if (_WxOpenId != value)
                {
                          
                _WxOpenId = value; 
               
           		}
    		}
     	}
    
     	private string _WxOpenId;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,UserSpreaderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                UserSpreaderDTO dto = srcDTO as UserSpreaderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.SpreaderId = dto.SpreaderId;
    								
    				 this.SpreadCode = dto.SpreadCode;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.CreateOrderId = dto.CreateOrderId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.WxOpenId = dto.WxOpenId;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，UserSpreaderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new UserSpreaderDTO();
                base.ToBEData(ref todto);
    			UserSpreaderDTO dto = todto as UserSpreaderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.SpreaderId = this.SpreaderId;
    								
    				 dto.SpreadCode = this.SpreadCode;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.CreateOrderId = this.CreateOrderId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.WxOpenId = this.WxOpenId;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 用户增值税发票资质
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.VatInvoiceProof",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.VatInvoiceProofDTO))]
    public partial class VatInvoiceProof: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  VatInvoiceProof ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 单位名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CompanyName",DTOPropertyName="CompanyName",IsRequired=true, IsSerializable = true)]
        public string CompanyName
        {
            get
            {
                return _CompanyName;
            }
            set
            {
    
                if (_CompanyName != value)
                {
                          
                _CompanyName = value; 
               
           		}
    		}
     	}
    
     	private string _CompanyName;
        
    
        /// <summary>
        /// 纳税人识别码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IdentifyNo",DTOPropertyName="IdentifyNo",IsRequired=true, IsSerializable = true)]
        public string IdentifyNo
        {
            get
            {
                return _IdentifyNo;
            }
            set
            {
    
                if (_IdentifyNo != value)
                {
                          
                _IdentifyNo = value; 
               
           		}
    		}
     	}
    
     	private string _IdentifyNo;
        
    
        /// <summary>
        /// 注册地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Address",DTOPropertyName="Address",IsRequired=true, IsSerializable = true)]
        public string Address
        {
            get
            {
                return _Address;
            }
            set
            {
    
                if (_Address != value)
                {
                          
                _Address = value; 
               
           		}
    		}
     	}
    
     	private string _Address;
        
    
        /// <summary>
        /// 注册电话
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Phone",DTOPropertyName="Phone",IsRequired=true, IsSerializable = true)]
        public string Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
    
                if (_Phone != value)
                {
                          
                _Phone = value; 
               
           		}
    		}
     	}
    
     	private string _Phone;
        
    
        /// <summary>
        /// 开户银行
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BankName",DTOPropertyName="BankName",IsRequired=true, IsSerializable = true)]
        public string BankName
        {
            get
            {
                return _BankName;
            }
            set
            {
    
                if (_BankName != value)
                {
                          
                _BankName = value; 
               
           		}
    		}
     	}
    
     	private string _BankName;
        
    
        /// <summary>
        /// 银行账户
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BankCode",DTOPropertyName="BankCode",IsRequired=true, IsSerializable = true)]
        public string BankCode
        {
            get
            {
                return _BankCode;
            }
            set
            {
    
                if (_BankCode != value)
                {
                          
                _BankCode = value; 
               
           		}
    		}
     	}
    
     	private string _BankCode;
        
    
        /// <summary>
        /// 营业执照复印件地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="BusinessLicence",DTOPropertyName="BusinessLicence",IsRequired=true, IsSerializable = true)]
        public string BusinessLicence
        {
            get
            {
                return _BusinessLicence;
            }
            set
            {
    
                if (_BusinessLicence != value)
                {
                          
                _BusinessLicence = value; 
               
           		}
    		}
     	}
    
     	private string _BusinessLicence;
        
    
        /// <summary>
        /// 税务登记复印件地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRegistration",DTOPropertyName="TaxRegistration",IsRequired=true, IsSerializable = true)]
        public string TaxRegistration
        {
            get
            {
                return _TaxRegistration;
            }
            set
            {
    
                if (_TaxRegistration != value)
                {
                          
                _TaxRegistration = value; 
               
           		}
    		}
     	}
    
     	private string _TaxRegistration;
        
    
        /// <summary>
        /// 一般纳税人资格认证复印件地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PersonalProof",DTOPropertyName="PersonalProof",IsRequired=true, IsSerializable = true)]
        public string PersonalProof
        {
            get
            {
                return _PersonalProof;
            }
            set
            {
    
                if (_PersonalProof != value)
                {
                          
                _PersonalProof = value; 
               
           		}
    		}
     	}
    
     	private string _PersonalProof;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,VatInvoiceProofDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                VatInvoiceProofDTO dto = srcDTO as VatInvoiceProofDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.CompanyName = dto.CompanyName;
    								
    				 this.IdentifyNo = dto.IdentifyNo;
    								
    				 this.Address = dto.Address;
    								
    				 this.Phone = dto.Phone;
    								
    				 this.BankName = dto.BankName;
    								
    				 this.BankCode = dto.BankCode;
    								
    				 this.BusinessLicence = dto.BusinessLicence;
    								
    				 this.TaxRegistration = dto.TaxRegistration;
    								
    				 this.PersonalProof = dto.PersonalProof;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，VatInvoiceProofDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new VatInvoiceProofDTO();
                base.ToBEData(ref todto);
    			VatInvoiceProofDTO dto = todto as VatInvoiceProofDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.CompanyName = this.CompanyName;
    								
    				 dto.IdentifyNo = this.IdentifyNo;
    								
    				 dto.Address = this.Address;
    								
    				 dto.Phone = this.Phone;
    								
    				 dto.BankName = this.BankName;
    								
    				 dto.BankCode = this.BankCode;
    								
    				 dto.BusinessLicence = this.BusinessLicence;
    								
    				 dto.TaxRegistration = this.TaxRegistration;
    								
    				 dto.PersonalProof = this.PersonalProof;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.WeChatQRCode",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.WeChatQRCodeDTO))]
    public partial class WeChatQRCode: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  WeChatQRCode ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 公众号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WeChatPublicCode",DTOPropertyName="WeChatPublicCode",IsRequired=true, IsSerializable = true)]
        public string WeChatPublicCode
        {
            get
            {
                return _WeChatPublicCode;
            }
            set
            {
    
                if (_WeChatPublicCode != value)
                {
                          
                _WeChatPublicCode = value; 
               
           		}
    		}
     	}
    
     	private string _WeChatPublicCode;
        
    
        /// <summary>
        /// 公众号AppId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WeChatAppId",DTOPropertyName="WeChatAppId",IsRequired=true, IsSerializable = true)]
        public string WeChatAppId
        {
            get
            {
                return _WeChatAppId;
            }
            set
            {
    
                if (_WeChatAppId != value)
                {
                          
                _WeChatAppId = value; 
               
           		}
    		}
     	}
    
     	private string _WeChatAppId;
        
    
        /// <summary>
        /// 公众号密钥
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WeChatSecret",DTOPropertyName="WeChatSecret",IsRequired=true, IsSerializable = true)]
        public string WeChatSecret
        {
            get
            {
                return _WeChatSecret;
            }
            set
            {
    
                if (_WeChatSecret != value)
                {
                          
                _WeChatSecret = value; 
               
           		}
    		}
     	}
    
     	private string _WeChatSecret;
        
    
        /// <summary>
        /// 应用Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 二维码序号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="QRNo",DTOPropertyName="QRNo",IsRequired=true, IsSerializable = true)]
        public int QRNo
        {
            get
            {
                return _QRNo;
            }
            set
            {
    
                if (_QRNo != value)
                {
                          
                _QRNo = value; 
               
           		}
    		}
     	}
    
     	private int _QRNo;
        
    
        /// <summary>
        /// 获取到的Ticket
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="WeChatTicket",DTOPropertyName="WeChatTicket",IsRequired=true, IsSerializable = true)]
        public string WeChatTicket
        {
            get
            {
                return _WeChatTicket;
            }
            set
            {
    
                if (_WeChatTicket != value)
                {
                          
                _WeChatTicket = value; 
               
           		}
    		}
     	}
    
     	private string _WeChatTicket;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _ModifiedOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StoreId",DTOPropertyName="StoreId",IsRequired=true, IsSerializable = true)]
        public System.Guid StoreId
        {
            get
            {
                return _StoreId;
            }
            set
            {
    
                if (_StoreId != value)
                {
                          
                _StoreId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _StoreId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public int IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private int _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsUse",DTOPropertyName="IsUse",IsRequired=true, IsSerializable = true)]
        public bool IsUse
        {
            get
            {
                return _IsUse;
            }
            set
            {
    
                if (_IsUse != value)
                {
                          
                _IsUse = value; 
               
           		}
    		}
     	}
    
     	private bool _IsUse;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SpreadInfoId",DTOPropertyName="SpreadInfoId",IsRequired=true, IsSerializable = true)]
        public System.Guid SpreadInfoId
        {
            get
            {
                return _SpreadInfoId;
            }
            set
            {
    
                if (_SpreadInfoId != value)
                {
                          
                _SpreadInfoId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SpreadInfoId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        

        #endregion
        #region 复杂类型属性
    
        /// <summary>
        /// 二维码类型[门店、桌号、服务员]
        /// </summary> 
    	//[JHBEProperty(DisplayNameResKey="QRType",DTOPropertyName="QRType",IsRequired=true, IsSerializable = true)]
        public QRTypeVO QRType
        {
            get
            {   
    			if (   _QRType == null)
                 {
    			    _QRType = new QRTypeVO(); 
                 }       
                return _QRType;
            }
            set
            {                 
                _QRType = value;                  
            }
        }
        private QRTypeVO _QRType = null;   
    
     
        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,WeChatQRCodeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                WeChatQRCodeDTO dto = srcDTO as WeChatQRCodeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.WeChatPublicCode = dto.WeChatPublicCode;
    								
    				 this.WeChatAppId = dto.WeChatAppId;
    								
    				 this.WeChatSecret = dto.WeChatSecret;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.QRNo = dto.QRNo;
    								
    				 this.QRType = dto.QRType;
    								
    				 this.WeChatTicket = dto.WeChatTicket;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.StoreId = dto.StoreId;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.IsUse = dto.IsUse;
    								
    				 this.SpreadInfoId = dto.SpreadInfoId;
    								
    				 this.Description = dto.Description;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，WeChatQRCodeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new WeChatQRCodeDTO();
                base.ToBEData(ref todto);
    			WeChatQRCodeDTO dto = todto as WeChatQRCodeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.WeChatPublicCode = this.WeChatPublicCode;
    								
    				 dto.WeChatAppId = this.WeChatAppId;
    								
    				 dto.WeChatSecret = this.WeChatSecret;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.QRNo = this.QRNo;
    								
    				 dto.QRType = this.QRType;
    								
    				 dto.WeChatTicket = this.WeChatTicket;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.ModifiedOn = this.ModifiedOn;
    								
    				 dto.StoreId = this.StoreId;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.IsUse = this.IsUse;
    								
    				 dto.SpreadInfoId = this.SpreadInfoId;
    								
    				 dto.Description = this.Description;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.WeChatQrCodeType",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.WeChatQrCodeTypeDTO))]
    public partial class WeChatQrCodeType: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  WeChatQrCodeType ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 类型
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Type",DTOPropertyName="Type",IsRequired=true, IsSerializable = true)]
        public int Type
        {
            get
            {
                return _Type;
            }
            set
            {
    
                if (_Type != value)
                {
                          
                _Type = value; 
               
           		}
    		}
     	}
    
     	private int _Type;
        
    
        /// <summary>
        /// 描述
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Description",DTOPropertyName="Description",IsRequired=false, IsSerializable = true)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
    
                if (_Description != value)
                {
                          
                _Description = value; 
               
           		}
    		}
     	}
    
     	private string _Description;
        
    
        /// <summary>
        /// 使用范围:-0公共,1餐饮
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UseTye",DTOPropertyName="UseTye",IsRequired=true, IsSerializable = true)]
        public int UseTye
        {
            get
            {
                return _UseTye;
            }
            set
            {
    
                if (_UseTye != value)
                {
                          
                _UseTye = value; 
               
           		}
    		}
     	}
    
     	private int _UseTye;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,WeChatQrCodeTypeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                WeChatQrCodeTypeDTO dto = srcDTO as WeChatQrCodeTypeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Type = dto.Type;
    								
    				 this.Description = dto.Description;
    								
    				 this.UseTye = dto.UseTye;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，WeChatQrCodeTypeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new WeChatQrCodeTypeDTO();
                base.ToBEData(ref todto);
    			WeChatQrCodeTypeDTO dto = todto as WeChatQrCodeTypeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Type = this.Type;
    								
    				 dto.Description = this.Description;
    								
    				 dto.UseTye = this.UseTye;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YJBJCard",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YJBJCardDTO))]
    public partial class YJBJCard: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YJBJCard ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// (盈科字段）卡名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CardName",DTOPropertyName="CardName",IsRequired=true, IsSerializable = true)]
        public string CardName
        {
            get
            {
                return _CardName;
            }
            set
            {
    
                if (_CardName != value)
                {
                          
                _CardName = value; 
               
           		}
    		}
     	}
    
     	private string _CardName;
        
    
        /// <summary>
        /// (盈科字段）卡号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CardNo",DTOPropertyName="CardNo",IsRequired=true, IsSerializable = true)]
        public string CardNo
        {
            get
            {
                return _CardNo;
            }
            set
            {
    
                if (_CardNo != value)
                {
                          
                _CardNo = value; 
               
           		}
    		}
     	}
    
     	private string _CardNo;
        
    
        /// <summary>
        /// (盈科字段）密码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CheckCode",DTOPropertyName="CheckCode",IsRequired=true, IsSerializable = true)]
        public string CheckCode
        {
            get
            {
                return _CheckCode;
            }
            set
            {
    
                if (_CheckCode != value)
                {
                          
                _CheckCode = value; 
               
           		}
    		}
     	}
    
     	private string _CheckCode;
        
    
        /// <summary>
        /// (盈科字段）截止日期
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EndTime",DTOPropertyName="EndTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
    
                if (_EndTime != value)
                {
                          
                _EndTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _EndTime;
        
    
        /// <summary>
        /// (盈科字段）卡详情页面地址
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponUrl",DTOPropertyName="CouponUrl",IsRequired=true, IsSerializable = true)]
        public string CouponUrl
        {
            get
            {
                return _CouponUrl;
            }
            set
            {
    
                if (_CouponUrl != value)
                {
                          
                _CouponUrl = value; 
               
           		}
    		}
     	}
    
     	private string _CouponUrl;
        
    
        /// <summary>
        /// 0盈科接口调用失败；1盈科接口返回错误信息；2盈科接口成功
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Status",DTOPropertyName="Status",IsRequired=true, IsSerializable = true)]
        public int Status
        {
            get
            {
                return _Status;
            }
            set
            {
    
                if (_Status != value)
                {
                          
                _Status = value; 
               
           		}
    		}
     	}
    
     	private int _Status;
        
    
        /// <summary>
        /// 盈科接口不成功相关信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YJBJCardDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YJBJCardDTO dto = srcDTO as YJBJCardDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CardName = dto.CardName;
    								
    				 this.CardNo = dto.CardNo;
    								
    				 this.CheckCode = dto.CheckCode;
    								
    				 this.EndTime = dto.EndTime;
    								
    				 this.CouponUrl = dto.CouponUrl;
    								
    				 this.Status = dto.Status;
    								
    				 this.SubTime = dto.SubTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YJBJCardDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YJBJCardDTO();
                base.ToBEData(ref todto);
    			YJBJCardDTO dto = todto as YJBJCardDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CardName = this.CardName;
    								
    				 dto.CardNo = this.CardNo;
    								
    				 dto.CheckCode = this.CheckCode;
    								
    				 dto.EndTime = this.EndTime;
    								
    				 dto.CouponUrl = this.CouponUrl;
    								
    				 dto.Status = this.Status;
    								
    				 dto.SubTime = this.SubTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YJBJOrderItem",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YJBJOrderItemDTO))]
    public partial class YJBJOrderItem: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YJBJOrderItem ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Number",DTOPropertyName="Number",IsRequired=true, IsSerializable = true)]
        public int Number
        {
            get
            {
                return _Number;
            }
            set
            {
    
                if (_Number != value)
                {
                          
                _Number = value; 
               
           		}
    		}
     	}
    
     	private int _Number;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RealPrice",DTOPropertyName="RealPrice",IsRequired=true, IsSerializable = true)]
        public decimal RealPrice
        {
            get
            {
                return _RealPrice;
            }
            set
            {
    
                if (_RealPrice != value)
                {
                          
                _RealPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _RealPrice;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShouldMoney",DTOPropertyName="ShouldMoney",IsRequired=true, IsSerializable = true)]
        public decimal ShouldMoney
        {
            get
            {
                return _ShouldMoney;
            }
            set
            {
    
                if (_ShouldMoney != value)
                {
                          
                _ShouldMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _ShouldMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="DiscountMoney",DTOPropertyName="DiscountMoney",IsRequired=true, IsSerializable = true)]
        public decimal DiscountMoney
        {
            get
            {
                return _DiscountMoney;
            }
            set
            {
    
                if (_DiscountMoney != value)
                {
                          
                _DiscountMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _DiscountMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayMoney",DTOPropertyName="PayMoney",IsRequired=true, IsSerializable = true)]
        public decimal PayMoney
        {
            get
            {
                return _PayMoney;
            }
            set
            {
    
                if (_PayMoney != value)
                {
                          
                _PayMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _PayMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxMoney",DTOPropertyName="TaxMoney",IsRequired=true, IsSerializable = true)]
        public decimal TaxMoney
        {
            get
            {
                return _TaxMoney;
            }
            set
            {
    
                if (_TaxMoney != value)
                {
                          
                _TaxMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _TaxMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundMoney",DTOPropertyName="RefundMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundMoney
        {
            get
            {
                return _RefundMoney;
            }
            set
            {
    
                if (_RefundMoney != value)
                {
                          
                _RefundMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityName",DTOPropertyName="CommodityName",IsRequired=true, IsSerializable = true)]
        public string CommodityName
        {
            get
            {
                return _CommodityName;
            }
            set
            {
    
                if (_CommodityName != value)
                {
                          
                _CommodityName = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CategoryName",DTOPropertyName="CategoryName",IsRequired=true, IsSerializable = true)]
        public string CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
    
                if (_CategoryName != value)
                {
                          
                _CategoryName = value; 
               
           		}
    		}
     	}
    
     	private string _CategoryName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TaxRate",DTOPropertyName="TaxRate",IsRequired=true, IsSerializable = true)]
        public decimal TaxRate
        {
            get
            {
                return _TaxRate;
            }
            set
            {
    
                if (_TaxRate != value)
                {
                          
                _TaxRate = value; 
               
           		}
    		}
     	}
    
     	private decimal _TaxRate;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="FreightMoney",DTOPropertyName="FreightMoney",IsRequired=true, IsSerializable = true)]
        public decimal FreightMoney
        {
            get
            {
                return _FreightMoney;
            }
            set
            {
    
                if (_FreightMoney != value)
                {
                          
                _FreightMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _FreightMoney;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="TradeId",DTOPropertyName="TradeId",IsRequired=true, IsSerializable = true)]
        public string TradeId
        {
            get
            {
                return _TradeId;
            }
            set
            {
    
                if (_TradeId != value)
                {
                          
                _TradeId = value; 
               
           		}
    		}
     	}
    
     	private string _TradeId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppName",DTOPropertyName="EsAppName",IsRequired=true, IsSerializable = true)]
        public string EsAppName
        {
            get
            {
                return _EsAppName;
            }
            set
            {
    
                if (_EsAppName != value)
                {
                          
                _EsAppName = value; 
               
           		}
    		}
     	}
    
     	private string _EsAppName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=true, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppType",DTOPropertyName="AppType",IsRequired=true, IsSerializable = true)]
        public short AppType
        {
            get
            {
                return _AppType;
            }
            set
            {
    
                if (_AppType != value)
                {
                          
                _AppType = value; 
               
           		}
    		}
     	}
    
     	private short _AppType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="RefundFreightMoney",DTOPropertyName="RefundFreightMoney",IsRequired=true, IsSerializable = true)]
        public decimal RefundFreightMoney
        {
            get
            {
                return _RefundFreightMoney;
            }
            set
            {
    
                if (_RefundFreightMoney != value)
                {
                          
                _RefundFreightMoney = value; 
               
           		}
    		}
     	}
    
     	private decimal _RefundFreightMoney;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YJBJOrderItemDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YJBJOrderItemDTO dto = srcDTO as YJBJOrderItemDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.Number = dto.Number;
    								
    				 this.RealPrice = dto.RealPrice;
    								
    				 this.ShouldMoney = dto.ShouldMoney;
    								
    				 this.DiscountMoney = dto.DiscountMoney;
    								
    				 this.PayMoney = dto.PayMoney;
    								
    				 this.TaxMoney = dto.TaxMoney;
    								
    				 this.RefundMoney = dto.RefundMoney;
    								
    				 this.CommodityName = dto.CommodityName;
    								
    				 this.CategoryName = dto.CategoryName;
    								
    				 this.TaxRate = dto.TaxRate;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.FreightMoney = dto.FreightMoney;
    								
    				 this.TradeId = dto.TradeId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.EsAppName = dto.EsAppName;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppType = dto.AppType;
    								
    				 this.RefundFreightMoney = dto.RefundFreightMoney;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YJBJOrderItemDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YJBJOrderItemDTO();
                base.ToBEData(ref todto);
    			YJBJOrderItemDTO dto = todto as YJBJOrderItemDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.Number = this.Number;
    								
    				 dto.RealPrice = this.RealPrice;
    								
    				 dto.ShouldMoney = this.ShouldMoney;
    								
    				 dto.DiscountMoney = this.DiscountMoney;
    								
    				 dto.PayMoney = this.PayMoney;
    								
    				 dto.TaxMoney = this.TaxMoney;
    								
    				 dto.RefundMoney = this.RefundMoney;
    								
    				 dto.CommodityName = this.CommodityName;
    								
    				 dto.CategoryName = this.CategoryName;
    								
    				 dto.TaxRate = this.TaxRate;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.FreightMoney = this.FreightMoney;
    								
    				 dto.TradeId = this.TradeId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.EsAppName = this.EsAppName;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppType = this.AppType;
    								
    				 dto.RefundFreightMoney = this.RefundFreightMoney;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YJEmployee",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YJEmployeeDTO))]
    public partial class YJEmployee: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YJEmployee ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 用户Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserId",DTOPropertyName="UserId",IsRequired=true, IsSerializable = true)]
        public System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
    
                if (_UserId != value)
                {
                          
                _UserId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _UserId;
        
    
        /// <summary>
        /// 用户账号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserAccount",DTOPropertyName="UserAccount",IsRequired=true, IsSerializable = true)]
        public string UserAccount
        {
            get
            {
                return _UserAccount;
            }
            set
            {
    
                if (_UserAccount != value)
                {
                          
                _UserAccount = value; 
               
           		}
    		}
     	}
    
     	private string _UserAccount;
        
    
        /// <summary>
        /// 用户名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="UserName",DTOPropertyName="UserName",IsRequired=false, IsSerializable = true)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
    
                if (_UserName != value)
                {
                          
                _UserName = value; 
               
           		}
    		}
     	}
    
     	private string _UserName;
        
    
        /// <summary>
        /// 身份证号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IdentityNum",DTOPropertyName="IdentityNum",IsRequired=false, IsSerializable = true)]
        public string IdentityNum
        {
            get
            {
                return _IdentityNum;
            }
            set
            {
    
                if (_IdentityNum != value)
                {
                          
                _IdentityNum = value; 
               
           		}
    		}
     	}
    
     	private string _IdentityNum;
        
    
        /// <summary>
        /// 联系方式
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Phone",DTOPropertyName="Phone",IsRequired=false, IsSerializable = true)]
        public string Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
    
                if (_Phone != value)
                {
                          
                _Phone = value; 
               
           		}
    		}
     	}
    
     	private string _Phone;
        
    
        /// <summary>
        ///  所属区域
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Area",DTOPropertyName="Area",IsRequired=false, IsSerializable = true)]
        public string Area
        {
            get
            {
                return _Area;
            }
            set
            {
    
                if (_Area != value)
                {
                          
                _Area = value; 
               
           		}
    		}
     	}
    
     	private string _Area;
        
    
        /// <summary>
        /// 站编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StationCode",DTOPropertyName="StationCode",IsRequired=false, IsSerializable = true)]
        public string StationCode
        {
            get
            {
                return _StationCode;
            }
            set
            {
    
                if (_StationCode != value)
                {
                          
                _StationCode = value; 
               
           		}
    		}
     	}
    
     	private string _StationCode;
        
    
        /// <summary>
        /// 站编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StationName",DTOPropertyName="StationName",IsRequired=false, IsSerializable = true)]
        public string StationName
        {
            get
            {
                return _StationName;
            }
            set
            {
    
                if (_StationName != value)
                {
                          
                _StationName = value; 
               
           		}
    		}
     	}
    
     	private string _StationName;
        
    
        /// <summary>
        /// 是否删除 0 未删除  1 删除
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsDel",DTOPropertyName="IsDel",IsRequired=true, IsSerializable = true)]
        public int IsDel
        {
            get
            {
                return _IsDel;
            }
            set
            {
    
                if (_IsDel != value)
                {
                          
                _IsDel = value; 
               
           		}
    		}
     	}
    
     	private int _IsDel;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubOn",DTOPropertyName="SubOn",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubOn
        {
            get
            {
                return _SubOn;
            }
            set
            {
    
                if (_SubOn != value)
                {
                          
                _SubOn = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubOn;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedId",DTOPropertyName="ModifiedId",IsRequired=false, IsSerializable = true)]
        public Nullable<System.Guid> ModifiedId
        {
            get
            {
                return _ModifiedId;
            }
            set
            {
    
                if (_ModifiedId != value)
                {
                          
                _ModifiedId = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.Guid> _ModifiedId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ModifiedOn",DTOPropertyName="ModifiedOn",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
    
                if (_ModifiedOn != value)
                {
                          
                _ModifiedOn = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ModifiedOn;
        
    
        /// <summary>
        /// 店铺编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 是否是管理岗 2不是  1是
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="IsManager",DTOPropertyName="IsManager",IsRequired=false, IsSerializable = true)]
        public Nullable<int> IsManager
        {
            get
            {
                return _IsManager;
            }
            set
            {
    
                if (_IsManager != value)
                {
                          
                _IsManager = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _IsManager;
        
    
        /// <summary>
        /// 部门名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Department",DTOPropertyName="Department",IsRequired=false, IsSerializable = true)]
        public string Department
        {
            get
            {
                return _Department;
            }
            set
            {
    
                if (_Department != value)
                {
                          
                _Department = value; 
               
           		}
    		}
     	}
    
     	private string _Department;
        
    
        /// <summary>
        /// 岗位
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Station",DTOPropertyName="Station",IsRequired=false, IsSerializable = true)]
        public string Station
        {
            get
            {
                return _Station;
            }
            set
            {
    
                if (_Station != value)
                {
                          
                _Station = value; 
               
           		}
    		}
     	}
    
     	private string _Station;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YJEmployeeDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YJEmployeeDTO dto = srcDTO as YJEmployeeDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.UserId = dto.UserId;
    								
    				 this.UserAccount = dto.UserAccount;
    								
    				 this.UserName = dto.UserName;
    								
    				 this.IdentityNum = dto.IdentityNum;
    								
    				 this.Phone = dto.Phone;
    								
    				 this.Area = dto.Area;
    								
    				 this.StationCode = dto.StationCode;
    								
    				 this.StationName = dto.StationName;
    								
    				 this.IsDel = dto.IsDel;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.SubOn = dto.SubOn;
    								
    				 this.ModifiedId = dto.ModifiedId;
    								
    				 this.ModifiedOn = dto.ModifiedOn;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.IsManager = dto.IsManager;
    								
    				 this.Department = dto.Department;
    								
    				 this.Station = dto.Station;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YJEmployeeDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YJEmployeeDTO();
                base.ToBEData(ref todto);
    			YJEmployeeDTO dto = todto as YJEmployeeDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.UserId = this.UserId;
    								
    				 dto.UserAccount = this.UserAccount;
    								
    				 dto.UserName = this.UserName;
    								
    				 dto.IdentityNum = this.IdentityNum;
    								
    				 dto.Phone = this.Phone;
    								
    				 dto.Area = this.Area;
    								
    				 dto.StationCode = this.StationCode;
    								
    				 dto.StationName = this.StationName;
    								
    				 dto.IsDel = this.IsDel;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.SubOn = this.SubOn;
    								
    				 dto.ModifiedId = (Guid)this.ModifiedId;
    								
    				 dto.ModifiedOn = (DateTime)this.ModifiedOn;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.IsManager = this.IsManager;
    								
    				 dto.Department = this.Department;
    								
    				 dto.Station = this.Station;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 盈科大数据平台mq发送日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YKBigDataMqJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YKBigDataMqJournalDTO))]
    public partial class YKBigDataMqJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YKBigDataMqJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 来源
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Source",DTOPropertyName="Source",IsRequired=true, IsSerializable = true)]
        public string Source
        {
            get
            {
                return _Source;
            }
            set
            {
    
                if (_Source != value)
                {
                          
                _Source = value; 
               
           		}
    		}
     	}
    
     	private string _Source;
        
    
        /// <summary>
        /// 结果
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Result",DTOPropertyName="Result",IsRequired=true, IsSerializable = true)]
        public string Result
        {
            get
            {
                return _Result;
            }
            set
            {
    
                if (_Result != value)
                {
                          
                _Result = value; 
               
           		}
    		}
     	}
    
     	private string _Result;
        
    
        /// <summary>
        /// 发送到mq的json
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YKBigDataMqJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YKBigDataMqJournalDTO dto = srcDTO as YKBigDataMqJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.Source = dto.Source;
    								
    				 this.Result = dto.Result;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YKBigDataMqJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YKBigDataMqJournalDTO();
                base.ToBEData(ref todto);
    			YKBigDataMqJournalDTO dto = todto as YKBigDataMqJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.Source = this.Source;
    								
    				 dto.Result = this.Result;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXComInfo",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXComInfoDTO))]
    public partial class YXComInfo: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXComInfo ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SPU",DTOPropertyName="SPU",IsRequired=true, IsSerializable = true)]
        public string SPU
        {
            get
            {
                return _SPU;
            }
            set
            {
    
                if (_SPU != value)
                {
                          
                _SPU = value; 
               
           		}
    		}
     	}
    
     	private string _SPU;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SKU",DTOPropertyName="SKU",IsRequired=false, IsSerializable = true)]
        public string SKU
        {
            get
            {
                return _SKU;
            }
            set
            {
    
                if (_SKU != value)
                {
                          
                _SKU = value; 
               
           		}
    		}
     	}
    
     	private string _SKU;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Price",DTOPropertyName="Price",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Price
        {
            get
            {
                return _Price;
            }
            set
            {
    
                if (_Price != value)
                {
                          
                _Price = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Price;
        
    
        /// <summary>
        /// 严选进货价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CostPrice",DTOPropertyName="CostPrice",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> CostPrice
        {
            get
            {
                return _CostPrice;
            }
            set
            {
    
                if (_CostPrice != value)
                {
                          
                _CostPrice = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _CostPrice;
        
    
        /// <summary>
        /// 严选折扣
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Discount",DTOPropertyName="Discount",IsRequired=false, IsSerializable = true)]
        public Nullable<decimal> Discount
        {
            get
            {
                return _Discount;
            }
            set
            {
    
                if (_Discount != value)
                {
                          
                _Discount = value; 
               
           		}
    		}
     	}
    
     	private Nullable<decimal> _Discount;
        
    
        /// <summary>
        /// 创建时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXComInfoDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXComInfoDTO dto = srcDTO as YXComInfoDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.SPU = dto.SPU;
    								
    				 this.SKU = dto.SKU;
    								
    				 this.Price = dto.Price;
    								
    				 this.CostPrice = dto.CostPrice;
    								
    				 this.Discount = dto.Discount;
    								
    				 this.SubTime = dto.SubTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXComInfoDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXComInfoDTO();
                base.ToBEData(ref todto);
    			YXComInfoDTO dto = todto as YXComInfoDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.SPU = this.SPU;
    								
    				 dto.SKU = this.SKU;
    								
    				 dto.Price = this.Price;
    								
    				 dto.CostPrice = this.CostPrice;
    								
    				 dto.Discount = this.Discount;
    								
    				 dto.SubTime = this.SubTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单包裹物流
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXExpressDetailInfo",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXExpressDetailInfoDTO))]
    public partial class YXExpressDetailInfo: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXExpressDetailInfo ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 包裹id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageId",DTOPropertyName="PackageId",IsRequired=true, IsSerializable = true)]
        public string PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
    
                if (_PackageId != value)
                {
                          
                _PackageId = value; 
               
           		}
    		}
     	}
    
     	private string _PackageId;
        
    
        /// <summary>
        /// 物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressCompany",DTOPropertyName="ExpressCompany",IsRequired=true, IsSerializable = true)]
        public string ExpressCompany
        {
            get
            {
                return _ExpressCompany;
            }
            set
            {
    
                if (_ExpressCompany != value)
                {
                          
                _ExpressCompany = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressCompany;
        
    
        /// <summary>
        /// 物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressNo",DTOPropertyName="ExpressNo",IsRequired=true, IsSerializable = true)]
        public string ExpressNo
        {
            get
            {
                return _ExpressNo;
            }
            set
            {
    
                if (_ExpressNo != value)
                {
                          
                _ExpressNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressNo;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXExpressDetailInfoDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXExpressDetailInfoDTO dto = srcDTO as YXExpressDetailInfoDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.PackageId = dto.PackageId;
    								
    				 this.ExpressCompany = dto.ExpressCompany;
    								
    				 this.ExpressNo = dto.ExpressNo;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXExpressDetailInfoDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXExpressDetailInfoDTO();
                base.ToBEData(ref todto);
    			YXExpressDetailInfoDTO dto = todto as YXExpressDetailInfoDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.PackageId = this.PackageId;
    								
    				 dto.ExpressCompany = this.ExpressCompany;
    								
    				 dto.ExpressNo = this.ExpressNo;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单包裹商品物流
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXExpressDetailInfoSku",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXExpressDetailInfoSkuDTO))]
    public partial class YXExpressDetailInfoSku: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXExpressDetailInfoSku ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 订单项id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 商品id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品StockId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityStockId;
        
    
        /// <summary>
        /// 包裹id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageId",DTOPropertyName="PackageId",IsRequired=true, IsSerializable = true)]
        public string PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
    
                if (_PackageId != value)
                {
                          
                _PackageId = value; 
               
           		}
    		}
     	}
    
     	private string _PackageId;
        
    
        /// <summary>
        /// 严选skuId(对应商品备注编码jdcode)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SkuId",DTOPropertyName="SkuId",IsRequired=true, IsSerializable = true)]
        public string SkuId
        {
            get
            {
                return _SkuId;
            }
            set
            {
    
                if (_SkuId != value)
                {
                          
                _SkuId = value; 
               
           		}
    		}
     	}
    
     	private string _SkuId;
        
    
        /// <summary>
        /// 商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ProductName",DTOPropertyName="ProductName",IsRequired=true, IsSerializable = true)]
        public string ProductName
        {
            get
            {
                return _ProductName;
            }
            set
            {
    
                if (_ProductName != value)
                {
                          
                _ProductName = value; 
               
           		}
    		}
     	}
    
     	private string _ProductName;
        
    
        /// <summary>
        /// 商品数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleCount",DTOPropertyName="SaleCount",IsRequired=true, IsSerializable = true)]
        public int SaleCount
        {
            get
            {
                return _SaleCount;
            }
            set
            {
    
                if (_SaleCount != value)
                {
                          
                _SaleCount = value; 
               
           		}
    		}
     	}
    
     	private int _SaleCount;
        
    
        /// <summary>
        /// 商品单价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OriginPrice",DTOPropertyName="OriginPrice",IsRequired=true, IsSerializable = true)]
        public decimal OriginPrice
        {
            get
            {
                return _OriginPrice;
            }
            set
            {
    
                if (_OriginPrice != value)
                {
                          
                _OriginPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _OriginPrice;
        
    
        /// <summary>
        /// 金额小计
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubtotalAmount",DTOPropertyName="SubtotalAmount",IsRequired=true, IsSerializable = true)]
        public decimal SubtotalAmount
        {
            get
            {
                return _SubtotalAmount;
            }
            set
            {
    
                if (_SubtotalAmount != value)
                {
                          
                _SubtotalAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _SubtotalAmount;
        
    
        /// <summary>
        /// 优惠卷金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponTotalAmount",DTOPropertyName="CouponTotalAmount",IsRequired=true, IsSerializable = true)]
        public decimal CouponTotalAmount
        {
            get
            {
                return _CouponTotalAmount;
            }
            set
            {
    
                if (_CouponTotalAmount != value)
                {
                          
                _CouponTotalAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _CouponTotalAmount;
        
    
        /// <summary>
        /// 活动优惠金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ActivityTotalAmount",DTOPropertyName="ActivityTotalAmount",IsRequired=true, IsSerializable = true)]
        public decimal ActivityTotalAmount
        {
            get
            {
                return _ActivityTotalAmount;
            }
            set
            {
    
                if (_ActivityTotalAmount != value)
                {
                          
                _ActivityTotalAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _ActivityTotalAmount;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="YXExpressDetailInfoId",DTOPropertyName="YXExpressDetailInfoId",IsRequired=true, IsSerializable = true)]
        public System.Guid YXExpressDetailInfoId
        {
            get
            {
                return _YXExpressDetailInfoId;
            }
            set
            {
    
                if (_YXExpressDetailInfoId != value)
                {
                          
                _YXExpressDetailInfoId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _YXExpressDetailInfoId;
        
    
        /// <summary>
        /// 物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressCompany",DTOPropertyName="ExpressCompany",IsRequired=true, IsSerializable = true)]
        public string ExpressCompany
        {
            get
            {
                return _ExpressCompany;
            }
            set
            {
    
                if (_ExpressCompany != value)
                {
                          
                _ExpressCompany = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressCompany;
        
    
        /// <summary>
        /// 物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressNo",DTOPropertyName="ExpressNo",IsRequired=true, IsSerializable = true)]
        public string ExpressNo
        {
            get
            {
                return _ExpressNo;
            }
            set
            {
    
                if (_ExpressNo != value)
                {
                          
                _ExpressNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressNo;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXExpressDetailInfoSkuDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXExpressDetailInfoSkuDTO dto = srcDTO as YXExpressDetailInfoSkuDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.PackageId = dto.PackageId;
    								
    				 this.SkuId = dto.SkuId;
    								
    				 this.ProductName = dto.ProductName;
    								
    				 this.SaleCount = dto.SaleCount;
    								
    				 this.OriginPrice = dto.OriginPrice;
    								
    				 this.SubtotalAmount = dto.SubtotalAmount;
    								
    				 this.CouponTotalAmount = dto.CouponTotalAmount;
    								
    				 this.ActivityTotalAmount = dto.ActivityTotalAmount;
    								
    				 this.YXExpressDetailInfoId = dto.YXExpressDetailInfoId;
    								
    				 this.ExpressCompany = dto.ExpressCompany;
    								
    				 this.ExpressNo = dto.ExpressNo;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXExpressDetailInfoSkuDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXExpressDetailInfoSkuDTO();
                base.ToBEData(ref todto);
    			YXExpressDetailInfoSkuDTO dto = todto as YXExpressDetailInfoSkuDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.PackageId = this.PackageId;
    								
    				 dto.SkuId = this.SkuId;
    								
    				 dto.ProductName = this.ProductName;
    								
    				 dto.SaleCount = this.SaleCount;
    								
    				 dto.OriginPrice = this.OriginPrice;
    								
    				 dto.SubtotalAmount = this.SubtotalAmount;
    								
    				 dto.CouponTotalAmount = this.CouponTotalAmount;
    								
    				 dto.ActivityTotalAmount = this.ActivityTotalAmount;
    								
    				 dto.YXExpressDetailInfoId = this.YXExpressDetailInfoId;
    								
    				 dto.ExpressCompany = this.ExpressCompany;
    								
    				 dto.ExpressNo = this.ExpressNo;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 严选物流跟踪表
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXExpressTrace",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXExpressTraceDTO))]
    public partial class YXExpressTrace: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXExpressTrace ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 包裹id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageId",DTOPropertyName="PackageId",IsRequired=true, IsSerializable = true)]
        public string PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
    
                if (_PackageId != value)
                {
                          
                _PackageId = value; 
               
           		}
    		}
     	}
    
     	private string _PackageId;
        
    
        /// <summary>
        /// 物流公司
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressCompany",DTOPropertyName="ExpressCompany",IsRequired=true, IsSerializable = true)]
        public string ExpressCompany
        {
            get
            {
                return _ExpressCompany;
            }
            set
            {
    
                if (_ExpressCompany != value)
                {
                          
                _ExpressCompany = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressCompany;
        
    
        /// <summary>
        /// 物流单号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressNo",DTOPropertyName="ExpressNo",IsRequired=true, IsSerializable = true)]
        public string ExpressNo
        {
            get
            {
                return _ExpressNo;
            }
            set
            {
    
                if (_ExpressNo != value)
                {
                          
                _ExpressNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressNo;
        
    
        /// <summary>
        /// 物流轨迹时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Time",DTOPropertyName="Time",IsRequired=true, IsSerializable = true)]
        public System.DateTime Time
        {
            get
            {
                return _Time;
            }
            set
            {
    
                if (_Time != value)
                {
                          
                _Time = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _Time;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXExpressTraceDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXExpressTraceDTO dto = srcDTO as YXExpressTraceDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.PackageId = dto.PackageId;
    								
    				 this.ExpressCompany = dto.ExpressCompany;
    								
    				 this.ExpressNo = dto.ExpressNo;
    								
    				 this.Time = dto.Time;
    								
    				 this.SubTime = dto.SubTime;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXExpressTraceDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXExpressTraceDTO();
                base.ToBEData(ref todto);
    			YXExpressTraceDTO dto = todto as YXExpressTraceDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.PackageId = this.PackageId;
    								
    				 dto.ExpressCompany = this.ExpressCompany;
    								
    				 dto.ExpressNo = this.ExpressNo;
    								
    				 dto.Time = this.Time;
    								
    				 dto.SubTime = this.SubTime;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXOrder",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXOrderDTO))]
    public partial class YXOrder: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXOrder ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 严选订单状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderState",DTOPropertyName="OrderState",IsRequired=true, IsSerializable = true)]
        public int OrderState
        {
            get
            {
                return _OrderState;
            }
            set
            {
    
                if (_OrderState != value)
                {
                          
                _OrderState = value; 
               
           		}
    		}
     	}
    
     	private int _OrderState;
        
    
        /// <summary>
        /// 严选订单状态说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderStateName",DTOPropertyName="OrderStateName",IsRequired=true, IsSerializable = true)]
        public string OrderStateName
        {
            get
            {
                return _OrderStateName;
            }
            set
            {
    
                if (_OrderStateName != value)
                {
                          
                _OrderStateName = value; 
               
           		}
    		}
     	}
    
     	private string _OrderStateName;
        
    
        /// <summary>
        /// 下单时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderSubTime",DTOPropertyName="OrderSubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime OrderSubTime
        {
            get
            {
                return _OrderSubTime;
            }
            set
            {
    
                if (_OrderSubTime != value)
                {
                          
                _OrderSubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _OrderSubTime;
        
    
        /// <summary>
        /// 支付时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PayTime",DTOPropertyName="PayTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime PayTime
        {
            get
            {
                return _PayTime;
            }
            set
            {
    
                if (_PayTime != value)
                {
                          
                _PayTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _PayTime;
        
    
        /// <summary>
        /// 订单取消时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CancelTime",DTOPropertyName="CancelTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> CancelTime
        {
            get
            {
                return _CancelTime;
            }
            set
            {
    
                if (_CancelTime != value)
                {
                          
                _CancelTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _CancelTime;
        
    
        /// <summary>
        /// 下单用户Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 订单所属商家Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 订单所属商城Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="EsAppId",DTOPropertyName="EsAppId",IsRequired=true, IsSerializable = true)]
        public System.Guid EsAppId
        {
            get
            {
                return _EsAppId;
            }
            set
            {
    
                if (_EsAppId != value)
                {
                          
                _EsAppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _EsAppId;
        
    
        /// <summary>
        /// 商家名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 商家类型
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppType",DTOPropertyName="AppType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> AppType
        {
            get
            {
                return _AppType;
            }
            set
            {
    
                if (_AppType != value)
                {
                          
                _AppType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _AppType;
        
    
        /// <summary>
        /// 供应商名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierName",DTOPropertyName="SupplierName",IsRequired=false, IsSerializable = true)]
        public string SupplierName
        {
            get
            {
                return _SupplierName;
            }
            set
            {
    
                if (_SupplierName != value)
                {
                          
                _SupplierName = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierName;
        
    
        /// <summary>
        /// 供应商编码
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierCode",DTOPropertyName="SupplierCode",IsRequired=false, IsSerializable = true)]
        public string SupplierCode
        {
            get
            {
                return _SupplierCode;
            }
            set
            {
    
                if (_SupplierCode != value)
                {
                          
                _SupplierCode = value; 
               
           		}
    		}
     	}
    
     	private string _SupplierCode;
        
    
        /// <summary>
        /// 供应商类型
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SupplierType",DTOPropertyName="SupplierType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> SupplierType
        {
            get
            {
                return _SupplierType;
            }
            set
            {
    
                if (_SupplierType != value)
                {
                          
                _SupplierType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _SupplierType;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ShipperType",DTOPropertyName="ShipperType",IsRequired=false, IsSerializable = true)]
        public Nullable<short> ShipperType
        {
            get
            {
                return _ShipperType;
            }
            set
            {
    
                if (_ShipperType != value)
                {
                          
                _ShipperType = value; 
               
           		}
    		}
     	}
    
     	private Nullable<short> _ShipperType;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXOrderDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXOrderDTO dto = srcDTO as YXOrderDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.OrderState = dto.OrderState;
    								
    				 this.OrderStateName = dto.OrderStateName;
    								
    				 this.OrderSubTime = dto.OrderSubTime;
    								
    				 this.PayTime = dto.PayTime;
    								
    				 this.CancelTime = dto.CancelTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.EsAppId = dto.EsAppId;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.AppType = dto.AppType;
    								
    				 this.SupplierName = dto.SupplierName;
    								
    				 this.SupplierCode = dto.SupplierCode;
    								
    				 this.SupplierType = dto.SupplierType;
    								
    				 this.ShipperType = dto.ShipperType;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXOrderDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXOrderDTO();
                base.ToBEData(ref todto);
    			YXOrderDTO dto = todto as YXOrderDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.OrderState = this.OrderState;
    								
    				 dto.OrderStateName = this.OrderStateName;
    								
    				 dto.OrderSubTime = this.OrderSubTime;
    								
    				 dto.PayTime = this.PayTime;
    								
    				 dto.CancelTime = this.CancelTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.EsAppId = this.EsAppId;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.AppType = this.AppType;
    								
    				 dto.SupplierName = this.SupplierName;
    								
    				 dto.SupplierCode = this.SupplierCode;
    								
    				 dto.SupplierType = this.SupplierType;
    								
    				 dto.ShipperType = this.ShipperType;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单错误日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXOrderErrorLog",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXOrderErrorLogDTO))]
    public partial class YXOrderErrorLog: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXOrderErrorLog ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 错误信息
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Content",DTOPropertyName="Content",IsRequired=false, IsSerializable = true)]
        public string Content
        {
            get
            {
                return _Content;
            }
            set
            {
    
                if (_Content != value)
                {
                          
                _Content = value; 
               
           		}
    		}
     	}
    
     	private string _Content;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 删除标记
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Isdisable",DTOPropertyName="Isdisable",IsRequired=true, IsSerializable = true)]
        public bool Isdisable
        {
            get
            {
                return _Isdisable;
            }
            set
            {
    
                if (_Isdisable != value)
                {
                          
                _Isdisable = value; 
               
           		}
    		}
     	}
    
     	private bool _Isdisable;
        
    
        /// <summary>
        /// 订单所属商家Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppId",DTOPropertyName="AppId",IsRequired=true, IsSerializable = true)]
        public System.Guid AppId
        {
            get
            {
                return _AppId;
            }
            set
            {
    
                if (_AppId != value)
                {
                          
                _AppId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _AppId;
        
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 商家名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="AppName",DTOPropertyName="AppName",IsRequired=false, IsSerializable = true)]
        public string AppName
        {
            get
            {
                return _AppName;
            }
            set
            {
    
                if (_AppName != value)
                {
                          
                _AppName = value; 
               
           		}
    		}
     	}
    
     	private string _AppName;
        
    
        /// <summary>
        /// 商品名称串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityNames",DTOPropertyName="CommodityNames",IsRequired=false, IsSerializable = true)]
        public string CommodityNames
        {
            get
            {
                return _CommodityNames;
            }
            set
            {
    
                if (_CommodityNames != value)
                {
                          
                _CommodityNames = value; 
               
           		}
    		}
     	}
    
     	private string _CommodityNames;
        
    
        /// <summary>
        /// 操作数据json串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXOrderErrorLogDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXOrderErrorLogDTO dto = srcDTO as YXOrderErrorLogDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.Content = dto.Content;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.Isdisable = dto.Isdisable;
    								
    				 this.AppId = dto.AppId;
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.AppName = dto.AppName;
    								
    				 this.CommodityNames = dto.CommodityNames;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXOrderErrorLogDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXOrderErrorLogDTO();
                base.ToBEData(ref todto);
    			YXOrderErrorLogDTO dto = todto as YXOrderErrorLogDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.Content = this.Content;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.Isdisable = this.Isdisable;
    								
    				 dto.AppId = this.AppId;
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.AppName = this.AppName;
    								
    				 dto.CommodityNames = this.CommodityNames;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXOrderJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXOrderJournalDTO))]
    public partial class YXOrderJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXOrderJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 操作详情
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 操作前状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateFrom",DTOPropertyName="StateFrom",IsRequired=false, IsSerializable = true)]
        public Nullable<int> StateFrom
        {
            get
            {
                return _StateFrom;
            }
            set
            {
    
                if (_StateFrom != value)
                {
                          
                _StateFrom = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _StateFrom;
        
    
        /// <summary>
        /// 操作后状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateTo",DTOPropertyName="StateTo",IsRequired=true, IsSerializable = true)]
        public int StateTo
        {
            get
            {
                return _StateTo;
            }
            set
            {
    
                if (_StateTo != value)
                {
                          
                _StateTo = value; 
               
           		}
    		}
     	}
    
     	private int _StateTo = 0;
        
    
        /// <summary>
        /// 操作数据json串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXOrderJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXOrderJournalDTO dto = srcDTO as YXOrderJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Details = dto.Details;
    								
    				 this.StateFrom = dto.StateFrom;
    								
    				 this.StateTo = dto.StateTo;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXOrderJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXOrderJournalDTO();
                base.ToBEData(ref todto);
    			YXOrderJournalDTO dto = todto as YXOrderJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.StateFrom = this.StateFrom;
    								
    				 dto.StateTo = this.StateTo;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单包裹
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXOrderPackage",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXOrderPackageDTO))]
    public partial class YXOrderPackage: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXOrderPackage ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 包裹id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageId",DTOPropertyName="PackageId",IsRequired=true, IsSerializable = true)]
        public string PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
    
                if (_PackageId != value)
                {
                          
                _PackageId = value; 
               
           		}
    		}
     	}
    
     	private string _PackageId;
        
    
        /// <summary>
        /// 物流公司名称串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressCompany",DTOPropertyName="ExpressCompany",IsRequired=true, IsSerializable = true)]
        public string ExpressCompany
        {
            get
            {
                return _ExpressCompany;
            }
            set
            {
    
                if (_ExpressCompany != value)
                {
                          
                _ExpressCompany = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressCompany;
        
    
        /// <summary>
        /// 物流单号串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpressNo",DTOPropertyName="ExpressNo",IsRequired=true, IsSerializable = true)]
        public string ExpressNo
        {
            get
            {
                return _ExpressNo;
            }
            set
            {
    
                if (_ExpressNo != value)
                {
                          
                _ExpressNo = value; 
               
           		}
    		}
     	}
    
     	private string _ExpressNo;
        
    
        /// <summary>
        /// 发货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpCreateTime",DTOPropertyName="ExpCreateTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ExpCreateTime
        {
            get
            {
                return _ExpCreateTime;
            }
            set
            {
    
                if (_ExpCreateTime != value)
                {
                          
                _ExpCreateTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ExpCreateTime;
        
    
        /// <summary>
        /// 收货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ConfirmTime",DTOPropertyName="ConfirmTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ConfirmTime
        {
            get
            {
                return _ConfirmTime;
            }
            set
            {
    
                if (_ConfirmTime != value)
                {
                          
                _ConfirmTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ConfirmTime;
        
    
        /// <summary>
        /// 包裹状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageState",DTOPropertyName="PackageState",IsRequired=true, IsSerializable = true)]
        public int PackageState
        {
            get
            {
                return _PackageState;
            }
            set
            {
    
                if (_PackageState != value)
                {
                          
                _PackageState = value; 
               
           		}
    		}
     	}
    
     	private int _PackageState;
        
    
        /// <summary>
        /// 包裹状态说明
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageStateName",DTOPropertyName="PackageStateName",IsRequired=true, IsSerializable = true)]
        public string PackageStateName
        {
            get
            {
                return _PackageStateName;
            }
            set
            {
    
                if (_PackageStateName != value)
                {
                          
                _PackageStateName = value; 
               
           		}
    		}
     	}
    
     	private string _PackageStateName;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXOrderPackageDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXOrderPackageDTO dto = srcDTO as YXOrderPackageDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.PackageId = dto.PackageId;
    								
    				 this.ExpressCompany = dto.ExpressCompany;
    								
    				 this.ExpressNo = dto.ExpressNo;
    								
    				 this.ExpCreateTime = dto.ExpCreateTime;
    								
    				 this.ConfirmTime = dto.ConfirmTime;
    								
    				 this.PackageState = dto.PackageState;
    								
    				 this.PackageStateName = dto.PackageStateName;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXOrderPackageDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXOrderPackageDTO();
                base.ToBEData(ref todto);
    			YXOrderPackageDTO dto = todto as YXOrderPackageDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.PackageId = this.PackageId;
    								
    				 dto.ExpressCompany = this.ExpressCompany;
    								
    				 dto.ExpressNo = this.ExpressNo;
    								
    				 dto.ExpCreateTime = this.ExpCreateTime;
    								
    				 dto.ConfirmTime = this.ConfirmTime;
    								
    				 dto.PackageState = this.PackageState;
    								
    				 dto.PackageStateName = this.PackageStateName;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单包裹日志
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXOrderPackageJournal",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXOrderPackageJournalDTO))]
    public partial class YXOrderPackageJournal: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXOrderPackageJournal ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 包裹id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageId",DTOPropertyName="PackageId",IsRequired=true, IsSerializable = true)]
        public string PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
    
                if (_PackageId != value)
                {
                          
                _PackageId = value; 
               
           		}
    		}
     	}
    
     	private string _PackageId;
        
    
        /// <summary>
        /// 发货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ExpCreateTime",DTOPropertyName="ExpCreateTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ExpCreateTime
        {
            get
            {
                return _ExpCreateTime;
            }
            set
            {
    
                if (_ExpCreateTime != value)
                {
                          
                _ExpCreateTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ExpCreateTime;
        
    
        /// <summary>
        /// 收货时间
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ConfirmTime",DTOPropertyName="ConfirmTime",IsRequired=false, IsSerializable = true)]
        public Nullable<System.DateTime> ConfirmTime
        {
            get
            {
                return _ConfirmTime;
            }
            set
            {
    
                if (_ConfirmTime != value)
                {
                          
                _ConfirmTime = value; 
               
           		}
    		}
     	}
    
     	private Nullable<System.DateTime> _ConfirmTime;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubId",DTOPropertyName="SubId",IsRequired=true, IsSerializable = true)]
        public System.Guid SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
    
                if (_SubId != value)
                {
                          
                _SubId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _SubId;
        
    
        /// <summary>
        /// 操作详情
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Details",DTOPropertyName="Details",IsRequired=false, IsSerializable = true)]
        public string Details
        {
            get
            {
                return _Details;
            }
            set
            {
    
                if (_Details != value)
                {
                          
                _Details = value; 
               
           		}
    		}
     	}
    
     	private string _Details;
        
    
        /// <summary>
        /// 操作前状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateFrom",DTOPropertyName="StateFrom",IsRequired=false, IsSerializable = true)]
        public Nullable<int> StateFrom
        {
            get
            {
                return _StateFrom;
            }
            set
            {
    
                if (_StateFrom != value)
                {
                          
                _StateFrom = value; 
               
           		}
    		}
     	}
    
     	private Nullable<int> _StateFrom;
        
    
        /// <summary>
        /// 操作后状态
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="StateTo",DTOPropertyName="StateTo",IsRequired=true, IsSerializable = true)]
        public int StateTo
        {
            get
            {
                return _StateTo;
            }
            set
            {
    
                if (_StateTo != value)
                {
                          
                _StateTo = value; 
               
           		}
    		}
     	}
    
     	private int _StateTo = 0;
        
    
        /// <summary>
        /// 操作数据json串
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="Json",DTOPropertyName="Json",IsRequired=false, IsSerializable = true)]
        public string Json
        {
            get
            {
                return _Json;
            }
            set
            {
    
                if (_Json != value)
                {
                          
                _Json = value; 
               
           		}
    		}
     	}
    
     	private string _Json;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXOrderPackageJournalDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXOrderPackageJournalDTO dto = srcDTO as YXOrderPackageJournalDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.PackageId = dto.PackageId;
    								
    				 this.ExpCreateTime = dto.ExpCreateTime;
    								
    				 this.ConfirmTime = dto.ConfirmTime;
    								
    				 this.SubId = dto.SubId;
    								
    				 this.Details = dto.Details;
    								
    				 this.StateFrom = dto.StateFrom;
    								
    				 this.StateTo = dto.StateTo;
    								
    				 this.Json = dto.Json;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXOrderPackageJournalDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXOrderPackageJournalDTO();
                base.ToBEData(ref todto);
    			YXOrderPackageJournalDTO dto = todto as YXOrderPackageJournalDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.PackageId = this.PackageId;
    								
    				 dto.ExpCreateTime = this.ExpCreateTime;
    								
    				 dto.ConfirmTime = this.ConfirmTime;
    								
    				 dto.SubId = this.SubId;
    								
    				 dto.Details = this.Details;
    								
    				 dto.StateFrom = this.StateFrom;
    								
    				 dto.StateTo = this.StateTo;
    								
    				 dto.Json = this.Json;
    			        }
    		
        #endregion
     }
       
    /// <summary>
    /// 网易严选订单包裹商品
    /// </summary>
    [ModelClass(DTOAssemblyName="Jinher.AMP.BTP.Deploy",DTOTypeName="Jinher.AMP.BTP.Deploy.YXOrderSku",IsMain=true,MainTypeName = "", type = typeof(Jinher.AMP.BTP.Deploy.YXOrderSkuDTO))]
    public partial class YXOrderSku: BaseModel
    {
    
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public  YXOrderSku ()
        {
           
        }
        #region 简单类型属性
    
        /// <summary>
        /// 订单Id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderId",DTOPropertyName="OrderId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderId
        {
            get
            {
                return _OrderId;
            }
            set
            {
    
                if (_OrderId != value)
                {
                          
                _OrderId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderId;
        
    
        /// <summary>
        /// 订单编号
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderCode",DTOPropertyName="OrderCode",IsRequired=true, IsSerializable = true)]
        public string OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
    
                if (_OrderCode != value)
                {
                          
                _OrderCode = value; 
               
           		}
    		}
     	}
    
     	private string _OrderCode;
        
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubTime",DTOPropertyName="SubTime",IsRequired=true, IsSerializable = true)]
        public System.DateTime SubTime
        {
            get
            {
                return _SubTime;
            }
            set
            {
    
                if (_SubTime != value)
                {
                          
                _SubTime = value; 
               
           		}
    		}
     	}
    
     	private System.DateTime _SubTime;
        
    
        /// <summary>
        /// 订单项id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OrderItemId",DTOPropertyName="OrderItemId",IsRequired=true, IsSerializable = true)]
        public System.Guid OrderItemId
        {
            get
            {
                return _OrderItemId;
            }
            set
            {
    
                if (_OrderItemId != value)
                {
                          
                _OrderItemId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _OrderItemId;
        
    
        /// <summary>
        /// 商品id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityId",DTOPropertyName="CommodityId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityId
        {
            get
            {
                return _CommodityId;
            }
            set
            {
    
                if (_CommodityId != value)
                {
                          
                _CommodityId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityId;
        
    
        /// <summary>
        /// 商品StockId
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CommodityStockId",DTOPropertyName="CommodityStockId",IsRequired=true, IsSerializable = true)]
        public System.Guid CommodityStockId
        {
            get
            {
                return _CommodityStockId;
            }
            set
            {
    
                if (_CommodityStockId != value)
                {
                          
                _CommodityStockId = value; 
               
           		}
    		}
     	}
    
     	private System.Guid _CommodityStockId;
        
    
        /// <summary>
        /// 包裹id
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="PackageId",DTOPropertyName="PackageId",IsRequired=true, IsSerializable = true)]
        public string PackageId
        {
            get
            {
                return _PackageId;
            }
            set
            {
    
                if (_PackageId != value)
                {
                          
                _PackageId = value; 
               
           		}
    		}
     	}
    
     	private string _PackageId;
        
    
        /// <summary>
        /// 严选skuId(对应商品备注编码jdcode)
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SkuId",DTOPropertyName="SkuId",IsRequired=true, IsSerializable = true)]
        public string SkuId
        {
            get
            {
                return _SkuId;
            }
            set
            {
    
                if (_SkuId != value)
                {
                          
                _SkuId = value; 
               
           		}
    		}
     	}
    
     	private string _SkuId;
        
    
        /// <summary>
        /// 商品名称
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ProductName",DTOPropertyName="ProductName",IsRequired=true, IsSerializable = true)]
        public string ProductName
        {
            get
            {
                return _ProductName;
            }
            set
            {
    
                if (_ProductName != value)
                {
                          
                _ProductName = value; 
               
           		}
    		}
     	}
    
     	private string _ProductName;
        
    
        /// <summary>
        /// 商品数量
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SaleCount",DTOPropertyName="SaleCount",IsRequired=true, IsSerializable = true)]
        public int SaleCount
        {
            get
            {
                return _SaleCount;
            }
            set
            {
    
                if (_SaleCount != value)
                {
                          
                _SaleCount = value; 
               
           		}
    		}
     	}
    
     	private int _SaleCount;
        
    
        /// <summary>
        /// 商品单价
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="OriginPrice",DTOPropertyName="OriginPrice",IsRequired=true, IsSerializable = true)]
        public decimal OriginPrice
        {
            get
            {
                return _OriginPrice;
            }
            set
            {
    
                if (_OriginPrice != value)
                {
                          
                _OriginPrice = value; 
               
           		}
    		}
     	}
    
     	private decimal _OriginPrice;
        
    
        /// <summary>
        /// 金额小计
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="SubtotalAmount",DTOPropertyName="SubtotalAmount",IsRequired=true, IsSerializable = true)]
        public decimal SubtotalAmount
        {
            get
            {
                return _SubtotalAmount;
            }
            set
            {
    
                if (_SubtotalAmount != value)
                {
                          
                _SubtotalAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _SubtotalAmount;
        
    
        /// <summary>
        /// 优惠卷金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="CouponTotalAmount",DTOPropertyName="CouponTotalAmount",IsRequired=true, IsSerializable = true)]
        public decimal CouponTotalAmount
        {
            get
            {
                return _CouponTotalAmount;
            }
            set
            {
    
                if (_CouponTotalAmount != value)
                {
                          
                _CouponTotalAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _CouponTotalAmount;
        
    
        /// <summary>
        /// 活动优惠金额
        /// </summary> 
    	[ModelProperty(DisplayNameResKey="ActivityTotalAmount",DTOPropertyName="ActivityTotalAmount",IsRequired=true, IsSerializable = true)]
        public decimal ActivityTotalAmount
        {
            get
            {
                return _ActivityTotalAmount;
            }
            set
            {
    
                if (_ActivityTotalAmount != value)
                {
                          
                _ActivityTotalAmount = value; 
               
           		}
    		}
     	}
    
     	private decimal _ActivityTotalAmount;
        

        #endregion
    
        #region 基类抽象方法重载
    	         
    	public override void BusinessRuleValidate()				
    	{
    		
    	}
    		
        #endregion
    
        #region Model和DTO转换方法
    		/// <summary>
            /// DTO->Model
            /// </summary>
            /// <param name="srcDTO">来源DTO,YXOrderSkuDTO类型的实例</param>
    		protected override void FromBEData(JAP.BF.BE.Deploy.Base.BusinessDTO srcDTO)
            {
                YXOrderSkuDTO dto = srcDTO as YXOrderSkuDTO;
                if (dto == null)
                    throw new System.ArgumentNullException("dto cannot be null");
                base.FromBEData(srcDTO);
    			
    								
    				 this.OrderId = dto.OrderId;
    								
    				 this.OrderCode = dto.OrderCode;
    								
    				 this.SubTime = dto.SubTime;
    								
    				 this.OrderItemId = dto.OrderItemId;
    								
    				 this.CommodityId = dto.CommodityId;
    								
    				 this.CommodityStockId = dto.CommodityStockId;
    								
    				 this.PackageId = dto.PackageId;
    								
    				 this.SkuId = dto.SkuId;
    								
    				 this.ProductName = dto.ProductName;
    								
    				 this.SaleCount = dto.SaleCount;
    								
    				 this.OriginPrice = dto.OriginPrice;
    								
    				 this.SubtotalAmount = dto.SubtotalAmount;
    								
    				 this.CouponTotalAmount = dto.CouponTotalAmount;
    								
    				 this.ActivityTotalAmount = dto.ActivityTotalAmount;
    			        }
    				/// <summary>
            /// Model->DTO
            /// </summary>
            /// <param name="todto">ref参数，YXOrderSkuDTO类型的实例</param>
    		protected override void ToBEData(ref Jinher.JAP.BF.BE.Deploy.Base.BusinessDTO todto)
            {
                if (todto == null)
                    todto = new YXOrderSkuDTO();
                base.ToBEData(ref todto);
    			YXOrderSkuDTO dto = todto as YXOrderSkuDTO;
                System.Runtime.Remoting.Messaging.CallContext.SetData(this.Id.ToString() + this.GetType().FullName, dto);
    								
    				 dto.OrderId = this.OrderId;
    								
    				 dto.OrderCode = this.OrderCode;
    								
    				 dto.SubTime = this.SubTime;
    								
    				 dto.OrderItemId = this.OrderItemId;
    								
    				 dto.CommodityId = this.CommodityId;
    								
    				 dto.CommodityStockId = this.CommodityStockId;
    								
    				 dto.PackageId = this.PackageId;
    								
    				 dto.SkuId = this.SkuId;
    								
    				 dto.ProductName = this.ProductName;
    								
    				 dto.SaleCount = this.SaleCount;
    								
    				 dto.OriginPrice = this.OriginPrice;
    								
    				 dto.SubtotalAmount = this.SubtotalAmount;
    								
    				 dto.CouponTotalAmount = this.CouponTotalAmount;
    								
    				 dto.ActivityTotalAmount = this.ActivityTotalAmount;
    			        }
    		
        #endregion
     }
       
    #endregion
    }
